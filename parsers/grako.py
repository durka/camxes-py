#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import graken, Parser
from grako.exceptions import *  # noqa


__version__ = '2014.07.10.19.40.49.03'

__all__ = [
    'LojbanParser',
    'LojbanSemanticParser',
    'LojbanSemantics',
    'main'
]


class LojbanParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=True,
        **kwargs):
        super(LojbanParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            **kwargs
        )

    @graken()
    def _text_(self):
        with self._group():
            self._intro_null_()

            def block1():
                self._NAI_clause_()
            self._closure(block1)
            self._text_part_2_()
            with self._optional():
                with self._ifnot():
                    self._text_1_()
                self._joik_jek_()
            with self._optional():
                self._text_1_()
            self._faho_clause_()
            with self._optional():
                self._EOF_()
        self.ast['text'] = self.last_node

        self.ast._define(
            ['text'],
            []
        )

    @graken()
    def _intro_null_(self):
        with self._group():
            with self._optional():
                self._spaces_()

            def block1():
                self._su_clause_()
            self._closure(block1)
            self._intro_si_clause_()
        self.ast['intro_null'] = self.last_node

        self.ast._define(
            ['intro_null'],
            []
        )

    @graken()
    def _text_part_2_(self):
        with self._group():
            with self._group():
                with self._choice():
                    with self._option():

                        def block1():
                            self._CMEVLA_clause_()
                        self._positive_closure(block1)
                    with self._option():
                        with self._optional():
                            self._indicators_()
                    self._error('no available options')

            def block3():
                self._free_()
            self._closure(block3)
        self.ast['text_part_2'] = self.last_node

        self.ast._define(
            ['text_part_2'],
            []
        )

    @graken()
    def _intro_si_clause_(self):
        with self._group():
            with self._optional():
                self._si_clause_()

            def block1():
                self._SI_clause_()
            self._closure(block1)
        self.ast['intro_si_clause'] = self.last_node

        self.ast._define(
            ['intro_si_clause'],
            []
        )

    @graken()
    def _faho_clause_(self):
        with self._group():
            with self._optional():
                self._FAhO_clause_()
                self._dot_star_()
        self.ast['faho_clause'] = self.last_node

        self.ast._define(
            ['faho_clause'],
            []
        )

    @graken()
    def _text_1_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._I_clause_()
                        with self._optional():
                            with self._choice():
                                with self._option():
                                    self._jek_()
                                with self._option():
                                    self._joik_()
                                self._error('no available options')
                        with self._optional():
                            with self._optional():
                                self._stag_()
                            self._BO_clause_()

                        def block2():
                            self._free_()
                        self._closure(block2)
                        with self._optional():
                            self._text_1_()
                with self._option():
                    with self._group():

                        def block3():
                            self._NIhO_clause_()
                        self._positive_closure(block3)


                        def block4():
                            self._free_()
                        self._closure(block4)

                        def block5():
                            self._su_clause_()
                        self._closure(block5)
                        with self._optional():
                            self._paragraphs_()
                with self._option():
                    self._paragraphs_()
                self._error('no available options')
        self.ast['text_1'] = self.last_node

        self.ast._define(
            ['text_1'],
            []
        )

    @graken()
    def _paragraphs_(self):
        with self._group():
            self._paragraph_()
            with self._optional():

                def block1():
                    self._NIhO_clause_()
                self._positive_closure(block1)


                def block2():
                    self._free_()
                self._closure(block2)

                def block3():
                    self._su_clause_()
                self._closure(block3)
                self._paragraphs_()
        self.ast['paragraphs'] = self.last_node

        self.ast._define(
            ['paragraphs'],
            []
        )

    @graken()
    def _paragraph_(self):
        with self._group():
            with self._group():
                with self._choice():
                    with self._option():
                        self._statement_()
                    with self._option():
                        self._fragment_()
                    self._error('no available options')

            def block2():
                self._I_clause_()
                with self._ifnot():
                    self._jek_()
                with self._ifnot():
                    self._joik_()
                with self._ifnot():
                    self._joik_jek_()

                def block3():
                    self._free_()
                self._closure(block3)
                with self._optional():
                    with self._choice():
                        with self._option():
                            self._statement_()
                        with self._option():
                            self._fragment_()
                        self._error('no available options')
            self._closure(block2)
        self.ast['paragraph'] = self.last_node

        self.ast._define(
            ['paragraph'],
            []
        )

    @graken()
    def _statement_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._statement_1_()
                with self._option():
                    with self._group():
                        self._prenex_()
                        self._statement_()
                self._error('no available options')
        self.ast['statement'] = self.last_node

        self.ast._define(
            ['statement'],
            []
        )

    @graken()
    def _statement_1_(self):
        with self._group():
            self._statement_2_()

            def block1():
                self._I_clause_()
                self._joik_jek_()
                with self._optional():
                    self._statement_2_()
            self._closure(block1)
        self.ast['statement_1'] = self.last_node

        self.ast._define(
            ['statement_1'],
            []
        )

    @graken()
    def _statement_2_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._statement_3_()
                        with self._optional():
                            self._I_clause_()
                            with self._optional():
                                with self._choice():
                                    with self._option():
                                        self._jek_()
                                    with self._option():
                                        self._joik_()
                                    self._error('no available options')
                            with self._optional():
                                self._stag_()
                            self._BO_clause_()

                            def block2():
                                self._free_()
                            self._closure(block2)
                            self._statement_2_()
                with self._option():
                    with self._group():
                        self._statement_3_()
                        with self._optional():
                            self._I_clause_()
                            with self._optional():
                                with self._choice():
                                    with self._option():
                                        self._jek_()
                                    with self._option():
                                        self._joik_()
                                    self._error('no available options')
                            with self._optional():
                                self._stag_()
                            self._BO_clause_()

                            def block4():
                                self._free_()
                            self._closure(block4)
                self._error('no available options')
        self.ast['statement_2'] = self.last_node

        self.ast._define(
            ['statement_2'],
            []
        )

    @graken()
    def _statement_3_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._sentence_()
                with self._option():
                    with self._group():
                        with self._optional():
                            self._tag_()
                        self._TUhE_clause_()

                        def block1():
                            self._free_()
                        self._closure(block1)
                        self._text_1_()
                        self._TUhU_elidible_()

                        def block2():
                            self._free_()
                        self._closure(block2)
                self._error('no available options')
        self.ast['statement_3'] = self.last_node

        self.ast._define(
            ['statement_3'],
            []
        )

    @graken()
    def _fragment_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._prenex_()
                with self._option():
                    with self._group():
                        self._terms_()
                        self._VAU_elidible_()

                        def block1():
                            self._free_()
                        self._closure(block1)
                with self._option():
                    with self._group():
                        self._ek_()

                        def block2():
                            self._free_()
                        self._closure(block2)
                with self._option():
                    with self._group():
                        self._gihek_()

                        def block3():
                            self._free_()
                        self._closure(block3)
                with self._option():
                    self._quantifier_()
                with self._option():
                    with self._group():
                        self._NA_clause_()
                        with self._ifnot():
                            self._JA_clause_()

                        def block4():
                            self._free_()
                        self._closure(block4)
                with self._option():
                    self._relative_clauses_()
                with self._option():
                    self._links_()
                with self._option():
                    self._linkargs_()
                self._error('no available options')
        self.ast['fragment'] = self.last_node

        self.ast._define(
            ['fragment'],
            []
        )

    @graken()
    def _prenex_(self):
        with self._group():
            self._terms_()
            self._ZOhU_clause_()

            def block1():
                self._free_()
            self._closure(block1)
        self.ast['prenex'] = self.last_node

        self.ast._define(
            ['prenex'],
            []
        )

    @graken()
    def _sentence_(self):
        with self._group():
            with self._optional():
                self._terms_()

                def block1():
                    self._bridi_tail_sa_()
                self._closure(block1)
                self._CU_elidible_()

                def block2():
                    self._free_()
                self._closure(block2)

            def block3():
                self._bridi_tail_sa_()
            self._closure(block3)
            self._bridi_tail_()
        self.ast['sentence'] = self.last_node

        self.ast._define(
            ['sentence'],
            []
        )

    @graken()
    def _sentence_sa_(self):
        with self._group():
            self._sentence_start_()

            def block1():
                with self._ifnot():
                    self._sentence_start_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._sa_word_()
                        with self._option():
                            with self._group():
                                self._SA_clause_()
                                with self._ifnot():
                                    self._sentence_start_()
                        self._error('no available options')
            self._closure(block1)
            self._SA_clause_()
            with self._if():
                self._text_1_()
        self.ast['sentence_sa'] = self.last_node

        self.ast._define(
            ['sentence_sa'],
            []
        )

    @graken()
    def _sentence_start_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._I_pre_()
                with self._option():
                    self._NIhO_pre_()
                self._error('no available options')
        self.ast['sentence_start'] = self.last_node

        self.ast._define(
            ['sentence_start'],
            []
        )

    @graken()
    def _subsentence_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._sentence_()
                with self._option():
                    with self._group():
                        self._prenex_()
                        self._subsentence_()
                self._error('no available options')
        self.ast['subsentence'] = self.last_node

        self.ast._define(
            ['subsentence'],
            []
        )

    @graken()
    def _bridi_tail_(self):
        with self._group():
            self._bridi_tail_1_()
            with self._optional():
                self._gihek_()
                with self._optional():
                    self._stag_()
                self._KE_clause_()

                def block1():
                    self._free_()
                self._closure(block1)
                self._bridi_tail_()
                self._KEhE_elidible_()

                def block2():
                    self._free_()
                self._closure(block2)
                self._tail_terms_()
        self.ast['bridi_tail'] = self.last_node

        self.ast._define(
            ['bridi_tail'],
            []
        )

    @graken()
    def _bridi_tail_sa_(self):
        with self._group():
            self._bridi_tail_start_()

            def block1():
                with self._choice():
                    with self._option():
                        self._term_()
                    with self._option():
                        with self._group():
                            with self._ifnot():
                                self._bridi_tail_start_()
                            with self._group():
                                with self._choice():
                                    with self._option():
                                        self._sa_word_()
                                    with self._option():
                                        with self._group():
                                            self._SA_clause_()
                                            with self._ifnot():
                                                self._bridi_tail_start_()
                                    self._error('no available options')
                    self._error('no available options')
            self._closure(block1)
            self._SA_clause_()
            with self._if():
                self._bridi_tail_()
        self.ast['bridi_tail_sa'] = self.last_node

        self.ast._define(
            ['bridi_tail_sa'],
            []
        )

    @graken()
    def _bridi_tail_start_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._ME_clause_()
                with self._option():
                    self._NUhA_clause_()
                with self._option():
                    self._NU_clause_()
                with self._option():
                    with self._group():
                        self._NA_clause_()
                        with self._ifnot():
                            self._KU_clause_()
                with self._option():
                    with self._group():
                        self._NAhE_clause_()
                        with self._ifnot():
                            self._BO_clause_()
                with self._option():
                    self._selbri_()
                with self._option():
                    with self._group():
                        self._tag_()
                        self._bridi_tail_start_()
                with self._option():
                    with self._group():
                        self._KE_clause_()
                        self._bridi_tail_start_()
                with self._option():
                    self._bridi_tail_()
                self._error('no available options')
        self.ast['bridi_tail_start'] = self.last_node

        self.ast._define(
            ['bridi_tail_start'],
            []
        )

    @graken()
    def _bridi_tail_1_(self):
        with self._group():
            self._bridi_tail_2_()

            def block1():
                self._gihek_()
                with self._ifnot():
                    with self._group():
                        with self._optional():
                            self._stag_()
                        self._BO_clause_()
                with self._ifnot():
                    with self._group():
                        with self._optional():
                            self._stag_()
                        self._KE_clause_()

                def block2():
                    self._free_()
                self._closure(block2)
                self._bridi_tail_2_()
                self._tail_terms_()
            self._closure(block1)
        self.ast['bridi_tail_1'] = self.last_node

        self.ast._define(
            ['bridi_tail_1'],
            []
        )

    @graken()
    def _bridi_tail_2_(self):
        with self._group():
            self._bridi_tail_3_()
            with self._optional():
                self._gihek_()
                with self._optional():
                    self._stag_()
                self._BO_clause_()

                def block1():
                    self._free_()
                self._closure(block1)
                self._bridi_tail_2_()
                self._tail_terms_()
        self.ast['bridi_tail_2'] = self.last_node

        self.ast._define(
            ['bridi_tail_2'],
            []
        )

    @graken()
    def _bridi_tail_3_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._selbri_()
                        self._tail_terms_()
                with self._option():
                    self._gek_sentence_()
                self._error('no available options')
        self.ast['bridi_tail_3'] = self.last_node

        self.ast._define(
            ['bridi_tail_3'],
            []
        )

    @graken()
    def _gek_sentence_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._gek_()
                        self._subsentence_()
                        self._gik_()
                        self._subsentence_()
                        self._tail_terms_()
                with self._option():
                    with self._group():

                        def block1():
                            self._tag_()
                        self._closure(block1)
                        self._KE_clause_()

                        def block2():
                            self._free_()
                        self._closure(block2)
                        self._gek_sentence_()
                        self._KEhE_elidible_()

                        def block3():
                            self._free_()
                        self._closure(block3)
                with self._option():
                    with self._group():
                        self._NA_clause_()

                        def block4():
                            self._free_()
                        self._closure(block4)
                        self._gek_sentence_()
                self._error('no available options')
        self.ast['gek_sentence'] = self.last_node

        self.ast._define(
            ['gek_sentence'],
            []
        )

    @graken()
    def _tail_terms_(self):
        with self._group():
            with self._optional():
                self._nonabs_terms_()
            self._VAU_elidible_()

            def block1():
                self._free_()
            self._closure(block1)
        self.ast['tail_terms'] = self.last_node

        self.ast._define(
            ['tail_terms'],
            []
        )

    @graken()
    def _terms_(self):
        with self._group():

            def block1():
                self._terms_1_()
            self._positive_closure(block1)
        self.ast['terms'] = self.last_node

        self.ast._define(
            ['terms'],
            []
        )

    @graken()
    def _terms_1_(self):
        with self._group():
            self._terms_2_()

            def block1():

                def block2():
                    self._pehe_sa_()
                self._closure(block2)
                self._PEhE_clause_()

                def block3():
                    self._free_()
                self._closure(block3)
                self._joik_jek_()
                self._terms_2_()
            self._closure(block1)
        self.ast['terms_1'] = self.last_node

        self.ast._define(
            ['terms_1'],
            []
        )

    @graken()
    def _terms_2_(self):
        with self._group():
            self._abs_term_()

            def block1():

                def block2():
                    self._cehe_sa_()
                self._closure(block2)
                self._CEhE_clause_()

                def block3():
                    self._free_()
                self._closure(block3)
                self._abs_term_()
            self._closure(block1)
        self.ast['terms_2'] = self.last_node

        self.ast._define(
            ['terms_2'],
            []
        )

    @graken()
    def _nonabs_terms_(self):
        with self._group():

            def block1():
                self._nonabs_terms_1_()
            self._positive_closure(block1)
        self.ast['nonabs_terms'] = self.last_node

        self.ast._define(
            ['nonabs_terms'],
            []
        )

    @graken()
    def _nonabs_terms_1_(self):
        with self._group():
            self._nonabs_terms_2_()

            def block1():

                def block2():
                    self._pehe_sa_()
                self._closure(block2)
                self._PEhE_clause_()

                def block3():
                    self._free_()
                self._closure(block3)
                self._joik_jek_()
                self._nonabs_terms_2_()
            self._closure(block1)
        self.ast['nonabs_terms_1'] = self.last_node

        self.ast._define(
            ['nonabs_terms_1'],
            []
        )

    @graken()
    def _nonabs_terms_2_(self):
        with self._group():
            self._term_()

            def block1():

                def block2():
                    self._cehe_sa_()
                self._closure(block2)
                self._CEhE_clause_()

                def block3():
                    self._free_()
                self._closure(block3)
                self._term_()
            self._closure(block1)
        self.ast['nonabs_terms_2'] = self.last_node

        self.ast._define(
            ['nonabs_terms_2'],
            []
        )

    @graken()
    def _pehe_sa_(self):
        with self._group():
            self._PEhE_clause_()

            def block1():
                with self._ifnot():
                    self._PEhE_clause_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._sa_word_()
                        with self._option():
                            with self._group():
                                self._SA_clause_()
                                with self._ifnot():
                                    self._PEhE_clause_()
                        self._error('no available options')
            self._closure(block1)
            self._SA_clause_()
        self.ast['pehe_sa'] = self.last_node

        self.ast._define(
            ['pehe_sa'],
            []
        )

    @graken()
    def _cehe_sa_(self):
        with self._group():
            self._CEhE_clause_()

            def block1():
                with self._ifnot():
                    self._CEhE_clause_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._sa_word_()
                        with self._option():
                            with self._group():
                                self._SA_clause_()
                                with self._ifnot():
                                    self._CEhE_clause_()
                        self._error('no available options')
            self._closure(block1)
            self._SA_clause_()
        self.ast['cehe_sa'] = self.last_node

        self.ast._define(
            ['cehe_sa'],
            []
        )

    @graken()
    def _term_(self):
        with self._group():

            def block1():
                self._term_sa_()
            self._closure(block1)
            self._term_1_()
        self.ast['term'] = self.last_node

        self.ast._define(
            ['term'],
            []
        )

    @graken()
    def _term_1_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._sumti_()
                with self._option():
                    with self._group():
                        with self._ifnot():
                            self._gek_()
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._tag_()
                                with self._option():
                                    with self._group():
                                        self._FA_clause_()

                                        def block1():
                                            self._free_()
                                        self._closure(block1)
                                self._error('no available options')
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._sumti_()
                                with self._option():
                                    with self._group():
                                        self._KU_elidible_()

                                        def block3():
                                            self._free_()
                                        self._closure(block3)
                                self._error('no available options')
                with self._option():
                    self._nonabs_termset_()
                with self._option():
                    with self._group():
                        self._NA_clause_()
                        self._KU_clause_()

                        def block5():
                            self._free_()
                        self._closure(block5)
                self._error('no available options')
        self.ast['term_1'] = self.last_node

        self.ast._define(
            ['term_1'],
            []
        )

    @graken()
    def _abs_term_(self):
        with self._group():

            def block1():
                self._term_sa_()
            self._closure(block1)
            self._abs_term_1_()
        self.ast['abs_term'] = self.last_node

        self.ast._define(
            ['abs_term'],
            []
        )

    @graken()
    def _abs_term_1_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._sumti_()
                with self._option():
                    self._abs_tag_term_()
                with self._option():
                    self._termset_()
                with self._option():
                    with self._group():
                        self._NA_clause_()
                        self._KU_clause_()

                        def block1():
                            self._free_()
                        self._closure(block1)
                self._error('no available options')
        self.ast['abs_term_1'] = self.last_node

        self.ast._define(
            ['abs_term_1'],
            []
        )

    @graken()
    def _abs_tag_term_(self):
        with self._group():
            with self._ifnot():
                self._gek_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._tag_()
                            with self._ifnot():
                                self._selbri_()
                            with self._ifnot():
                                self._gek_sentence_()
                    with self._option():
                        with self._group():
                            self._FA_clause_()

                            def block1():
                                self._free_()
                            self._closure(block1)
                    self._error('no available options')
            with self._group():
                with self._choice():
                    with self._option():
                        self._sumti_()
                    with self._option():
                        with self._group():
                            self._KU_elidible_()

                            def block3():
                                self._free_()
                            self._closure(block3)
                    self._error('no available options')
        self.ast['abs_tag_term'] = self.last_node

        self.ast._define(
            ['abs_tag_term'],
            []
        )

    @graken()
    def _term_sa_(self):
        with self._group():
            self._term_start_()

            def block1():
                with self._ifnot():
                    self._term_start_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._sa_word_()
                        with self._option():
                            with self._group():
                                self._SA_clause_()
                                with self._ifnot():
                                    self._term_start_()
                        self._error('no available options')
            self._closure(block1)
            self._SA_clause_()
            with self._if():
                self._term_1_()
        self.ast['term_sa'] = self.last_node

        self.ast._define(
            ['term_sa'],
            []
        )

    @graken()
    def _term_start_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._term_1_()
                with self._option():
                    self._LA_clause_()
                with self._option():
                    self._LE_clause_()
                with self._option():
                    self._LI_clause_()
                with self._option():
                    self._LU_clause_()
                with self._option():
                    self._LAhE_clause_()
                with self._option():
                    with self._group():
                        self._quantifier_()
                        self._term_start_()
                with self._option():
                    with self._group():
                        self._gek_()
                        self._sumti_()
                        self._gik_()
                with self._option():
                    self._FA_clause_()
                with self._option():
                    with self._group():
                        self._tag_()
                        self._term_start_()
                self._error('no available options')
        self.ast['term_start'] = self.last_node

        self.ast._define(
            ['term_start'],
            []
        )

    @graken()
    def _termset_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._gek_termset_()
                with self._option():
                    with self._group():
                        self._NUhI_clause_()

                        def block1():
                            self._free_()
                        self._closure(block1)
                        self._gek_()
                        self._terms_()
                        self._NUhU_elidible_()

                        def block2():
                            self._free_()
                        self._closure(block2)
                        self._gik_()
                        self._terms_()
                        self._NUhU_elidible_()

                        def block3():
                            self._free_()
                        self._closure(block3)
                with self._option():
                    with self._group():
                        self._NUhI_clause_()

                        def block4():
                            self._free_()
                        self._closure(block4)
                        self._terms_()
                        self._NUhU_elidible_()

                        def block5():
                            self._free_()
                        self._closure(block5)
                self._error('no available options')
        self.ast['termset'] = self.last_node

        self.ast._define(
            ['termset'],
            []
        )

    @graken()
    def _gek_termset_(self):
        with self._group():
            self._gek_()
            self._terms_gik_terms_()
        self.ast['gek_termset'] = self.last_node

        self.ast._define(
            ['gek_termset'],
            []
        )

    @graken()
    def _terms_gik_terms_(self):
        with self._group():
            self._abs_term_()
            with self._group():
                with self._choice():
                    with self._option():
                        self._gik_()
                    with self._option():
                        self._terms_gik_terms_()
                    self._error('no available options')
            self._abs_term_()
        self.ast['terms_gik_terms'] = self.last_node

        self.ast._define(
            ['terms_gik_terms'],
            []
        )

    @graken()
    def _nonabs_termset_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._nonabs_gek_termset_()
                with self._option():
                    with self._group():
                        self._NUhI_clause_()

                        def block1():
                            self._free_()
                        self._closure(block1)
                        self._gek_()
                        self._terms_()
                        self._NUhU_elidible_()

                        def block2():
                            self._free_()
                        self._closure(block2)
                        self._gik_()
                        self._nonabs_terms_()
                        self._NUhU_elidible_()

                        def block3():
                            self._free_()
                        self._closure(block3)
                with self._option():
                    with self._group():
                        self._NUhI_clause_()

                        def block4():
                            self._free_()
                        self._closure(block4)
                        self._nonabs_terms_()
                        self._NUhU_elidible_()

                        def block5():
                            self._free_()
                        self._closure(block5)
                self._error('no available options')
        self.ast['nonabs_termset'] = self.last_node

        self.ast._define(
            ['nonabs_termset'],
            []
        )

    @graken()
    def _nonabs_gek_termset_(self):
        with self._group():
            self._gek_()
            self._nonabs_terms_gik_terms_()
        self.ast['nonabs_gek_termset'] = self.last_node

        self.ast._define(
            ['nonabs_gek_termset'],
            []
        )

    @graken()
    def _nonabs_terms_gik_terms_(self):
        with self._group():
            self._term_()
            with self._group():
                with self._choice():
                    with self._option():
                        self._gik_()
                    with self._option():
                        self._nonabs_terms_gik_terms_()
                    self._error('no available options')
            self._term_()
        self.ast['nonabs_terms_gik_terms'] = self.last_node

        self.ast._define(
            ['nonabs_terms_gik_terms'],
            []
        )

    @graken()
    def _sumti_(self):
        with self._group():
            self._sumti_1_()
            with self._optional():
                self._VUhO_clause_()

                def block1():
                    self._free_()
                self._closure(block1)
                self._relative_clauses_()
        self.ast['sumti'] = self.last_node

        self.ast._define(
            ['sumti'],
            []
        )

    @graken()
    def _sumti_1_(self):
        with self._group():
            self._sumti_2_()
            with self._optional():
                self._joik_ek_()
                with self._optional():
                    self._stag_()
                self._KE_clause_()

                def block1():
                    self._free_()
                self._closure(block1)
                self._sumti_()
                self._KEhE_elidible_()

                def block2():
                    self._free_()
                self._closure(block2)
        self.ast['sumti_1'] = self.last_node

        self.ast._define(
            ['sumti_1'],
            []
        )

    @graken()
    def _sumti_2_(self):
        with self._group():
            self._sumti_3_()

            def block1():
                self._joik_ek_()
                self._sumti_3_()
            self._closure(block1)
        self.ast['sumti_2'] = self.last_node

        self.ast._define(
            ['sumti_2'],
            []
        )

    @graken()
    def _sumti_3_(self):
        with self._group():
            self._sumti_4_()
            with self._optional():
                self._joik_ek_()
                with self._optional():
                    self._stag_()
                self._BO_clause_()

                def block1():
                    self._free_()
                self._closure(block1)
                self._sumti_3_()
        self.ast['sumti_3'] = self.last_node

        self.ast._define(
            ['sumti_3'],
            []
        )

    @graken()
    def _sumti_4_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._sumti_5_()
                with self._option():
                    with self._group():
                        self._gek_()
                        self._sumti_()
                        self._gik_()
                        self._sumti_4_()
                self._error('no available options')
        self.ast['sumti_4'] = self.last_node

        self.ast._define(
            ['sumti_4'],
            []
        )

    @graken()
    def _sumti_5_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        with self._optional():
                            self._quantifier_()
                        self._sumti_6_()
                        with self._optional():
                            self._relative_clauses_()
                with self._option():
                    with self._group():
                        self._quantifier_()
                        self._selbri_()
                        self._KU_elidible_()

                        def block1():
                            self._free_()
                        self._closure(block1)
                        with self._optional():
                            self._relative_clauses_()
                self._error('no available options')
        self.ast['sumti_5'] = self.last_node

        self.ast._define(
            ['sumti_5'],
            []
        )

    @graken()
    def _sumti_6_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._ZO_clause_()

                        def block1():
                            self._free_()
                        self._closure(block1)
                with self._option():
                    with self._group():
                        self._ZOI_clause_()

                        def block2():
                            self._free_()
                        self._closure(block2)
                with self._option():
                    with self._group():
                        self._LOhU_clause_()

                        def block3():
                            self._free_()
                        self._closure(block3)
                with self._option():
                    with self._group():
                        self._lerfu_string_()
                        with self._ifnot():
                            self._MOI_clause_()
                        self._BOI_elidible_()

                        def block4():
                            self._free_()
                        self._closure(block4)
                with self._option():
                    with self._group():
                        self._LU_clause_()
                        self._text_()
                        self._LIhU_elidible_()

                        def block5():
                            self._free_()
                        self._closure(block5)
                with self._option():
                    with self._group():
                        with self._group():
                            with self._choice():
                                with self._option():
                                    with self._group():
                                        self._LAhE_clause_()

                                        def block6():
                                            self._free_()
                                        self._closure(block6)
                                with self._option():
                                    with self._group():
                                        self._NAhE_clause_()
                                        self._BO_clause_()

                                        def block7():
                                            self._free_()
                                        self._closure(block7)
                                self._error('no available options')
                        with self._optional():
                            self._relative_clauses_()
                        self._sumti_()
                        self._LUhU_elidible_()

                        def block9():
                            self._free_()
                        self._closure(block9)
                with self._option():
                    with self._group():
                        self._KOhA_clause_()

                        def block10():
                            self._free_()
                        self._closure(block10)
                with self._option():
                    with self._group():
                        self._LA_clause_()

                        def block11():
                            self._free_()
                        self._closure(block11)
                        with self._optional():
                            self._relative_clauses_()

                        def block12():
                            self._CMEVLA_clause_()
                        self._positive_closure(block12)


                        def block13():
                            self._free_()
                        self._closure(block13)
                with self._option():
                    with self._group():
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._LA_clause_()
                                with self._option():
                                    self._LE_clause_()
                                self._error('no available options')

                        def block15():
                            self._free_()
                        self._closure(block15)
                        self._sumti_tail_()
                        self._KU_elidible_()

                        def block16():
                            self._free_()
                        self._closure(block16)
                with self._option():
                    self._li_clause_()
                self._error('no available options')
        self.ast['sumti_6'] = self.last_node

        self.ast._define(
            ['sumti_6'],
            []
        )

    @graken()
    def _li_clause_(self):
        with self._group():
            self._LI_clause_()

            def block1():
                self._free_()
            self._closure(block1)
            self._mex_()
            self._LOhO_elidible_()

            def block2():
                self._free_()
            self._closure(block2)
        self.ast['li_clause'] = self.last_node

        self.ast._define(
            ['li_clause'],
            []
        )

    @graken()
    def _sumti_tail_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        with self._optional():
                            self._sumti_6_()
                            with self._optional():
                                self._relative_clauses_()
                        self._sumti_tail_1_()
                with self._option():
                    with self._group():
                        self._relative_clauses_()
                        self._sumti_tail_1_()
                self._error('no available options')
        self.ast['sumti_tail'] = self.last_node

        self.ast._define(
            ['sumti_tail'],
            []
        )

    @graken()
    def _sumti_tail_1_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._selbri_()
                        with self._optional():
                            self._relative_clauses_()
                with self._option():
                    with self._group():
                        self._quantifier_()
                        self._selbri_()
                        with self._optional():
                            self._relative_clauses_()
                with self._option():
                    with self._group():
                        self._quantifier_()
                        self._sumti_()
                self._error('no available options')
        self.ast['sumti_tail_1'] = self.last_node

        self.ast._define(
            ['sumti_tail_1'],
            []
        )

    @graken()
    def _relative_clauses_(self):
        with self._group():
            self._relative_clause_()

            def block1():
                self._ZIhE_clause_()

                def block2():
                    self._free_()
                self._closure(block2)
                self._relative_clause_()
            self._closure(block1)
        self.ast['relative_clauses'] = self.last_node

        self.ast._define(
            ['relative_clauses'],
            []
        )

    @graken()
    def _relative_clause_(self):
        with self._group():

            def block1():
                self._relative_clause_sa_()
            self._closure(block1)
            self._relative_clause_1_()
        self.ast['relative_clause'] = self.last_node

        self.ast._define(
            ['relative_clause'],
            []
        )

    @graken()
    def _relative_clause_sa_(self):
        with self._group():
            self._relative_clause_start_()

            def block1():
                with self._ifnot():
                    self._relative_clause_start_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._sa_word_()
                        with self._option():
                            with self._group():
                                self._SA_clause_()
                                with self._ifnot():
                                    self._relative_clause_start_()
                        self._error('no available options')
            self._closure(block1)
            self._SA_clause_()
            with self._if():
                self._relative_clause_1_()
        self.ast['relative_clause_sa'] = self.last_node

        self.ast._define(
            ['relative_clause_sa'],
            []
        )

    @graken()
    def _relative_clause_1_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._GOI_clause_()

                        def block1():
                            self._free_()
                        self._closure(block1)
                        self._term_()
                        self._GEhU_elidible_()

                        def block2():
                            self._free_()
                        self._closure(block2)
                with self._option():
                    with self._group():
                        self._NOI_clause_()

                        def block3():
                            self._free_()
                        self._closure(block3)
                        self._subsentence_()
                        self._KUhO_elidible_()

                        def block4():
                            self._free_()
                        self._closure(block4)
                self._error('no available options')
        self.ast['relative_clause_1'] = self.last_node

        self.ast._define(
            ['relative_clause_1'],
            []
        )

    @graken()
    def _relative_clause_start_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._GOI_clause_()
                with self._option():
                    self._NOI_clause_()
                self._error('no available options')
        self.ast['relative_clause_start'] = self.last_node

        self.ast._define(
            ['relative_clause_start'],
            []
        )

    @graken()
    def _selbri_(self):
        with self._group():
            with self._optional():
                self._tag_()
            self._selbri_1_()
        self.ast['selbri'] = self.last_node

        self.ast._define(
            ['selbri'],
            []
        )

    @graken()
    def _selbri_1_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._selbri_2_()
                with self._option():
                    with self._group():
                        self._NA_clause_()

                        def block1():
                            self._free_()
                        self._closure(block1)
                        self._selbri_()
                self._error('no available options')
        self.ast['selbri_1'] = self.last_node

        self.ast._define(
            ['selbri_1'],
            []
        )

    @graken()
    def _selbri_2_(self):
        with self._group():
            self._selbri_3_()
            with self._optional():
                self._CO_clause_()

                def block1():
                    self._free_()
                self._closure(block1)
                self._selbri_2_()
        self.ast['selbri_2'] = self.last_node

        self.ast._define(
            ['selbri_2'],
            []
        )

    @graken()
    def _selbri_3_(self):
        with self._group():

            def block1():
                self._selbri_4_()
            self._positive_closure(block1)
        self.ast['selbri_3'] = self.last_node

        self.ast._define(
            ['selbri_3'],
            []
        )

    @graken()
    def _selbri_4_(self):
        with self._group():
            self._selbri_5_()

            def block1():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._joik_jek_()
                            self._selbri_5_()
                    with self._option():

                        def block2():
                            self._joik_()
                            with self._optional():
                                self._stag_()
                            self._KE_clause_()

                            def block3():
                                self._free_()
                            self._closure(block3)
                            self._selbri_3_()
                            self._KEhE_elidible_()

                            def block4():
                                self._free_()
                            self._closure(block4)
                        self._closure(block2)
                    self._error('no available options')
            self._closure(block1)
        self.ast['selbri_4'] = self.last_node

        self.ast._define(
            ['selbri_4'],
            []
        )

    @graken()
    def _selbri_5_(self):
        with self._group():
            self._selbri_6_()
            with self._optional():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._jek_()
                        with self._option():
                            self._joik_()
                        self._error('no available options')
                with self._optional():
                    self._stag_()
                self._BO_clause_()

                def block2():
                    self._free_()
                self._closure(block2)
                self._selbri_5_()
        self.ast['selbri_5'] = self.last_node

        self.ast._define(
            ['selbri_5'],
            []
        )

    @graken()
    def _selbri_6_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._tanru_unit_()
                        with self._optional():
                            self._BO_clause_()

                            def block1():
                                self._free_()
                            self._closure(block1)
                            self._selbri_6_()
                with self._option():
                    with self._group():
                        with self._optional():
                            self._NAhE_clause_()

                        def block2():
                            self._free_()
                        self._closure(block2)
                        self._guhek_()
                        self._selbri_()
                        self._gik_()
                        self._selbri_6_()
                self._error('no available options')
        self.ast['selbri_6'] = self.last_node

        self.ast._define(
            ['selbri_6'],
            []
        )

    @graken()
    def _tanru_unit_(self):
        with self._group():
            self._tanru_unit_1_()

            def block1():
                self._CEI_clause_()

                def block2():
                    self._free_()
                self._closure(block2)
                self._tanru_unit_1_()
            self._closure(block1)
        self.ast['tanru_unit'] = self.last_node

        self.ast._define(
            ['tanru_unit'],
            []
        )

    @graken()
    def _tanru_unit_1_(self):
        with self._group():
            self._tanru_unit_2_()
            with self._optional():
                self._linkargs_()
        self.ast['tanru_unit_1'] = self.last_node

        self.ast._define(
            ['tanru_unit_1'],
            []
        )

    @graken()
    def _tanru_unit_2_(self):
        with self._group():
            with self._choice():
                with self._option():

                    def block1():
                        self._BRIVLA_clause_()

                        def block2():
                            self._free_()
                        self._closure(block2)
                    self._closure(block1)
                with self._option():
                    with self._group():
                        self._GOhA_clause_()
                        with self._optional():
                            self._RAhO_clause_()

                        def block3():
                            self._free_()
                        self._closure(block3)
                with self._option():
                    with self._group():
                        self._KE_clause_()

                        def block4():
                            self._free_()
                        self._closure(block4)
                        self._selbri_3_()
                        self._KEhE_elidible_()

                        def block5():
                            self._free_()
                        self._closure(block5)
                with self._option():
                    with self._group():
                        self._ME_clause_()

                        def block6():
                            self._free_()
                        self._closure(block6)
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._sumti_()
                                with self._option():
                                    self._lerfu_string_()
                                self._error('no available options')
                        self._MEhU_elidible_()

                        def block8():
                            self._free_()
                        self._closure(block8)
                        with self._optional():
                            self._MOI_clause_()

                        def block9():
                            self._free_()
                        self._closure(block9)
                with self._option():
                    with self._group():
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._number_()
                                with self._option():
                                    self._lerfu_string_()
                                self._error('no available options')
                        self._MOI_clause_()

                        def block11():
                            self._free_()
                        self._closure(block11)
                with self._option():
                    with self._group():
                        self._NUhA_clause_()

                        def block12():
                            self._free_()
                        self._closure(block12)
                        self._mex_operator_()
                with self._option():
                    with self._group():
                        self._SE_clause_()

                        def block13():
                            self._free_()
                        self._closure(block13)
                        self._tanru_unit_2_()
                with self._option():
                    with self._group():
                        self._JAI_clause_()

                        def block14():
                            self._free_()
                        self._closure(block14)
                        with self._optional():
                            self._tag_()
                        self._tanru_unit_2_()
                with self._option():
                    with self._group():
                        self._NAhE_clause_()

                        def block15():
                            self._free_()
                        self._closure(block15)
                        self._tanru_unit_2_()
                with self._option():
                    with self._group():
                        self._NU_clause_()
                        with self._optional():
                            self._NAI_clause_()

                        def block16():
                            self._free_()
                        self._closure(block16)

                        def block17():
                            self._joik_jek_()
                            self._NU_clause_()
                            with self._optional():
                                self._NAI_clause_()

                            def block18():
                                self._free_()
                            self._closure(block18)
                        self._closure(block17)
                        self._subsentence_()
                        self._KEI_elidible_()

                        def block19():
                            self._free_()
                        self._closure(block19)
                self._error('no available options')
        self.ast['tanru_unit_2'] = self.last_node

        self.ast._define(
            ['tanru_unit_2'],
            []
        )

    @graken()
    def _linkargs_(self):
        with self._group():

            def block1():
                self._linkargs_sa_()
            self._closure(block1)
            self._linkargs_1_()
        self.ast['linkargs'] = self.last_node

        self.ast._define(
            ['linkargs'],
            []
        )

    @graken()
    def _linkargs_1_(self):
        with self._group():
            self._BE_clause_()

            def block1():
                self._free_()
            self._closure(block1)
            self._term_()
            with self._optional():
                self._links_()
            self._BEhO_elidible_()

            def block2():
                self._free_()
            self._closure(block2)
        self.ast['linkargs_1'] = self.last_node

        self.ast._define(
            ['linkargs_1'],
            []
        )

    @graken()
    def _linkargs_sa_(self):
        with self._group():
            self._linkargs_start_()

            def block1():
                with self._ifnot():
                    self._linkargs_start_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._sa_word_()
                        with self._option():
                            with self._group():
                                self._SA_clause_()
                                with self._ifnot():
                                    self._linkargs_start_()
                        self._error('no available options')
            self._closure(block1)
            self._SA_clause_()
            with self._if():
                self._linkargs_1_()
        self.ast['linkargs_sa'] = self.last_node

        self.ast._define(
            ['linkargs_sa'],
            []
        )

    @graken()
    def _linkargs_start_(self):
        with self._group():
            with self._if():
                self._BE_clause_()
            self._BE_clause_()
        self.ast['linkargs_start'] = self.last_node

        self.ast._define(
            ['linkargs_start'],
            []
        )

    @graken()
    def _links_(self):
        with self._group():

            def block1():
                self._links_sa_()
            self._closure(block1)
            self._links_1_()
        self.ast['links'] = self.last_node

        self.ast._define(
            ['links'],
            []
        )

    @graken()
    def _links_1_(self):
        with self._group():
            self._BEI_clause_()

            def block1():
                self._free_()
            self._closure(block1)
            self._term_()
            with self._optional():
                self._links_()
        self.ast['links_1'] = self.last_node

        self.ast._define(
            ['links_1'],
            []
        )

    @graken()
    def _links_sa_(self):
        with self._group():
            self._links_start_()

            def block1():
                with self._ifnot():
                    self._links_start_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._sa_word_()
                        with self._option():
                            with self._group():
                                self._SA_clause_()
                                with self._ifnot():
                                    self._links_start_()
                        self._error('no available options')
            self._closure(block1)
            self._SA_clause_()
            with self._if():
                self._links_1_()
        self.ast['links_sa'] = self.last_node

        self.ast._define(
            ['links_sa'],
            []
        )

    @graken()
    def _links_start_(self):
        with self._group():
            with self._if():
                self._BEI_clause_()
            self._BEI_clause_()
        self.ast['links_start'] = self.last_node

        self.ast._define(
            ['links_start'],
            []
        )

    @graken()
    def _quantifier_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._number_()
                        with self._ifnot():
                            self._MOI_clause_()
                        self._BOI_elidible_()

                        def block1():
                            self._free_()
                        self._closure(block1)
                with self._option():
                    with self._group():
                        self._VEI_clause_()

                        def block2():
                            self._free_()
                        self._closure(block2)
                        self._mex_()
                        self._VEhO_elidible_()

                        def block3():
                            self._free_()
                        self._closure(block3)
                self._error('no available options')
        self.ast['quantifier'] = self.last_node

        self.ast._define(
            ['quantifier'],
            []
        )

    @graken()
    def _mex_(self):
        with self._group():

            def block1():
                self._mex_sa_()
            self._closure(block1)
            self._mex_0_()
        self.ast['mex'] = self.last_node

        self.ast._define(
            ['mex'],
            []
        )

    @graken()
    def _mex_0_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._mex_1_()

                        def block1():
                            self._operator_()
                            self._mex_1_()
                        self._closure(block1)
                with self._option():
                    self._rp_clause_()
                self._error('no available options')
        self.ast['mex_0'] = self.last_node

        self.ast._define(
            ['mex_0'],
            []
        )

    @graken()
    def _mex_sa_(self):
        with self._group():
            self._mex_start_()

            def block1():
                with self._ifnot():
                    self._mex_start_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._sa_word_()
                        with self._option():
                            with self._group():
                                self._SA_clause_()
                                with self._ifnot():
                                    self._mex_start_()
                        self._error('no available options')
            self._closure(block1)
            self._SA_clause_()
            with self._if():
                self._mex_0_()
        self.ast['mex_sa'] = self.last_node

        self.ast._define(
            ['mex_sa'],
            []
        )

    @graken()
    def _mex_start_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._FUhA_clause_()
                with self._option():
                    self._PEhO_clause_()
                with self._option():
                    self._operand_start_()
                self._error('no available options')
        self.ast['mex_start'] = self.last_node

        self.ast._define(
            ['mex_start'],
            []
        )

    @graken()
    def _rp_clause_(self):
        with self._group():
            self._FUhA_clause_()

            def block1():
                self._free_()
            self._closure(block1)
            self._rp_expression_()
        self.ast['rp_clause'] = self.last_node

        self.ast._define(
            ['rp_clause'],
            []
        )

    @graken()
    def _mex_1_(self):
        with self._group():
            self._mex_2_()
            with self._optional():
                self._BIhE_clause_()

                def block1():
                    self._free_()
                self._closure(block1)
                self._operator_()
                self._mex_1_()
        self.ast['mex_1'] = self.last_node

        self.ast._define(
            ['mex_1'],
            []
        )

    @graken()
    def _mex_2_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._operand_()
                with self._option():
                    self._mex_forethought_()
                self._error('no available options')
        self.ast['mex_2'] = self.last_node

        self.ast._define(
            ['mex_2'],
            []
        )

    @graken()
    def _mex_forethought_(self):
        with self._group():
            with self._optional():
                self._PEhO_clause_()

            def block1():
                self._free_()
            self._closure(block1)
            self._operator_()
            self._fore_operands_()
            self._KUhE_elidible_()

            def block2():
                self._free_()
            self._closure(block2)
        self.ast['mex_forethought'] = self.last_node

        self.ast._define(
            ['mex_forethought'],
            []
        )

    @graken()
    def _fore_operands_(self):
        with self._group():

            def block1():
                self._mex_2_()
            self._positive_closure(block1)
        self.ast['fore_operands'] = self.last_node

        self.ast._define(
            ['fore_operands'],
            []
        )

    @graken()
    def _rp_expression_(self):
        with self._group():
            self._operand_()
            self._rp_expression_tail_()
        self.ast['rp_expression'] = self.last_node

        self.ast._define(
            ['rp_expression'],
            []
        )

    @graken()
    def _rp_expression_tail_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._rp_expression_()
                        self._operator_()
                        self._rp_expression_tail_()
                with self._option():
                    pass
                self._error('no available options')
        self.ast['rp_expression_tail'] = self.last_node

        self.ast._define(
            ['rp_expression_tail'],
            []
        )

    @graken()
    def _operator_(self):
        with self._group():

            def block1():
                self._operator_sa_()
            self._closure(block1)
            self._operator_0_()
        self.ast['operator'] = self.last_node

        self.ast._define(
            ['operator'],
            []
        )

    @graken()
    def _operator_0_(self):
        with self._group():
            self._operator_1_()

            def block1():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._joik_jek_()
                            self._operator_1_()
                    with self._option():

                        def block2():
                            self._joik_()
                            with self._optional():
                                self._stag_()
                            self._KE_clause_()

                            def block3():
                                self._free_()
                            self._closure(block3)
                            self._operator_()
                            self._KEhE_elidible_()

                            def block4():
                                self._free_()
                            self._closure(block4)
                        self._closure(block2)
                    self._error('no available options')
            self._closure(block1)
        self.ast['operator_0'] = self.last_node

        self.ast._define(
            ['operator_0'],
            []
        )

    @graken()
    def _operator_sa_(self):
        with self._group():
            self._operator_start_()

            def block1():
                with self._ifnot():
                    self._operator_start_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._sa_word_()
                        with self._option():
                            with self._group():
                                self._SA_clause_()
                                with self._ifnot():
                                    self._operator_start_()
                        self._error('no available options')
            self._closure(block1)
            self._SA_clause_()
            with self._if():
                self._operator_0_()
        self.ast['operator_sa'] = self.last_node

        self.ast._define(
            ['operator_sa'],
            []
        )

    @graken()
    def _operator_start_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._guhek_()
                with self._option():
                    self._KE_clause_()
                with self._option():
                    with self._group():
                        with self._optional():
                            self._SE_clause_()
                        self._NAhE_clause_()
                with self._option():
                    with self._group():
                        with self._optional():
                            self._SE_clause_()
                        self._MAhO_clause_()
                with self._option():
                    with self._group():
                        with self._optional():
                            self._SE_clause_()
                        self._VUhU_clause_()
                self._error('no available options')
        self.ast['operator_start'] = self.last_node

        self.ast._define(
            ['operator_start'],
            []
        )

    @graken()
    def _operator_1_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._operator_2_()
                with self._option():
                    with self._group():
                        self._guhek_()
                        self._operator_1_()
                        self._gik_()
                        self._operator_2_()
                with self._option():
                    with self._group():
                        self._operator_2_()
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._jek_()
                                with self._option():
                                    self._joik_()
                                self._error('no available options')
                        with self._optional():
                            self._stag_()
                        self._BO_clause_()

                        def block2():
                            self._free_()
                        self._closure(block2)
                        self._operator_1_()
                self._error('no available options')
        self.ast['operator_1'] = self.last_node

        self.ast._define(
            ['operator_1'],
            []
        )

    @graken()
    def _operator_2_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._mex_operator_()
                with self._option():
                    with self._group():
                        self._KE_clause_()

                        def block1():
                            self._free_()
                        self._closure(block1)
                        self._operator_()
                        self._KEhE_elidible_()

                        def block2():
                            self._free_()
                        self._closure(block2)
                self._error('no available options')
        self.ast['operator_2'] = self.last_node

        self.ast._define(
            ['operator_2'],
            []
        )

    @graken()
    def _mex_operator_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._SE_clause_()

                        def block1():
                            self._free_()
                        self._closure(block1)
                        self._mex_operator_()
                with self._option():
                    with self._group():
                        self._NAhE_clause_()

                        def block2():
                            self._free_()
                        self._closure(block2)
                        self._mex_operator_()
                with self._option():
                    with self._group():
                        self._MAhO_clause_()

                        def block3():
                            self._free_()
                        self._closure(block3)
                        self._mex_()
                        self._TEhU_elidible_()

                        def block4():
                            self._free_()
                        self._closure(block4)
                with self._option():
                    with self._group():
                        self._NAhU_clause_()

                        def block5():
                            self._free_()
                        self._closure(block5)
                        self._selbri_()
                        self._TEhU_elidible_()

                        def block6():
                            self._free_()
                        self._closure(block6)
                with self._option():
                    with self._group():
                        self._VUhU_clause_()

                        def block7():
                            self._free_()
                        self._closure(block7)
                self._error('no available options')
        self.ast['mex_operator'] = self.last_node

        self.ast._define(
            ['mex_operator'],
            []
        )

    @graken()
    def _operand_(self):
        with self._group():

            def block1():
                self._operand_sa_()
            self._closure(block1)
            self._operand_0_()
        self.ast['operand'] = self.last_node

        self.ast._define(
            ['operand'],
            []
        )

    @graken()
    def _operand_0_(self):
        with self._group():
            self._operand_1_()
            with self._optional():
                self._joik_ek_()
                with self._optional():
                    self._stag_()
                self._KE_clause_()

                def block1():
                    self._free_()
                self._closure(block1)
                self._operand_()
                self._KEhE_elidible_()

                def block2():
                    self._free_()
                self._closure(block2)
        self.ast['operand_0'] = self.last_node

        self.ast._define(
            ['operand_0'],
            []
        )

    @graken()
    def _operand_sa_(self):
        with self._group():
            self._operand_start_()

            def block1():
                with self._ifnot():
                    self._operand_start_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._sa_word_()
                        with self._option():
                            with self._group():
                                self._SA_clause_()
                                with self._ifnot():
                                    self._operand_start_()
                        self._error('no available options')
            self._closure(block1)
            self._SA_clause_()
            with self._if():
                self._operand_0_()
        self.ast['operand_sa'] = self.last_node

        self.ast._define(
            ['operand_sa'],
            []
        )

    @graken()
    def _operand_start_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._quantifier_()
                with self._option():
                    self._lerfu_word_()
                with self._option():
                    self._NIhE_clause_()
                with self._option():
                    self._MOhE_clause_()
                with self._option():
                    self._JOhI_clause_()
                with self._option():
                    self._gek_()
                with self._option():
                    self._LAhE_clause_()
                with self._option():
                    self._NAhE_clause_()
                self._error('no available options')
        self.ast['operand_start'] = self.last_node

        self.ast._define(
            ['operand_start'],
            []
        )

    @graken()
    def _operand_1_(self):
        with self._group():
            self._operand_2_()

            def block1():
                self._joik_ek_()
                self._operand_2_()
            self._closure(block1)
        self.ast['operand_1'] = self.last_node

        self.ast._define(
            ['operand_1'],
            []
        )

    @graken()
    def _operand_2_(self):
        with self._group():
            self._operand_3_()
            with self._optional():
                self._joik_ek_()
                with self._optional():
                    self._stag_()
                self._BO_clause_()

                def block1():
                    self._free_()
                self._closure(block1)
                self._operand_2_()
        self.ast['operand_2'] = self.last_node

        self.ast._define(
            ['operand_2'],
            []
        )

    @graken()
    def _operand_3_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._quantifier_()
                with self._option():
                    with self._group():
                        self._lerfu_string_()
                        with self._ifnot():
                            self._MOI_clause_()
                        self._BOI_elidible_()

                        def block1():
                            self._free_()
                        self._closure(block1)
                with self._option():
                    with self._group():
                        self._NIhE_clause_()

                        def block2():
                            self._free_()
                        self._closure(block2)
                        self._selbri_()
                        self._TEhU_elidible_()

                        def block3():
                            self._free_()
                        self._closure(block3)
                with self._option():
                    with self._group():
                        self._MOhE_clause_()

                        def block4():
                            self._free_()
                        self._closure(block4)
                        self._sumti_()
                        self._TEhU_elidible_()

                        def block5():
                            self._free_()
                        self._closure(block5)
                with self._option():
                    with self._group():
                        self._JOhI_clause_()

                        def block6():
                            self._free_()
                        self._closure(block6)

                        def block7():
                            self._mex_2_()
                        self._positive_closure(block7)

                        self._TEhU_elidible_()

                        def block8():
                            self._free_()
                        self._closure(block8)
                with self._option():
                    with self._group():
                        self._gek_()
                        self._operand_()
                        self._gik_()
                        self._operand_3_()
                with self._option():
                    with self._group():
                        with self._group():
                            with self._choice():
                                with self._option():
                                    with self._group():
                                        self._LAhE_clause_()

                                        def block9():
                                            self._free_()
                                        self._closure(block9)
                                with self._option():
                                    with self._group():
                                        self._NAhE_clause_()
                                        self._BO_clause_()

                                        def block10():
                                            self._free_()
                                        self._closure(block10)
                                self._error('no available options')
                        self._operand_()
                        self._LUhU_elidible_()

                        def block12():
                            self._free_()
                        self._closure(block12)
                self._error('no available options')
        self.ast['operand_3'] = self.last_node

        self.ast._define(
            ['operand_3'],
            []
        )

    @graken()
    def _number_(self):
        with self._group():
            self._PA_clause_()

            def block1():
                with self._choice():
                    with self._option():
                        self._PA_clause_()
                    with self._option():
                        self._lerfu_word_()
                    self._error('no available options')
            self._closure(block1)
        self.ast['number'] = self.last_node

        self.ast._define(
            ['number'],
            []
        )

    @graken()
    def _lerfu_string_(self):
        with self._group():
            self._lerfu_word_()

            def block1():
                with self._choice():
                    with self._option():
                        self._PA_clause_()
                    with self._option():
                        self._lerfu_word_()
                    self._error('no available options')
            self._closure(block1)
        self.ast['lerfu_string'] = self.last_node

        self.ast._define(
            ['lerfu_string'],
            []
        )

    @graken()
    def _lerfu_word_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._BY_clause_()
                with self._option():
                    with self._group():
                        self._LAU_clause_()
                        self._lerfu_word_()
                with self._option():
                    with self._group():
                        self._TEI_clause_()
                        self._lerfu_string_()
                        self._FOI_clause_()
                self._error('no available options')
        self.ast['lerfu_word'] = self.last_node

        self.ast._define(
            ['lerfu_word'],
            []
        )

    @graken()
    def _ek_(self):
        with self._group():
            with self._optional():
                self._NA_clause_()
            with self._optional():
                self._SE_clause_()
            self._A_clause_()
            with self._optional():
                self._NAI_clause_()
        self.ast['ek'] = self.last_node

        self.ast._define(
            ['ek'],
            []
        )

    @graken()
    def _gihek_(self):
        with self._group():

            def block1():
                self._gihek_sa_()
            self._closure(block1)
            self._gihek_1_()
        self.ast['gihek'] = self.last_node

        self.ast._define(
            ['gihek'],
            []
        )

    @graken()
    def _gihek_1_(self):
        with self._group():
            with self._optional():
                self._NA_clause_()
            with self._optional():
                self._SE_clause_()
            self._GIhA_clause_()
            with self._optional():
                self._NAI_clause_()
        self.ast['gihek_1'] = self.last_node

        self.ast._define(
            ['gihek_1'],
            []
        )

    @graken()
    def _gihek_sa_(self):
        with self._group():
            self._gihek_1_()

            def block1():
                with self._ifnot():
                    self._gihek_1_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._sa_word_()
                        with self._option():
                            with self._group():
                                self._SA_clause_()
                                with self._ifnot():
                                    self._gihek_1_()
                        self._error('no available options')
            self._closure(block1)
            self._SA_clause_()
            with self._if():
                self._gihek_()
        self.ast['gihek_sa'] = self.last_node

        self.ast._define(
            ['gihek_sa'],
            []
        )

    @graken()
    def _jek_(self):
        with self._group():
            with self._optional():
                self._NA_clause_()
            with self._optional():
                self._SE_clause_()
            self._JA_clause_()
            with self._optional():
                self._NAI_clause_()
        self.ast['jek'] = self.last_node

        self.ast._define(
            ['jek'],
            []
        )

    @graken()
    def _joik_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        with self._optional():
                            self._SE_clause_()
                        self._JOI_clause_()
                        with self._optional():
                            self._NAI_clause_()
                with self._option():
                    self._interval_()
                with self._option():
                    with self._group():
                        self._GAhO_clause_()
                        self._interval_()
                        self._GAhO_clause_()
                self._error('no available options')
        self.ast['joik'] = self.last_node

        self.ast._define(
            ['joik'],
            []
        )

    @graken()
    def _interval_(self):
        with self._group():
            with self._optional():
                self._SE_clause_()
            self._BIhI_clause_()
            with self._optional():
                self._NAI_clause_()
        self.ast['interval'] = self.last_node

        self.ast._define(
            ['interval'],
            []
        )

    @graken()
    def _joik_ek_(self):
        with self._group():

            def block1():
                self._joik_ek_sa_()
            self._closure(block1)
            self._joik_ek_1_()
        self.ast['joik_ek'] = self.last_node

        self.ast._define(
            ['joik_ek'],
            []
        )

    @graken()
    def _joik_ek_1_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._joik_()

                        def block1():
                            self._free_()
                        self._closure(block1)
                with self._option():
                    with self._group():
                        self._ek_()

                        def block2():
                            self._free_()
                        self._closure(block2)
                self._error('no available options')
        self.ast['joik_ek_1'] = self.last_node

        self.ast._define(
            ['joik_ek_1'],
            []
        )

    @graken()
    def _joik_ek_sa_(self):
        with self._group():
            self._joik_ek_1_()

            def block1():
                with self._ifnot():
                    self._joik_ek_1_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._sa_word_()
                        with self._option():
                            with self._group():
                                self._SA_clause_()
                                with self._ifnot():
                                    self._joik_ek_1_()
                        self._error('no available options')
            self._closure(block1)
            self._SA_clause_()
            with self._if():
                self._joik_ek_()
        self.ast['joik_ek_sa'] = self.last_node

        self.ast._define(
            ['joik_ek_sa'],
            []
        )

    @graken()
    def _joik_jek_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._joik_()

                        def block1():
                            self._free_()
                        self._closure(block1)
                with self._option():
                    with self._group():
                        self._jek_()

                        def block2():
                            self._free_()
                        self._closure(block2)
                self._error('no available options')
        self.ast['joik_jek'] = self.last_node

        self.ast._define(
            ['joik_jek'],
            []
        )

    @graken()
    def _gek_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        with self._optional():
                            self._SE_clause_()
                        self._GA_clause_()
                        with self._optional():
                            self._NAI_clause_()

                        def block1():
                            self._free_()
                        self._closure(block1)
                with self._option():
                    with self._group():
                        self._joik_()
                        self._GI_clause_()

                        def block2():
                            self._free_()
                        self._closure(block2)
                with self._option():
                    with self._group():
                        self._stag_()
                        self._gik_()
                self._error('no available options')
        self.ast['gek'] = self.last_node

        self.ast._define(
            ['gek'],
            []
        )

    @graken()
    def _guhek_(self):
        with self._group():
            with self._optional():
                self._SE_clause_()
            self._GUhA_clause_()
            with self._optional():
                self._NAI_clause_()

            def block1():
                self._free_()
            self._closure(block1)
        self.ast['guhek'] = self.last_node

        self.ast._define(
            ['guhek'],
            []
        )

    @graken()
    def _gik_(self):
        with self._group():
            self._GI_clause_()
            with self._optional():
                self._NAI_clause_()

            def block1():
                self._free_()
            self._closure(block1)
        self.ast['gik'] = self.last_node

        self.ast._define(
            ['gik'],
            []
        )

    @graken()
    def _tag_(self):
        with self._group():
            self._tense_modal_()

            def block1():
                self._joik_jek_()
                self._tense_modal_()
            self._closure(block1)
        self.ast['tag'] = self.last_node

        self.ast._define(
            ['tag'],
            []
        )

    @graken()
    def _stag_(self):
        with self._group():
            with self._choice():
                with self._option():

                    def block1():
                        self._simple_tense_modal_()

                        def block2():
                            with self._group():
                                with self._choice():
                                    with self._option():
                                        self._jek_()
                                    with self._option():
                                        self._joik_()
                                    self._error('no available options')
                            self._simple_tense_modal_()
                        self._closure(block2)
                    self._closure(block1)
                with self._option():
                    with self._group():
                        self._tense_modal_()

                        def block4():
                            self._joik_jek_()
                            self._tense_modal_()
                        self._closure(block4)
                self._error('no available options')
        self.ast['stag'] = self.last_node

        self.ast._define(
            ['stag'],
            []
        )

    @graken()
    def _tense_modal_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._simple_tense_modal_()

                        def block1():
                            self._free_()
                        self._closure(block1)
                with self._option():
                    with self._group():
                        self._FIhO_clause_()

                        def block2():
                            self._free_()
                        self._closure(block2)
                        self._selbri_()
                        with self._optional():
                            self._FEhU_clause_()

                        def block3():
                            self._free_()
                        self._closure(block3)
                self._error('no available options')
        self.ast['tense_modal'] = self.last_node

        self.ast._define(
            ['tense_modal'],
            []
        )

    @graken()
    def _simple_tense_modal_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        with self._optional():
                            self._NAhE_clause_()
                        with self._optional():
                            self._SE_clause_()
                        self._BAI_clause_()
                        with self._optional():
                            self._NAI_clause_()
                        with self._optional():
                            self._KI_clause_()
                with self._option():
                    with self._group():
                        with self._optional():
                            self._NAhE_clause_()
                        with self._group():
                            with self._choice():
                                with self._option():
                                    with self._group():
                                        with self._group():
                                            with self._choice():
                                                with self._option():
                                                    with self._group():
                                                        self._time_()
                                                        with self._optional():
                                                            self._space_()
                                                with self._option():
                                                    with self._group():
                                                        self._space_()
                                                        with self._optional():
                                                            self._time_()
                                                self._error('no available options')
                                        self._CAhA_clause_()
                                with self._option():
                                    with self._group():
                                        with self._choice():
                                            with self._option():
                                                with self._group():
                                                    self._time_()
                                                    with self._optional():
                                                        self._space_()
                                            with self._option():
                                                with self._group():
                                                    self._space_()
                                                    with self._optional():
                                                        self._time_()
                                            self._error('no available options')
                                with self._option():
                                    self._CAhA_clause_()
                                self._error('no available options')
                        with self._optional():
                            self._KI_clause_()
                with self._option():
                    self._KI_clause_()
                with self._option():
                    self._CUhE_clause_()
                self._error('no available options')
        self.ast['simple_tense_modal'] = self.last_node

        self.ast._define(
            ['simple_tense_modal'],
            []
        )

    @graken()
    def _time_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._ZI_clause_()

                        def block1():
                            self._time_offset_()
                        self._closure(block1)
                        with self._optional():
                            self._ZEhA_clause_()
                            with self._optional():
                                self._PU_clause_()
                                with self._optional():
                                    self._NAI_clause_()

                        def block2():
                            self._interval_property_()
                        self._closure(block2)
                with self._option():
                    with self._group():
                        with self._optional():
                            self._ZI_clause_()

                        def block3():
                            self._time_offset_()
                        self._positive_closure(block3)

                        with self._optional():
                            self._ZEhA_clause_()
                            with self._optional():
                                self._PU_clause_()
                                with self._optional():
                                    self._NAI_clause_()

                        def block4():
                            self._interval_property_()
                        self._closure(block4)
                with self._option():
                    with self._group():
                        with self._optional():
                            self._ZI_clause_()

                        def block5():
                            self._time_offset_()
                        self._closure(block5)
                        self._ZEhA_clause_()
                        with self._optional():
                            self._PU_clause_()
                            with self._optional():
                                self._NAI_clause_()

                        def block6():
                            self._interval_property_()
                        self._closure(block6)
                with self._option():
                    with self._group():
                        with self._optional():
                            self._ZI_clause_()

                        def block7():
                            self._time_offset_()
                        self._closure(block7)
                        with self._optional():
                            self._ZEhA_clause_()
                            with self._optional():
                                self._PU_clause_()
                                with self._optional():
                                    self._NAI_clause_()

                        def block8():
                            self._interval_property_()
                        self._positive_closure(block8)
                self._error('no available options')
        self.ast['time'] = self.last_node

        self.ast._define(
            ['time'],
            []
        )

    @graken()
    def _time_offset_(self):
        with self._group():
            self._PU_clause_()
            with self._optional():
                self._NAI_clause_()
            with self._optional():
                self._ZI_clause_()
        self.ast['time_offset'] = self.last_node

        self.ast._define(
            ['time_offset'],
            []
        )

    @graken()
    def _space_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._VA_clause_()

                        def block1():
                            self._space_offset_()
                        self._closure(block1)
                        with self._optional():
                            self._space_interval_()
                        with self._optional():
                            self._MOhI_clause_()
                            self._space_offset_()
                with self._option():
                    with self._group():
                        with self._optional():
                            self._VA_clause_()

                        def block2():
                            self._space_offset_()
                        self._positive_closure(block2)

                        with self._optional():
                            self._space_interval_()
                        with self._optional():
                            self._MOhI_clause_()
                            self._space_offset_()
                with self._option():
                    with self._group():
                        with self._optional():
                            self._VA_clause_()

                        def block3():
                            self._space_offset_()
                        self._closure(block3)
                        self._space_interval_()
                        with self._optional():
                            self._MOhI_clause_()
                            self._space_offset_()
                with self._option():
                    with self._group():
                        with self._optional():
                            self._VA_clause_()

                        def block4():
                            self._space_offset_()
                        self._closure(block4)
                        with self._optional():
                            self._space_interval_()
                        self._MOhI_clause_()
                        self._space_offset_()
                self._error('no available options')
        self.ast['space'] = self.last_node

        self.ast._define(
            ['space'],
            []
        )

    @graken()
    def _space_offset_(self):
        with self._group():
            self._FAhA_clause_()
            with self._optional():
                self._NAI_clause_()
            with self._optional():
                self._VA_clause_()
        self.ast['space_offset'] = self.last_node

        self.ast._define(
            ['space_offset'],
            []
        )

    @graken()
    def _space_interval_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._VEhA_clause_()
                                with self._option():
                                    self._VIhA_clause_()
                                with self._option():
                                    with self._group():
                                        self._VEhA_clause_()
                                        self._VIhA_clause_()
                                self._error('no available options')
                        with self._optional():
                            self._FAhA_clause_()
                            with self._optional():
                                self._NAI_clause_()
                        self._space_int_props_()
                with self._option():
                    with self._group():
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._VEhA_clause_()
                                with self._option():
                                    self._VIhA_clause_()
                                with self._option():
                                    with self._group():
                                        self._VEhA_clause_()
                                        self._VIhA_clause_()
                                self._error('no available options')
                        with self._optional():
                            self._FAhA_clause_()
                            with self._optional():
                                self._NAI_clause_()
                with self._option():
                    self._space_int_props_()
                self._error('no available options')
        self.ast['space_interval'] = self.last_node

        self.ast._define(
            ['space_interval'],
            []
        )

    @graken()
    def _space_int_props_(self):
        with self._group():

            def block1():
                self._FEhE_clause_()
                self._interval_property_()
            self._positive_closure(block1)
        self.ast['space_int_props'] = self.last_node

        self.ast._define(
            ['space_int_props'],
            []
        )

    @graken()
    def _interval_property_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._number_()
                        self._ROI_clause_()
                        with self._optional():
                            self._NAI_clause_()
                with self._option():
                    with self._group():
                        self._TAhE_clause_()
                        with self._optional():
                            self._NAI_clause_()
                with self._option():
                    with self._group():
                        self._ZAhO_clause_()
                        with self._optional():
                            self._NAI_clause_()
                self._error('no available options')
        self.ast['interval_property'] = self.last_node

        self.ast._define(
            ['interval_property'],
            []
        )

    @graken()
    def _free_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._SEI_clause_()

                        def block1():
                            self._free_()
                        self._closure(block1)
                        with self._optional():
                            self._terms_()
                            self._CU_elidible_()

                            def block2():
                                self._free_()
                            self._closure(block2)
                        self._selbri_()
                        self._SEhU_elidible_()
                with self._option():
                    with self._group():
                        self._SOI_clause_()

                        def block3():
                            self._free_()
                        self._closure(block3)
                        self._sumti_()
                        with self._optional():
                            self._sumti_()
                        self._SEhU_elidible_()
                with self._option():
                    with self._group():
                        self._vocative_()
                        with self._optional():
                            self._relative_clauses_()
                        self._selbri_()
                        with self._optional():
                            self._relative_clauses_()
                        self._DOhU_elidible_()
                with self._option():
                    with self._group():
                        self._vocative_()
                        with self._optional():
                            self._relative_clauses_()

                        def block4():
                            self._CMEVLA_clause_()
                        self._positive_closure(block4)


                        def block5():
                            self._free_()
                        self._closure(block5)
                        with self._optional():
                            self._relative_clauses_()
                        self._DOhU_elidible_()
                with self._option():
                    with self._group():
                        self._vocative_()
                        with self._optional():
                            self._sumti_()
                        self._DOhU_elidible_()
                with self._option():
                    with self._group():
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._number_()
                                with self._option():
                                    self._lerfu_string_()
                                self._error('no available options')
                        self._MAI_clause_()
                with self._option():
                    with self._group():
                        self._TO_clause_()
                        self._text_()
                        self._TOI_elidible_()
                with self._option():
                    self._xi_clause_()
                self._error('no available options')
        self.ast['free'] = self.last_node

        self.ast._define(
            ['free'],
            []
        )

    @graken()
    def _xi_clause_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._XI_clause_()

                        def block1():
                            self._free_()
                        self._closure(block1)
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._number_()
                                with self._option():
                                    self._lerfu_string_()
                                self._error('no available options')
                        self._BOI_elidible_()
                with self._option():
                    with self._group():
                        self._XI_clause_()

                        def block3():
                            self._free_()
                        self._closure(block3)
                        self._VEI_clause_()

                        def block4():
                            self._free_()
                        self._closure(block4)
                        self._mex_()
                        self._VEhO_elidible_()
                self._error('no available options')
        self.ast['xi_clause'] = self.last_node

        self.ast._define(
            ['xi_clause'],
            []
        )

    @graken()
    def _vocative_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():

                        def block1():
                            self._COI_clause_()
                            with self._optional():
                                self._NAI_clause_()
                        self._positive_closure(block1)

                        self._DOI_clause_()
                with self._option():
                    with self._group():
                        with self._group():
                            self._COI_clause_()
                            with self._optional():
                                self._NAI_clause_()

                        def block2():
                            self._COI_clause_()
                            with self._optional():
                                self._NAI_clause_()
                        self._closure(block2)
                with self._option():
                    self._DOI_clause_()
                self._error('no available options')
        self.ast['vocative'] = self.last_node

        self.ast._define(
            ['vocative'],
            []
        )

    @graken()
    def _indicators_(self):
        with self._group():
            with self._optional():
                self._FUhE_clause_()

            def block1():
                self._indicator_()
            self._positive_closure(block1)
        self.ast['indicators'] = self.last_node

        self.ast._define(
            ['indicators'],
            []
        )

    @graken()
    def _indicator_(self):
        with self._group():
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            with self._group():
                                with self._choice():
                                    with self._option():
                                        self._UI_clause_()
                                    with self._option():
                                        self._CAI_clause_()
                                    self._error('no available options')
                            with self._optional():
                                self._NAI_clause_()
                    with self._option():
                        self._DAhO_clause_()
                    with self._option():
                        self._FUhO_clause_()
                    self._error('no available options')
            with self._ifnot():
                self._BU_clause_()
        self.ast['indicator'] = self.last_node

        self.ast._define(
            ['indicator'],
            []
        )

    @graken()
    def _zei_clause_(self):
        with self._group():
            self._pre_clause_()
            self._zei_clause_no_pre_()
        self.ast['zei_clause'] = self.last_node

        self.ast._define(
            ['zei_clause'],
            []
        )

    @graken()
    def _zei_clause_no_pre_(self):
        with self._group():
            self._pre_zei_bu_()

            def block1():
                with self._optional():
                    self._zei_tail_()
                self._bu_tail_()
            self._closure(block1)
            self._zei_tail_()
            self._post_clause_()
        self.ast['zei_clause_no_pre'] = self.last_node

        self.ast._define(
            ['zei_clause_no_pre'],
            []
        )

    @graken()
    def _bu_clause_(self):
        with self._group():
            self._pre_clause_()
            self._bu_clause_no_pre_()
        self.ast['bu_clause'] = self.last_node

        self.ast._define(
            ['bu_clause'],
            []
        )

    @graken()
    def _bu_clause_no_pre_(self):
        with self._group():
            self._pre_zei_bu_()

            def block1():
                with self._optional():
                    self._bu_tail_()
                self._zei_tail_()
            self._closure(block1)
            self._bu_tail_()
            self._post_clause_()
        self.ast['bu_clause_no_pre'] = self.last_node

        self.ast._define(
            ['bu_clause_no_pre'],
            []
        )

    @graken()
    def _zei_tail_(self):
        with self._group():

            def block1():
                self._ZEI_clause_()
                self._any_word_()
            self._positive_closure(block1)
        self.ast['zei_tail'] = self.last_node

        self.ast._define(
            ['zei_tail'],
            []
        )

    @graken()
    def _bu_tail_(self):
        with self._group():

            def block1():
                self._BU_clause_()
            self._positive_closure(block1)
        self.ast['bu_tail'] = self.last_node

        self.ast._define(
            ['bu_tail'],
            []
        )

    @graken()
    def _pre_zei_bu_(self):
        with self._group():
            with self._ifnot():
                self._BU_clause_()
            with self._ifnot():
                self._ZEI_clause_()
            with self._ifnot():
                self._SI_clause_()
            with self._ifnot():
                self._SA_clause_()
            with self._ifnot():
                self._SU_clause_()
            with self._ifnot():
                self._FAhO_clause_()
            self._any_word_SA_handling_()
            with self._optional():
                self._si_clause_()
        self.ast['pre_zei_bu'] = self.last_node

        self.ast._define(
            ['pre_zei_bu'],
            []
        )

    @graken()
    def _dot_star_(self):
        with self._group():

            def block1():
                self._pattern(r'.')
            self._closure(block1)
        self.ast['dot_star'] = self.last_node

        self.ast._define(
            ['dot_star'],
            []
        )

    @graken()
    def _post_clause_(self):
        with self._group():
            with self._optional():
                self._spaces_()
            with self._optional():
                self._si_clause_()
            with self._ifnot():
                self._ZEI_clause_()
            with self._ifnot():
                self._BU_clause_()

            def block1():
                self._indicators_()
            self._closure(block1)
        self.ast['post_clause'] = self.last_node

        self.ast._define(
            ['post_clause'],
            []
        )

    @graken()
    def _pre_clause_(self):
        with self._group():
            with self._optional():
                self._BAhE_clause_()
        self.ast['pre_clause'] = self.last_node

        self.ast._define(
            ['pre_clause'],
            []
        )

    @graken()
    def _any_word_SA_handling_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._BRIVLA_pre_()
                with self._option():
                    self._known_cmavo_SA_()
                with self._option():
                    self._CMAVO_pre_()
                with self._option():
                    self._CMEVLA_pre_()
                self._error('no available options')
        self.ast['any_word_SA_handling'] = self.last_node

        self.ast._define(
            ['any_word_SA_handling'],
            []
        )

    @graken()
    def _known_cmavo_SA_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._A_pre_()
                with self._option():
                    self._BAI_pre_()
                with self._option():
                    self._BAhE_pre_()
                with self._option():
                    self._BE_pre_()
                with self._option():
                    self._BEI_pre_()
                with self._option():
                    self._BEhO_pre_()
                with self._option():
                    self._BIhE_pre_()
                with self._option():
                    self._BIhI_pre_()
                with self._option():
                    self._BO_pre_()
                with self._option():
                    self._BOI_pre_()
                with self._option():
                    self._BU_pre_()
                with self._option():
                    self._BY_pre_()
                with self._option():
                    self._CAI_pre_()
                with self._option():
                    self._CAhA_pre_()
                with self._option():
                    self._CEI_pre_()
                with self._option():
                    self._CEhE_pre_()
                with self._option():
                    self._CO_pre_()
                with self._option():
                    self._COI_pre_()
                with self._option():
                    self._CU_pre_()
                with self._option():
                    self._CUhE_pre_()
                with self._option():
                    self._DAhO_pre_()
                with self._option():
                    self._DOI_pre_()
                with self._option():
                    self._DOhU_pre_()
                with self._option():
                    self._FA_pre_()
                with self._option():
                    self._FAhA_pre_()
                with self._option():
                    self._FEhE_pre_()
                with self._option():
                    self._FEhU_pre_()
                with self._option():
                    self._FIhO_pre_()
                with self._option():
                    self._FOI_pre_()
                with self._option():
                    self._FUhA_pre_()
                with self._option():
                    self._FUhE_pre_()
                with self._option():
                    self._FUhO_pre_()
                with self._option():
                    self._GA_pre_()
                with self._option():
                    self._GAhO_pre_()
                with self._option():
                    self._GEhU_pre_()
                with self._option():
                    self._GI_pre_()
                with self._option():
                    self._GIhA_pre_()
                with self._option():
                    self._GOI_pre_()
                with self._option():
                    self._GOhA_pre_()
                with self._option():
                    self._GUhA_pre_()
                with self._option():
                    self._I_pre_()
                with self._option():
                    self._JA_pre_()
                with self._option():
                    self._JAI_pre_()
                with self._option():
                    self._JOI_pre_()
                with self._option():
                    self._JOhI_pre_()
                with self._option():
                    self._KE_pre_()
                with self._option():
                    self._KEI_pre_()
                with self._option():
                    self._KEhE_pre_()
                with self._option():
                    self._KI_pre_()
                with self._option():
                    self._KOhA_pre_()
                with self._option():
                    self._KU_pre_()
                with self._option():
                    self._KUhE_pre_()
                with self._option():
                    self._KUhO_pre_()
                with self._option():
                    self._LA_pre_()
                with self._option():
                    self._LAU_pre_()
                with self._option():
                    self._LAhE_pre_()
                with self._option():
                    self._LE_pre_()
                with self._option():
                    self._LEhU_pre_()
                with self._option():
                    self._LI_pre_()
                with self._option():
                    self._LIhU_pre_()
                with self._option():
                    self._LOhO_pre_()
                with self._option():
                    self._LOhU_pre_()
                with self._option():
                    self._LU_pre_()
                with self._option():
                    self._LUhU_pre_()
                with self._option():
                    self._MAI_pre_()
                with self._option():
                    self._MAhO_pre_()
                with self._option():
                    self._ME_pre_()
                with self._option():
                    self._MEhU_pre_()
                with self._option():
                    self._MOI_pre_()
                with self._option():
                    self._MOhE_pre_()
                with self._option():
                    self._MOhI_pre_()
                with self._option():
                    self._NA_pre_()
                with self._option():
                    self._NAI_pre_()
                with self._option():
                    self._NAhE_pre_()
                with self._option():
                    self._NAhU_pre_()
                with self._option():
                    self._NIhE_pre_()
                with self._option():
                    self._NIhO_pre_()
                with self._option():
                    self._NOI_pre_()
                with self._option():
                    self._NU_pre_()
                with self._option():
                    self._NUhA_pre_()
                with self._option():
                    self._NUhI_pre_()
                with self._option():
                    self._NUhU_pre_()
                with self._option():
                    self._PA_pre_()
                with self._option():
                    self._PEhE_pre_()
                with self._option():
                    self._PEhO_pre_()
                with self._option():
                    self._PU_pre_()
                with self._option():
                    self._RAhO_pre_()
                with self._option():
                    self._ROI_pre_()
                with self._option():
                    self._SA_pre_()
                with self._option():
                    self._SE_pre_()
                with self._option():
                    self._SEI_pre_()
                with self._option():
                    self._SEhU_pre_()
                with self._option():
                    self._SI_clause_()
                with self._option():
                    self._SOI_pre_()
                with self._option():
                    self._SU_pre_()
                with self._option():
                    self._TAhE_pre_()
                with self._option():
                    self._TEI_pre_()
                with self._option():
                    self._TEhU_pre_()
                with self._option():
                    self._TO_pre_()
                with self._option():
                    self._TOI_pre_()
                with self._option():
                    self._TUhE_pre_()
                with self._option():
                    self._TUhU_pre_()
                with self._option():
                    self._UI_pre_()
                with self._option():
                    self._VA_pre_()
                with self._option():
                    self._VAU_pre_()
                with self._option():
                    self._VEI_pre_()
                with self._option():
                    self._VEhA_pre_()
                with self._option():
                    self._VEhO_pre_()
                with self._option():
                    self._VIhA_pre_()
                with self._option():
                    self._VUhO_pre_()
                with self._option():
                    self._VUhU_pre_()
                with self._option():
                    self._XI_pre_()
                with self._option():
                    self._ZAhO_pre_()
                with self._option():
                    self._ZEI_pre_()
                with self._option():
                    self._ZEhA_pre_()
                with self._option():
                    self._ZI_pre_()
                with self._option():
                    self._ZIhE_pre_()
                with self._option():
                    self._ZO_pre_()
                with self._option():
                    self._ZOI_pre_()
                with self._option():
                    self._ZOhU_pre_()
                self._error('no available options')
        self.ast['known_cmavo_SA'] = self.last_node

        self.ast._define(
            ['known_cmavo_SA'],
            []
        )

    @graken()
    def _su_clause_(self):
        with self._group():

            def block1():
                with self._choice():
                    with self._option():
                        self._erasable_clause_()
                    with self._option():
                        self._su_word_()
                    self._error('no available options')
            self._closure(block1)
            self._SU_clause_()
        self.ast['su_clause'] = self.last_node

        self.ast._define(
            ['su_clause'],
            []
        )

    @graken()
    def _si_clause_(self):
        with self._group():

            def block1():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._erasable_clause_()
                        with self._option():
                            self._si_word_()
                        with self._option():
                            self._SA_clause_()
                        self._error('no available options')
                with self._optional():
                    self._si_clause_()
                self._SI_clause_()
            self._positive_closure(block1)
        self.ast['si_clause'] = self.last_node

        self.ast._define(
            ['si_clause'],
            []
        )

    @graken()
    def _erasable_clause_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._bu_clause_no_pre_()
                        with self._ifnot():
                            self._ZEI_clause_()
                        with self._ifnot():
                            self._BU_clause_()
                with self._option():
                    with self._group():
                        self._zei_clause_no_pre_()
                        with self._ifnot():
                            self._ZEI_clause_()
                        with self._ifnot():
                            self._BU_clause_()
                self._error('no available options')
        self.ast['erasable_clause'] = self.last_node

        self.ast._define(
            ['erasable_clause'],
            []
        )

    @graken()
    def _sa_word_(self):
        with self._group():
            self._pre_zei_bu_()
        self.ast['sa_word'] = self.last_node

        self.ast._define(
            ['sa_word'],
            []
        )

    @graken()
    def _si_word_(self):
        with self._group():
            self._pre_zei_bu_()
        self.ast['si_word'] = self.last_node

        self.ast._define(
            ['si_word'],
            []
        )

    @graken()
    def _su_word_(self):
        with self._group():
            with self._ifnot():
                self._NIhO_clause_()
            with self._ifnot():
                self._LU_clause_()
            with self._ifnot():
                self._TUhE_clause_()
            with self._ifnot():
                self._TO_clause_()
            with self._ifnot():
                self._SU_clause_()
            with self._ifnot():
                self._FAhO_clause_()
            self._any_word_SA_handling_()
        self.ast['su_word'] = self.last_node

        self.ast._define(
            ['su_word'],
            []
        )

    @graken()
    def _BEhO_elidible_(self):
        with self._group():
            with self._optional():
                self._BEhO_clause_()
        self.ast['BEhO_elidible'] = self.last_node

        self.ast._define(
            ['BEhO_elidible'],
            []
        )

    @graken()
    def _BOI_elidible_(self):
        with self._group():
            with self._optional():
                self._BOI_clause_()
        self.ast['BOI_elidible'] = self.last_node

        self.ast._define(
            ['BOI_elidible'],
            []
        )

    @graken()
    def _CU_elidible_(self):
        with self._group():
            with self._optional():
                self._CU_clause_()
        self.ast['CU_elidible'] = self.last_node

        self.ast._define(
            ['CU_elidible'],
            []
        )

    @graken()
    def _DOhU_elidible_(self):
        with self._group():
            with self._optional():
                self._DOhU_clause_()
        self.ast['DOhU_elidible'] = self.last_node

        self.ast._define(
            ['DOhU_elidible'],
            []
        )

    @graken()
    def _FEhU_elidible_(self):
        with self._group():
            with self._optional():
                self._FEhU_clause_()
        self.ast['FEhU_elidible'] = self.last_node

        self.ast._define(
            ['FEhU_elidible'],
            []
        )

    @graken()
    def _GEhU_elidible_(self):
        with self._group():
            with self._optional():
                self._GEhU_clause_()
        self.ast['GEhU_elidible'] = self.last_node

        self.ast._define(
            ['GEhU_elidible'],
            []
        )

    @graken()
    def _KEI_elidible_(self):
        with self._group():
            with self._optional():
                self._KEI_clause_()
        self.ast['KEI_elidible'] = self.last_node

        self.ast._define(
            ['KEI_elidible'],
            []
        )

    @graken()
    def _KEhE_elidible_(self):
        with self._group():
            with self._optional():
                self._KEhE_clause_()
        self.ast['KEhE_elidible'] = self.last_node

        self.ast._define(
            ['KEhE_elidible'],
            []
        )

    @graken()
    def _KU_elidible_(self):
        with self._group():
            with self._optional():
                self._KU_clause_()
        self.ast['KU_elidible'] = self.last_node

        self.ast._define(
            ['KU_elidible'],
            []
        )

    @graken()
    def _KUhE_elidible_(self):
        with self._group():
            with self._optional():
                self._KUhE_clause_()
        self.ast['KUhE_elidible'] = self.last_node

        self.ast._define(
            ['KUhE_elidible'],
            []
        )

    @graken()
    def _KUhO_elidible_(self):
        with self._group():
            with self._optional():
                self._KUhO_clause_()
        self.ast['KUhO_elidible'] = self.last_node

        self.ast._define(
            ['KUhO_elidible'],
            []
        )

    @graken()
    def _LIhU_elidible_(self):
        with self._group():
            with self._optional():
                self._LIhU_clause_()
        self.ast['LIhU_elidible'] = self.last_node

        self.ast._define(
            ['LIhU_elidible'],
            []
        )

    @graken()
    def _LOhO_elidible_(self):
        with self._group():
            with self._optional():
                self._LOhO_clause_()
        self.ast['LOhO_elidible'] = self.last_node

        self.ast._define(
            ['LOhO_elidible'],
            []
        )

    @graken()
    def _LUhU_elidible_(self):
        with self._group():
            with self._optional():
                self._LUhU_clause_()
        self.ast['LUhU_elidible'] = self.last_node

        self.ast._define(
            ['LUhU_elidible'],
            []
        )

    @graken()
    def _MEhU_elidible_(self):
        with self._group():
            with self._optional():
                self._MEhU_clause_()
        self.ast['MEhU_elidible'] = self.last_node

        self.ast._define(
            ['MEhU_elidible'],
            []
        )

    @graken()
    def _NUhU_elidible_(self):
        with self._group():
            with self._optional():
                self._NUhU_clause_()
        self.ast['NUhU_elidible'] = self.last_node

        self.ast._define(
            ['NUhU_elidible'],
            []
        )

    @graken()
    def _SEhU_elidible_(self):
        with self._group():
            with self._optional():
                self._SEhU_clause_()
        self.ast['SEhU_elidible'] = self.last_node

        self.ast._define(
            ['SEhU_elidible'],
            []
        )

    @graken()
    def _TEhU_elidible_(self):
        with self._group():
            with self._optional():
                self._TEhU_clause_()
        self.ast['TEhU_elidible'] = self.last_node

        self.ast._define(
            ['TEhU_elidible'],
            []
        )

    @graken()
    def _TOI_elidible_(self):
        with self._group():
            with self._optional():
                self._TOI_clause_()
        self.ast['TOI_elidible'] = self.last_node

        self.ast._define(
            ['TOI_elidible'],
            []
        )

    @graken()
    def _TUhU_elidible_(self):
        with self._group():
            with self._optional():
                self._TUhU_clause_()
        self.ast['TUhU_elidible'] = self.last_node

        self.ast._define(
            ['TUhU_elidible'],
            []
        )

    @graken()
    def _VAU_elidible_(self):
        with self._group():
            with self._optional():
                self._VAU_clause_()
        self.ast['VAU_elidible'] = self.last_node

        self.ast._define(
            ['VAU_elidible'],
            []
        )

    @graken()
    def _VEhO_elidible_(self):
        with self._group():
            with self._optional():
                self._VEhO_clause_()
        self.ast['VEhO_elidible'] = self.last_node

        self.ast._define(
            ['VEhO_elidible'],
            []
        )

    @graken()
    def _BRIVLA_clause_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._BRIVLA_pre_()
                        self._BRIVLA_post_()
                with self._option():
                    self._zei_clause_()
                self._error('no available options')
        self.ast['BRIVLA_clause'] = self.last_node

        self.ast._define(
            ['BRIVLA_clause'],
            []
        )

    @graken()
    def _BRIVLA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._BRIVLA_()
            with self._optional():
                self._spaces_()
        self.ast['BRIVLA_pre'] = self.last_node

        self.ast._define(
            ['BRIVLA_pre'],
            []
        )

    @graken()
    def _BRIVLA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['BRIVLA_post'] = self.last_node

        self.ast._define(
            ['BRIVLA_post'],
            []
        )

    @graken()
    def _CMEVLA_clause_(self):
        with self._group():
            self._CMEVLA_pre_()
            self._CMEVLA_post_()
        self.ast['CMEVLA_clause'] = self.last_node

        self.ast._define(
            ['CMEVLA_clause'],
            []
        )

    @graken()
    def _CMEVLA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._CMEVLA_()
            with self._optional():
                self._spaces_()
        self.ast['CMEVLA_pre'] = self.last_node

        self.ast._define(
            ['CMEVLA_pre'],
            []
        )

    @graken()
    def _CMEVLA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['CMEVLA_post'] = self.last_node

        self.ast._define(
            ['CMEVLA_post'],
            []
        )

    @graken()
    def _CMAVO_clause_(self):
        with self._group():
            self._CMAVO_pre_()
            self._CMAVO_post_()
        self.ast['CMAVO_clause'] = self.last_node

        self.ast._define(
            ['CMAVO_clause'],
            []
        )

    @graken()
    def _CMAVO_pre_(self):
        with self._group():
            self._pre_clause_()
            self._CMAVO_()
            with self._optional():
                self._spaces_()
        self.ast['CMAVO_pre'] = self.last_node

        self.ast._define(
            ['CMAVO_pre'],
            []
        )

    @graken()
    def _CMAVO_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['CMAVO_post'] = self.last_node

        self.ast._define(
            ['CMAVO_post'],
            []
        )

    @graken()
    def _A_clause_(self):
        with self._group():
            self._A_pre_()
            self._A_post_()
        self.ast['A_clause'] = self.last_node

        self.ast._define(
            ['A_clause'],
            []
        )

    @graken()
    def _A_pre_(self):
        with self._group():
            self._pre_clause_()
            self._A_()
            with self._optional():
                self._spaces_()
        self.ast['A_pre'] = self.last_node

        self.ast._define(
            ['A_pre'],
            []
        )

    @graken()
    def _A_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['A_post'] = self.last_node

        self.ast._define(
            ['A_post'],
            []
        )

    @graken()
    def _BAI_clause_(self):
        with self._group():
            self._BAI_pre_()
            self._BAI_post_()
        self.ast['BAI_clause'] = self.last_node

        self.ast._define(
            ['BAI_clause'],
            []
        )

    @graken()
    def _BAI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._BAI_()
            with self._optional():
                self._spaces_()
        self.ast['BAI_pre'] = self.last_node

        self.ast._define(
            ['BAI_pre'],
            []
        )

    @graken()
    def _BAI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['BAI_post'] = self.last_node

        self.ast._define(
            ['BAI_post'],
            []
        )

    @graken()
    def _BAhE_clause_(self):
        with self._group():

            def block1():
                self._BAhE_pre_()
                self._BAhE_post_()
            self._positive_closure(block1)
        self.ast['BAhE_clause'] = self.last_node

        self.ast._define(
            ['BAhE_clause'],
            []
        )

    @graken()
    def _BAhE_pre_(self):
        with self._group():
            self._BAhE_()
            with self._optional():
                self._spaces_()
        self.ast['BAhE_pre'] = self.last_node

        self.ast._define(
            ['BAhE_pre'],
            []
        )

    @graken()
    def _BAhE_post_(self):
        with self._group():
            with self._optional():
                self._si_clause_()
            with self._ifnot():
                self._ZEI_clause_()
            with self._ifnot():
                self._BU_clause_()
        self.ast['BAhE_post'] = self.last_node

        self.ast._define(
            ['BAhE_post'],
            []
        )

    @graken()
    def _BE_clause_(self):
        with self._group():
            self._BE_pre_()
            self._BE_post_()
        self.ast['BE_clause'] = self.last_node

        self.ast._define(
            ['BE_clause'],
            []
        )

    @graken()
    def _BE_pre_(self):
        with self._group():
            self._pre_clause_()
            self._BE_()
            with self._optional():
                self._spaces_()
        self.ast['BE_pre'] = self.last_node

        self.ast._define(
            ['BE_pre'],
            []
        )

    @graken()
    def _BE_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['BE_post'] = self.last_node

        self.ast._define(
            ['BE_post'],
            []
        )

    @graken()
    def _BEI_clause_(self):
        with self._group():
            self._BEI_pre_()
            self._BEI_post_()
        self.ast['BEI_clause'] = self.last_node

        self.ast._define(
            ['BEI_clause'],
            []
        )

    @graken()
    def _BEI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._BEI_()
            with self._optional():
                self._spaces_()
        self.ast['BEI_pre'] = self.last_node

        self.ast._define(
            ['BEI_pre'],
            []
        )

    @graken()
    def _BEI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['BEI_post'] = self.last_node

        self.ast._define(
            ['BEI_post'],
            []
        )

    @graken()
    def _BEhO_clause_(self):
        with self._group():
            self._BEhO_pre_()
            self._BEhO_post_()
        self.ast['BEhO_clause'] = self.last_node

        self.ast._define(
            ['BEhO_clause'],
            []
        )

    @graken()
    def _BEhO_pre_(self):
        with self._group():
            self._pre_clause_()
            self._BEhO_()
            with self._optional():
                self._spaces_()
        self.ast['BEhO_pre'] = self.last_node

        self.ast._define(
            ['BEhO_pre'],
            []
        )

    @graken()
    def _BEhO_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['BEhO_post'] = self.last_node

        self.ast._define(
            ['BEhO_post'],
            []
        )

    @graken()
    def _BIhE_clause_(self):
        with self._group():
            self._BIhE_pre_()
            self._BIhE_post_()
        self.ast['BIhE_clause'] = self.last_node

        self.ast._define(
            ['BIhE_clause'],
            []
        )

    @graken()
    def _BIhE_pre_(self):
        with self._group():
            self._pre_clause_()
            self._BIhE_()
            with self._optional():
                self._spaces_()
        self.ast['BIhE_pre'] = self.last_node

        self.ast._define(
            ['BIhE_pre'],
            []
        )

    @graken()
    def _BIhE_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['BIhE_post'] = self.last_node

        self.ast._define(
            ['BIhE_post'],
            []
        )

    @graken()
    def _BIhI_clause_(self):
        with self._group():
            self._BIhI_pre_()
            self._BIhI_post_()
        self.ast['BIhI_clause'] = self.last_node

        self.ast._define(
            ['BIhI_clause'],
            []
        )

    @graken()
    def _BIhI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._BIhI_()
            with self._optional():
                self._spaces_()
        self.ast['BIhI_pre'] = self.last_node

        self.ast._define(
            ['BIhI_pre'],
            []
        )

    @graken()
    def _BIhI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['BIhI_post'] = self.last_node

        self.ast._define(
            ['BIhI_post'],
            []
        )

    @graken()
    def _BO_clause_(self):
        with self._group():
            self._BO_pre_()
            self._BO_post_()
        self.ast['BO_clause'] = self.last_node

        self.ast._define(
            ['BO_clause'],
            []
        )

    @graken()
    def _BO_pre_(self):
        with self._group():
            self._pre_clause_()
            self._BO_()
            with self._optional():
                self._spaces_()
        self.ast['BO_pre'] = self.last_node

        self.ast._define(
            ['BO_pre'],
            []
        )

    @graken()
    def _BO_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['BO_post'] = self.last_node

        self.ast._define(
            ['BO_post'],
            []
        )

    @graken()
    def _BOI_clause_(self):
        with self._group():
            self._BOI_pre_()
            self._BOI_post_()
        self.ast['BOI_clause'] = self.last_node

        self.ast._define(
            ['BOI_clause'],
            []
        )

    @graken()
    def _BOI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._BOI_()
            with self._optional():
                self._spaces_()
        self.ast['BOI_pre'] = self.last_node

        self.ast._define(
            ['BOI_pre'],
            []
        )

    @graken()
    def _BOI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['BOI_post'] = self.last_node

        self.ast._define(
            ['BOI_post'],
            []
        )

    @graken()
    def _BU_clause_(self):
        with self._group():
            self._BU_pre_()
            self._BU_post_()
        self.ast['BU_clause'] = self.last_node

        self.ast._define(
            ['BU_clause'],
            []
        )

    @graken()
    def _BU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._BU_()
            with self._optional():
                self._spaces_()
        self.ast['BU_pre'] = self.last_node

        self.ast._define(
            ['BU_pre'],
            []
        )

    @graken()
    def _BU_post_(self):
        with self._group():
            with self._optional():
                self._spaces_()
        self.ast['BU_post'] = self.last_node

        self.ast._define(
            ['BU_post'],
            []
        )

    @graken()
    def _BY_clause_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._BY_pre_()
                        self._BY_post_()
                with self._option():
                    self._bu_clause_()
                self._error('no available options')
        self.ast['BY_clause'] = self.last_node

        self.ast._define(
            ['BY_clause'],
            []
        )

    @graken()
    def _BY_pre_(self):
        with self._group():
            self._pre_clause_()
            self._BY_()
            with self._optional():
                self._spaces_()
        self.ast['BY_pre'] = self.last_node

        self.ast._define(
            ['BY_pre'],
            []
        )

    @graken()
    def _BY_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['BY_post'] = self.last_node

        self.ast._define(
            ['BY_post'],
            []
        )

    @graken()
    def _CAhA_clause_(self):
        with self._group():
            self._CAhA_pre_()
            self._CAhA_post_()
        self.ast['CAhA_clause'] = self.last_node

        self.ast._define(
            ['CAhA_clause'],
            []
        )

    @graken()
    def _CAhA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._CAhA_()
            with self._optional():
                self._spaces_()
        self.ast['CAhA_pre'] = self.last_node

        self.ast._define(
            ['CAhA_pre'],
            []
        )

    @graken()
    def _CAhA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['CAhA_post'] = self.last_node

        self.ast._define(
            ['CAhA_post'],
            []
        )

    @graken()
    def _CAI_clause_(self):
        with self._group():
            self._CAI_pre_()
            self._CAI_post_()
        self.ast['CAI_clause'] = self.last_node

        self.ast._define(
            ['CAI_clause'],
            []
        )

    @graken()
    def _CAI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._CAI_()
            with self._optional():
                self._spaces_()
        self.ast['CAI_pre'] = self.last_node

        self.ast._define(
            ['CAI_pre'],
            []
        )

    @graken()
    def _CAI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['CAI_post'] = self.last_node

        self.ast._define(
            ['CAI_post'],
            []
        )

    @graken()
    def _CEI_clause_(self):
        with self._group():
            self._CEI_pre_()
            self._CEI_post_()
        self.ast['CEI_clause'] = self.last_node

        self.ast._define(
            ['CEI_clause'],
            []
        )

    @graken()
    def _CEI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._CEI_()
            with self._optional():
                self._spaces_()
        self.ast['CEI_pre'] = self.last_node

        self.ast._define(
            ['CEI_pre'],
            []
        )

    @graken()
    def _CEI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['CEI_post'] = self.last_node

        self.ast._define(
            ['CEI_post'],
            []
        )

    @graken()
    def _CEhE_clause_(self):
        with self._group():
            self._CEhE_pre_()
            self._CEhE_post_()
        self.ast['CEhE_clause'] = self.last_node

        self.ast._define(
            ['CEhE_clause'],
            []
        )

    @graken()
    def _CEhE_pre_(self):
        with self._group():
            self._pre_clause_()
            self._CEhE_()
            with self._optional():
                self._spaces_()
        self.ast['CEhE_pre'] = self.last_node

        self.ast._define(
            ['CEhE_pre'],
            []
        )

    @graken()
    def _CEhE_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['CEhE_post'] = self.last_node

        self.ast._define(
            ['CEhE_post'],
            []
        )

    @graken()
    def _CO_clause_(self):
        with self._group():
            self._CO_pre_()
            self._CO_post_()
        self.ast['CO_clause'] = self.last_node

        self.ast._define(
            ['CO_clause'],
            []
        )

    @graken()
    def _CO_pre_(self):
        with self._group():
            self._pre_clause_()
            self._CO_()
            with self._optional():
                self._spaces_()
        self.ast['CO_pre'] = self.last_node

        self.ast._define(
            ['CO_pre'],
            []
        )

    @graken()
    def _CO_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['CO_post'] = self.last_node

        self.ast._define(
            ['CO_post'],
            []
        )

    @graken()
    def _COI_clause_(self):
        with self._group():
            self._COI_pre_()
            self._COI_post_()
        self.ast['COI_clause'] = self.last_node

        self.ast._define(
            ['COI_clause'],
            []
        )

    @graken()
    def _COI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._COI_()
            with self._optional():
                self._spaces_()
        self.ast['COI_pre'] = self.last_node

        self.ast._define(
            ['COI_pre'],
            []
        )

    @graken()
    def _COI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['COI_post'] = self.last_node

        self.ast._define(
            ['COI_post'],
            []
        )

    @graken()
    def _CU_clause_(self):
        with self._group():
            self._CU_pre_()
            self._CU_post_()
        self.ast['CU_clause'] = self.last_node

        self.ast._define(
            ['CU_clause'],
            []
        )

    @graken()
    def _CU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._CU_()
            with self._optional():
                self._spaces_()
        self.ast['CU_pre'] = self.last_node

        self.ast._define(
            ['CU_pre'],
            []
        )

    @graken()
    def _CU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['CU_post'] = self.last_node

        self.ast._define(
            ['CU_post'],
            []
        )

    @graken()
    def _CUhE_clause_(self):
        with self._group():
            self._CUhE_pre_()
            self._CUhE_post_()
        self.ast['CUhE_clause'] = self.last_node

        self.ast._define(
            ['CUhE_clause'],
            []
        )

    @graken()
    def _CUhE_pre_(self):
        with self._group():
            self._pre_clause_()
            self._CUhE_()
            with self._optional():
                self._spaces_()
        self.ast['CUhE_pre'] = self.last_node

        self.ast._define(
            ['CUhE_pre'],
            []
        )

    @graken()
    def _CUhE_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['CUhE_post'] = self.last_node

        self.ast._define(
            ['CUhE_post'],
            []
        )

    @graken()
    def _DAhO_clause_(self):
        with self._group():
            self._DAhO_pre_()
            self._DAhO_post_()
        self.ast['DAhO_clause'] = self.last_node

        self.ast._define(
            ['DAhO_clause'],
            []
        )

    @graken()
    def _DAhO_pre_(self):
        with self._group():
            self._pre_clause_()
            self._DAhO_()
            with self._optional():
                self._spaces_()
        self.ast['DAhO_pre'] = self.last_node

        self.ast._define(
            ['DAhO_pre'],
            []
        )

    @graken()
    def _DAhO_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['DAhO_post'] = self.last_node

        self.ast._define(
            ['DAhO_post'],
            []
        )

    @graken()
    def _DOI_clause_(self):
        with self._group():
            self._DOI_pre_()
            self._DOI_post_()
        self.ast['DOI_clause'] = self.last_node

        self.ast._define(
            ['DOI_clause'],
            []
        )

    @graken()
    def _DOI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._DOI_()
            with self._optional():
                self._spaces_()
        self.ast['DOI_pre'] = self.last_node

        self.ast._define(
            ['DOI_pre'],
            []
        )

    @graken()
    def _DOI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['DOI_post'] = self.last_node

        self.ast._define(
            ['DOI_post'],
            []
        )

    @graken()
    def _DOhU_clause_(self):
        with self._group():
            self._DOhU_pre_()
            self._DOhU_post_()
        self.ast['DOhU_clause'] = self.last_node

        self.ast._define(
            ['DOhU_clause'],
            []
        )

    @graken()
    def _DOhU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._DOhU_()
            with self._optional():
                self._spaces_()
        self.ast['DOhU_pre'] = self.last_node

        self.ast._define(
            ['DOhU_pre'],
            []
        )

    @graken()
    def _DOhU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['DOhU_post'] = self.last_node

        self.ast._define(
            ['DOhU_post'],
            []
        )

    @graken()
    def _FA_clause_(self):
        with self._group():
            self._FA_pre_()
            self._FA_post_()
        self.ast['FA_clause'] = self.last_node

        self.ast._define(
            ['FA_clause'],
            []
        )

    @graken()
    def _FA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._FA_()
            with self._optional():
                self._spaces_()
        self.ast['FA_pre'] = self.last_node

        self.ast._define(
            ['FA_pre'],
            []
        )

    @graken()
    def _FA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['FA_post'] = self.last_node

        self.ast._define(
            ['FA_post'],
            []
        )

    @graken()
    def _FAhA_clause_(self):
        with self._group():
            self._FAhA_pre_()
            self._FAhA_post_()
        self.ast['FAhA_clause'] = self.last_node

        self.ast._define(
            ['FAhA_clause'],
            []
        )

    @graken()
    def _FAhA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._FAhA_()
            with self._optional():
                self._spaces_()
        self.ast['FAhA_pre'] = self.last_node

        self.ast._define(
            ['FAhA_pre'],
            []
        )

    @graken()
    def _FAhA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['FAhA_post'] = self.last_node

        self.ast._define(
            ['FAhA_post'],
            []
        )

    @graken()
    def _FAhO_clause_(self):
        with self._group():
            self._pre_clause_()
            self._FAhO_()
            with self._optional():
                self._spaces_()
        self.ast['FAhO_clause'] = self.last_node

        self.ast._define(
            ['FAhO_clause'],
            []
        )

    @graken()
    def _FEhE_clause_(self):
        with self._group():
            self._FEhE_pre_()
            self._FEhE_post_()
        self.ast['FEhE_clause'] = self.last_node

        self.ast._define(
            ['FEhE_clause'],
            []
        )

    @graken()
    def _FEhE_pre_(self):
        with self._group():
            self._pre_clause_()
            self._FEhE_()
            with self._optional():
                self._spaces_()
        self.ast['FEhE_pre'] = self.last_node

        self.ast._define(
            ['FEhE_pre'],
            []
        )

    @graken()
    def _FEhE_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['FEhE_post'] = self.last_node

        self.ast._define(
            ['FEhE_post'],
            []
        )

    @graken()
    def _FEhU_clause_(self):
        with self._group():
            self._FEhU_pre_()
            self._FEhU_post_()
        self.ast['FEhU_clause'] = self.last_node

        self.ast._define(
            ['FEhU_clause'],
            []
        )

    @graken()
    def _FEhU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._FEhU_()
            with self._optional():
                self._spaces_()
        self.ast['FEhU_pre'] = self.last_node

        self.ast._define(
            ['FEhU_pre'],
            []
        )

    @graken()
    def _FEhU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['FEhU_post'] = self.last_node

        self.ast._define(
            ['FEhU_post'],
            []
        )

    @graken()
    def _FIhO_clause_(self):
        with self._group():
            self._FIhO_pre_()
            self._FIhO_post_()
        self.ast['FIhO_clause'] = self.last_node

        self.ast._define(
            ['FIhO_clause'],
            []
        )

    @graken()
    def _FIhO_pre_(self):
        with self._group():
            self._pre_clause_()
            self._FIhO_()
            with self._optional():
                self._spaces_()
        self.ast['FIhO_pre'] = self.last_node

        self.ast._define(
            ['FIhO_pre'],
            []
        )

    @graken()
    def _FIhO_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['FIhO_post'] = self.last_node

        self.ast._define(
            ['FIhO_post'],
            []
        )

    @graken()
    def _FOI_clause_(self):
        with self._group():
            self._FOI_pre_()
            self._FOI_post_()
        self.ast['FOI_clause'] = self.last_node

        self.ast._define(
            ['FOI_clause'],
            []
        )

    @graken()
    def _FOI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._FOI_()
            with self._optional():
                self._spaces_()
        self.ast['FOI_pre'] = self.last_node

        self.ast._define(
            ['FOI_pre'],
            []
        )

    @graken()
    def _FOI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['FOI_post'] = self.last_node

        self.ast._define(
            ['FOI_post'],
            []
        )

    @graken()
    def _FUhA_clause_(self):
        with self._group():
            self._FUhA_pre_()
            self._FUhA_post_()
        self.ast['FUhA_clause'] = self.last_node

        self.ast._define(
            ['FUhA_clause'],
            []
        )

    @graken()
    def _FUhA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._FUhA_()
            with self._optional():
                self._spaces_()
        self.ast['FUhA_pre'] = self.last_node

        self.ast._define(
            ['FUhA_pre'],
            []
        )

    @graken()
    def _FUhA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['FUhA_post'] = self.last_node

        self.ast._define(
            ['FUhA_post'],
            []
        )

    @graken()
    def _FUhE_clause_(self):
        with self._group():
            self._FUhE_pre_()
            self._FUhE_post_()
        self.ast['FUhE_clause'] = self.last_node

        self.ast._define(
            ['FUhE_clause'],
            []
        )

    @graken()
    def _FUhE_pre_(self):
        with self._group():
            self._pre_clause_()
            self._FUhE_()
            with self._optional():
                self._spaces_()
        self.ast['FUhE_pre'] = self.last_node

        self.ast._define(
            ['FUhE_pre'],
            []
        )

    @graken()
    def _FUhE_post_(self):
        with self._group():
            with self._ifnot():
                self._BU_clause_()
            with self._optional():
                self._spaces_()
            with self._ifnot():
                self._ZEI_clause_()
            with self._ifnot():
                self._BU_clause_()
        self.ast['FUhE_post'] = self.last_node

        self.ast._define(
            ['FUhE_post'],
            []
        )

    @graken()
    def _FUhO_clause_(self):
        with self._group():
            self._FUhO_pre_()
            self._FUhO_post_()
        self.ast['FUhO_clause'] = self.last_node

        self.ast._define(
            ['FUhO_clause'],
            []
        )

    @graken()
    def _FUhO_pre_(self):
        with self._group():
            self._pre_clause_()
            self._FUhO_()
            with self._optional():
                self._spaces_()
        self.ast['FUhO_pre'] = self.last_node

        self.ast._define(
            ['FUhO_pre'],
            []
        )

    @graken()
    def _FUhO_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['FUhO_post'] = self.last_node

        self.ast._define(
            ['FUhO_post'],
            []
        )

    @graken()
    def _GA_clause_(self):
        with self._group():
            self._GA_pre_()
            self._GA_post_()
        self.ast['GA_clause'] = self.last_node

        self.ast._define(
            ['GA_clause'],
            []
        )

    @graken()
    def _GA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._GA_()
            with self._optional():
                self._spaces_()
        self.ast['GA_pre'] = self.last_node

        self.ast._define(
            ['GA_pre'],
            []
        )

    @graken()
    def _GA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['GA_post'] = self.last_node

        self.ast._define(
            ['GA_post'],
            []
        )

    @graken()
    def _GAhO_clause_(self):
        with self._group():
            self._GAhO_pre_()
            self._GAhO_post_()
        self.ast['GAhO_clause'] = self.last_node

        self.ast._define(
            ['GAhO_clause'],
            []
        )

    @graken()
    def _GAhO_pre_(self):
        with self._group():
            self._pre_clause_()
            self._GAhO_()
            with self._optional():
                self._spaces_()
        self.ast['GAhO_pre'] = self.last_node

        self.ast._define(
            ['GAhO_pre'],
            []
        )

    @graken()
    def _GAhO_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['GAhO_post'] = self.last_node

        self.ast._define(
            ['GAhO_post'],
            []
        )

    @graken()
    def _GEhU_clause_(self):
        with self._group():
            self._GEhU_pre_()
            self._GEhU_post_()
        self.ast['GEhU_clause'] = self.last_node

        self.ast._define(
            ['GEhU_clause'],
            []
        )

    @graken()
    def _GEhU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._GEhU_()
            with self._optional():
                self._spaces_()
        self.ast['GEhU_pre'] = self.last_node

        self.ast._define(
            ['GEhU_pre'],
            []
        )

    @graken()
    def _GEhU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['GEhU_post'] = self.last_node

        self.ast._define(
            ['GEhU_post'],
            []
        )

    @graken()
    def _GI_clause_(self):
        with self._group():
            self._GI_pre_()
            self._GI_post_()
        self.ast['GI_clause'] = self.last_node

        self.ast._define(
            ['GI_clause'],
            []
        )

    @graken()
    def _GI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._GI_()
            with self._optional():
                self._spaces_()
        self.ast['GI_pre'] = self.last_node

        self.ast._define(
            ['GI_pre'],
            []
        )

    @graken()
    def _GI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['GI_post'] = self.last_node

        self.ast._define(
            ['GI_post'],
            []
        )

    @graken()
    def _GIhA_clause_(self):
        with self._group():
            self._GIhA_pre_()
            self._GIhA_post_()
        self.ast['GIhA_clause'] = self.last_node

        self.ast._define(
            ['GIhA_clause'],
            []
        )

    @graken()
    def _GIhA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._GIhA_()
            with self._optional():
                self._spaces_()
        self.ast['GIhA_pre'] = self.last_node

        self.ast._define(
            ['GIhA_pre'],
            []
        )

    @graken()
    def _GIhA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['GIhA_post'] = self.last_node

        self.ast._define(
            ['GIhA_post'],
            []
        )

    @graken()
    def _GOI_clause_(self):
        with self._group():
            self._GOI_pre_()
            self._GOI_post_()
        self.ast['GOI_clause'] = self.last_node

        self.ast._define(
            ['GOI_clause'],
            []
        )

    @graken()
    def _GOI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._GOI_()
            with self._optional():
                self._spaces_()
        self.ast['GOI_pre'] = self.last_node

        self.ast._define(
            ['GOI_pre'],
            []
        )

    @graken()
    def _GOI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['GOI_post'] = self.last_node

        self.ast._define(
            ['GOI_post'],
            []
        )

    @graken()
    def _GOhA_clause_(self):
        with self._group():
            self._GOhA_pre_()
            self._GOhA_post_()
        self.ast['GOhA_clause'] = self.last_node

        self.ast._define(
            ['GOhA_clause'],
            []
        )

    @graken()
    def _GOhA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._GOhA_()
            with self._optional():
                self._spaces_()
        self.ast['GOhA_pre'] = self.last_node

        self.ast._define(
            ['GOhA_pre'],
            []
        )

    @graken()
    def _GOhA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['GOhA_post'] = self.last_node

        self.ast._define(
            ['GOhA_post'],
            []
        )

    @graken()
    def _GUhA_clause_(self):
        with self._group():
            self._GUhA_pre_()
            self._GUhA_post_()
        self.ast['GUhA_clause'] = self.last_node

        self.ast._define(
            ['GUhA_clause'],
            []
        )

    @graken()
    def _GUhA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._GUhA_()
            with self._optional():
                self._spaces_()
        self.ast['GUhA_pre'] = self.last_node

        self.ast._define(
            ['GUhA_pre'],
            []
        )

    @graken()
    def _GUhA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['GUhA_post'] = self.last_node

        self.ast._define(
            ['GUhA_post'],
            []
        )

    @graken()
    def _I_clause_(self):
        with self._group():

            def block1():
                self._sentence_sa_()
            self._closure(block1)
            self._I_pre_()
            self._I_post_()
        self.ast['I_clause'] = self.last_node

        self.ast._define(
            ['I_clause'],
            []
        )

    @graken()
    def _I_pre_(self):
        with self._group():
            self._pre_clause_()
            self._I_()
            with self._optional():
                self._spaces_()
        self.ast['I_pre'] = self.last_node

        self.ast._define(
            ['I_pre'],
            []
        )

    @graken()
    def _I_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['I_post'] = self.last_node

        self.ast._define(
            ['I_post'],
            []
        )

    @graken()
    def _JA_clause_(self):
        with self._group():
            self._JA_pre_()
            self._JA_post_()
        self.ast['JA_clause'] = self.last_node

        self.ast._define(
            ['JA_clause'],
            []
        )

    @graken()
    def _JA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._JA_()
            with self._optional():
                self._spaces_()
        self.ast['JA_pre'] = self.last_node

        self.ast._define(
            ['JA_pre'],
            []
        )

    @graken()
    def _JA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['JA_post'] = self.last_node

        self.ast._define(
            ['JA_post'],
            []
        )

    @graken()
    def _JAI_clause_(self):
        with self._group():
            self._JAI_pre_()
            self._JAI_post_()
        self.ast['JAI_clause'] = self.last_node

        self.ast._define(
            ['JAI_clause'],
            []
        )

    @graken()
    def _JAI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._JAI_()
            with self._optional():
                self._spaces_()
        self.ast['JAI_pre'] = self.last_node

        self.ast._define(
            ['JAI_pre'],
            []
        )

    @graken()
    def _JAI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['JAI_post'] = self.last_node

        self.ast._define(
            ['JAI_post'],
            []
        )

    @graken()
    def _JOhI_clause_(self):
        with self._group():
            self._JOhI_pre_()
            self._JOhI_post_()
        self.ast['JOhI_clause'] = self.last_node

        self.ast._define(
            ['JOhI_clause'],
            []
        )

    @graken()
    def _JOhI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._JOhI_()
            with self._optional():
                self._spaces_()
        self.ast['JOhI_pre'] = self.last_node

        self.ast._define(
            ['JOhI_pre'],
            []
        )

    @graken()
    def _JOhI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['JOhI_post'] = self.last_node

        self.ast._define(
            ['JOhI_post'],
            []
        )

    @graken()
    def _JOI_clause_(self):
        with self._group():
            self._JOI_pre_()
            self._JOI_post_()
        self.ast['JOI_clause'] = self.last_node

        self.ast._define(
            ['JOI_clause'],
            []
        )

    @graken()
    def _JOI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._JOI_()
            with self._optional():
                self._spaces_()
        self.ast['JOI_pre'] = self.last_node

        self.ast._define(
            ['JOI_pre'],
            []
        )

    @graken()
    def _JOI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['JOI_post'] = self.last_node

        self.ast._define(
            ['JOI_post'],
            []
        )

    @graken()
    def _KE_clause_(self):
        with self._group():
            self._KE_pre_()
            self._KE_post_()
        self.ast['KE_clause'] = self.last_node

        self.ast._define(
            ['KE_clause'],
            []
        )

    @graken()
    def _KE_pre_(self):
        with self._group():
            self._pre_clause_()
            self._KE_()
            with self._optional():
                self._spaces_()
        self.ast['KE_pre'] = self.last_node

        self.ast._define(
            ['KE_pre'],
            []
        )

    @graken()
    def _KE_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['KE_post'] = self.last_node

        self.ast._define(
            ['KE_post'],
            []
        )

    @graken()
    def _KEhE_clause_(self):
        with self._group():
            self._KEhE_pre_()
            self._KEhE_post_()
        self.ast['KEhE_clause'] = self.last_node

        self.ast._define(
            ['KEhE_clause'],
            []
        )

    @graken()
    def _KEhE_pre_(self):
        with self._group():
            self._pre_clause_()
            self._KEhE_()
            with self._optional():
                self._spaces_()
        self.ast['KEhE_pre'] = self.last_node

        self.ast._define(
            ['KEhE_pre'],
            []
        )

    @graken()
    def _KEhE_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['KEhE_post'] = self.last_node

        self.ast._define(
            ['KEhE_post'],
            []
        )

    @graken()
    def _KEI_clause_(self):
        with self._group():
            self._KEI_pre_()
            self._KEI_post_()
        self.ast['KEI_clause'] = self.last_node

        self.ast._define(
            ['KEI_clause'],
            []
        )

    @graken()
    def _KEI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._KEI_()
            with self._optional():
                self._spaces_()
        self.ast['KEI_pre'] = self.last_node

        self.ast._define(
            ['KEI_pre'],
            []
        )

    @graken()
    def _KEI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['KEI_post'] = self.last_node

        self.ast._define(
            ['KEI_post'],
            []
        )

    @graken()
    def _KI_clause_(self):
        with self._group():
            self._KI_pre_()
            self._KI_post_()
        self.ast['KI_clause'] = self.last_node

        self.ast._define(
            ['KI_clause'],
            []
        )

    @graken()
    def _KI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._KI_()
            with self._optional():
                self._spaces_()
        self.ast['KI_pre'] = self.last_node

        self.ast._define(
            ['KI_pre'],
            []
        )

    @graken()
    def _KI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['KI_post'] = self.last_node

        self.ast._define(
            ['KI_post'],
            []
        )

    @graken()
    def _KOhA_clause_(self):
        with self._group():
            self._KOhA_pre_()
            self._KOhA_post_()
        self.ast['KOhA_clause'] = self.last_node

        self.ast._define(
            ['KOhA_clause'],
            []
        )

    @graken()
    def _KOhA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._KOhA_()
            with self._optional():
                self._spaces_()
        self.ast['KOhA_pre'] = self.last_node

        self.ast._define(
            ['KOhA_pre'],
            []
        )

    @graken()
    def _KOhA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['KOhA_post'] = self.last_node

        self.ast._define(
            ['KOhA_post'],
            []
        )

    @graken()
    def _KU_clause_(self):
        with self._group():
            self._KU_pre_()
            self._KU_post_()
        self.ast['KU_clause'] = self.last_node

        self.ast._define(
            ['KU_clause'],
            []
        )

    @graken()
    def _KU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._KU_()
            with self._optional():
                self._spaces_()
        self.ast['KU_pre'] = self.last_node

        self.ast._define(
            ['KU_pre'],
            []
        )

    @graken()
    def _KU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['KU_post'] = self.last_node

        self.ast._define(
            ['KU_post'],
            []
        )

    @graken()
    def _KUhE_clause_(self):
        with self._group():
            self._KUhE_pre_()
            self._KUhE_post_()
        self.ast['KUhE_clause'] = self.last_node

        self.ast._define(
            ['KUhE_clause'],
            []
        )

    @graken()
    def _KUhE_pre_(self):
        with self._group():
            self._pre_clause_()
            self._KUhE_()
            with self._optional():
                self._spaces_()
        self.ast['KUhE_pre'] = self.last_node

        self.ast._define(
            ['KUhE_pre'],
            []
        )

    @graken()
    def _KUhE_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['KUhE_post'] = self.last_node

        self.ast._define(
            ['KUhE_post'],
            []
        )

    @graken()
    def _KUhO_clause_(self):
        with self._group():
            self._KUhO_pre_()
            self._KUhO_post_()
        self.ast['KUhO_clause'] = self.last_node

        self.ast._define(
            ['KUhO_clause'],
            []
        )

    @graken()
    def _KUhO_pre_(self):
        with self._group():
            self._pre_clause_()
            self._KUhO_()
            with self._optional():
                self._spaces_()
        self.ast['KUhO_pre'] = self.last_node

        self.ast._define(
            ['KUhO_pre'],
            []
        )

    @graken()
    def _KUhO_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['KUhO_post'] = self.last_node

        self.ast._define(
            ['KUhO_post'],
            []
        )

    @graken()
    def _LA_clause_(self):
        with self._group():
            self._LA_pre_()
            self._LA_post_()
        self.ast['LA_clause'] = self.last_node

        self.ast._define(
            ['LA_clause'],
            []
        )

    @graken()
    def _LA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._LA_()
            with self._optional():
                self._spaces_()
        self.ast['LA_pre'] = self.last_node

        self.ast._define(
            ['LA_pre'],
            []
        )

    @graken()
    def _LA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['LA_post'] = self.last_node

        self.ast._define(
            ['LA_post'],
            []
        )

    @graken()
    def _LAU_clause_(self):
        with self._group():
            self._LAU_pre_()
            self._LAU_post_()
        self.ast['LAU_clause'] = self.last_node

        self.ast._define(
            ['LAU_clause'],
            []
        )

    @graken()
    def _LAU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._LAU_()
            with self._optional():
                self._spaces_()
        self.ast['LAU_pre'] = self.last_node

        self.ast._define(
            ['LAU_pre'],
            []
        )

    @graken()
    def _LAU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['LAU_post'] = self.last_node

        self.ast._define(
            ['LAU_post'],
            []
        )

    @graken()
    def _LAhE_clause_(self):
        with self._group():
            self._LAhE_pre_()
            self._LAhE_post_()
        self.ast['LAhE_clause'] = self.last_node

        self.ast._define(
            ['LAhE_clause'],
            []
        )

    @graken()
    def _LAhE_pre_(self):
        with self._group():
            self._pre_clause_()
            self._LAhE_()
            with self._optional():
                self._spaces_()
        self.ast['LAhE_pre'] = self.last_node

        self.ast._define(
            ['LAhE_pre'],
            []
        )

    @graken()
    def _LAhE_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['LAhE_post'] = self.last_node

        self.ast._define(
            ['LAhE_post'],
            []
        )

    @graken()
    def _LE_clause_(self):
        with self._group():
            self._LE_pre_()
            self._LE_post_()
        self.ast['LE_clause'] = self.last_node

        self.ast._define(
            ['LE_clause'],
            []
        )

    @graken()
    def _LE_pre_(self):
        with self._group():
            self._pre_clause_()
            self._LE_()
            with self._optional():
                self._spaces_()
        self.ast['LE_pre'] = self.last_node

        self.ast._define(
            ['LE_pre'],
            []
        )

    @graken()
    def _LE_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['LE_post'] = self.last_node

        self.ast._define(
            ['LE_post'],
            []
        )

    @graken()
    def _LEhU_clause_(self):
        with self._group():
            self._LEhU_pre_()
            self._LEhU_post_()
        self.ast['LEhU_clause'] = self.last_node

        self.ast._define(
            ['LEhU_clause'],
            []
        )

    @graken()
    def _LEhU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._LEhU_()
            with self._optional():
                self._spaces_()
        self.ast['LEhU_pre'] = self.last_node

        self.ast._define(
            ['LEhU_pre'],
            []
        )

    @graken()
    def _LEhU_post_(self):
        with self._group():
            with self._optional():
                self._spaces_()
        self.ast['LEhU_post'] = self.last_node

        self.ast._define(
            ['LEhU_post'],
            []
        )

    @graken()
    def _LI_clause_(self):
        with self._group():
            self._LI_pre_()
            self._LI_post_()
        self.ast['LI_clause'] = self.last_node

        self.ast._define(
            ['LI_clause'],
            []
        )

    @graken()
    def _LI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._LI_()
            with self._optional():
                self._spaces_()
        self.ast['LI_pre'] = self.last_node

        self.ast._define(
            ['LI_pre'],
            []
        )

    @graken()
    def _LI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['LI_post'] = self.last_node

        self.ast._define(
            ['LI_post'],
            []
        )

    @graken()
    def _LIhU_clause_(self):
        with self._group():
            self._LIhU_pre_()
            self._LIhU_post_()
        self.ast['LIhU_clause'] = self.last_node

        self.ast._define(
            ['LIhU_clause'],
            []
        )

    @graken()
    def _LIhU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._LIhU_()
            with self._optional():
                self._spaces_()
        self.ast['LIhU_pre'] = self.last_node

        self.ast._define(
            ['LIhU_pre'],
            []
        )

    @graken()
    def _LIhU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['LIhU_post'] = self.last_node

        self.ast._define(
            ['LIhU_post'],
            []
        )

    @graken()
    def _LOhO_clause_(self):
        with self._group():
            self._LOhO_pre_()
            self._LOhO_post_()
        self.ast['LOhO_clause'] = self.last_node

        self.ast._define(
            ['LOhO_clause'],
            []
        )

    @graken()
    def _LOhO_pre_(self):
        with self._group():
            self._pre_clause_()
            self._LOhO_()
            with self._optional():
                self._spaces_()
        self.ast['LOhO_pre'] = self.last_node

        self.ast._define(
            ['LOhO_pre'],
            []
        )

    @graken()
    def _LOhO_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['LOhO_post'] = self.last_node

        self.ast._define(
            ['LOhO_post'],
            []
        )

    @graken()
    def _LOhU_clause_(self):
        with self._group():
            self._LOhU_pre_()
            self._LOhU_post_()
        self.ast['LOhU_clause'] = self.last_node

        self.ast._define(
            ['LOhU_clause'],
            []
        )

    @graken()
    def _LOhU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._LOhU_()
            with self._optional():
                self._spaces_()

            def block1():
                with self._ifnot():
                    self._LEhU_()
                self._any_word_()
            self._closure(block1)
            self._LEhU_clause_()
            with self._optional():
                self._spaces_()
        self.ast['LOhU_pre'] = self.last_node

        self.ast._define(
            ['LOhU_pre'],
            []
        )

    @graken()
    def _LOhU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['LOhU_post'] = self.last_node

        self.ast._define(
            ['LOhU_post'],
            []
        )

    @graken()
    def _LU_clause_(self):
        with self._group():
            self._LU_pre_()
            self._LU_post_()
        self.ast['LU_clause'] = self.last_node

        self.ast._define(
            ['LU_clause'],
            []
        )

    @graken()
    def _LU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._LU_()
            with self._optional():
                self._spaces_()
        self.ast['LU_pre'] = self.last_node

        self.ast._define(
            ['LU_pre'],
            []
        )

    @graken()
    def _LU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['LU_post'] = self.last_node

        self.ast._define(
            ['LU_post'],
            []
        )

    @graken()
    def _LUhU_clause_(self):
        with self._group():
            self._LUhU_pre_()
            self._LUhU_post_()
        self.ast['LUhU_clause'] = self.last_node

        self.ast._define(
            ['LUhU_clause'],
            []
        )

    @graken()
    def _LUhU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._LUhU_()
            with self._optional():
                self._spaces_()
        self.ast['LUhU_pre'] = self.last_node

        self.ast._define(
            ['LUhU_pre'],
            []
        )

    @graken()
    def _LUhU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['LUhU_post'] = self.last_node

        self.ast._define(
            ['LUhU_post'],
            []
        )

    @graken()
    def _MAhO_clause_(self):
        with self._group():
            self._MAhO_pre_()
            self._MAhO_post_()
        self.ast['MAhO_clause'] = self.last_node

        self.ast._define(
            ['MAhO_clause'],
            []
        )

    @graken()
    def _MAhO_pre_(self):
        with self._group():
            self._pre_clause_()
            self._MAhO_()
            with self._optional():
                self._spaces_()
        self.ast['MAhO_pre'] = self.last_node

        self.ast._define(
            ['MAhO_pre'],
            []
        )

    @graken()
    def _MAhO_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['MAhO_post'] = self.last_node

        self.ast._define(
            ['MAhO_post'],
            []
        )

    @graken()
    def _MAI_clause_(self):
        with self._group():
            self._MAI_pre_()
            self._MAI_post_()
        self.ast['MAI_clause'] = self.last_node

        self.ast._define(
            ['MAI_clause'],
            []
        )

    @graken()
    def _MAI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._MAI_()
            with self._optional():
                self._spaces_()
        self.ast['MAI_pre'] = self.last_node

        self.ast._define(
            ['MAI_pre'],
            []
        )

    @graken()
    def _MAI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['MAI_post'] = self.last_node

        self.ast._define(
            ['MAI_post'],
            []
        )

    @graken()
    def _ME_clause_(self):
        with self._group():
            self._ME_pre_()
            self._ME_post_()
        self.ast['ME_clause'] = self.last_node

        self.ast._define(
            ['ME_clause'],
            []
        )

    @graken()
    def _ME_pre_(self):
        with self._group():
            self._pre_clause_()
            self._ME_()
            with self._optional():
                self._spaces_()
        self.ast['ME_pre'] = self.last_node

        self.ast._define(
            ['ME_pre'],
            []
        )

    @graken()
    def _ME_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['ME_post'] = self.last_node

        self.ast._define(
            ['ME_post'],
            []
        )

    @graken()
    def _MEhU_clause_(self):
        with self._group():
            self._MEhU_pre_()
            self._MEhU_post_()
        self.ast['MEhU_clause'] = self.last_node

        self.ast._define(
            ['MEhU_clause'],
            []
        )

    @graken()
    def _MEhU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._MEhU_()
            with self._optional():
                self._spaces_()
        self.ast['MEhU_pre'] = self.last_node

        self.ast._define(
            ['MEhU_pre'],
            []
        )

    @graken()
    def _MEhU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['MEhU_post'] = self.last_node

        self.ast._define(
            ['MEhU_post'],
            []
        )

    @graken()
    def _MOhE_clause_(self):
        with self._group():
            self._MOhE_pre_()
            self._MOhE_post_()
        self.ast['MOhE_clause'] = self.last_node

        self.ast._define(
            ['MOhE_clause'],
            []
        )

    @graken()
    def _MOhE_pre_(self):
        with self._group():
            self._pre_clause_()
            self._MOhE_()
            with self._optional():
                self._spaces_()
        self.ast['MOhE_pre'] = self.last_node

        self.ast._define(
            ['MOhE_pre'],
            []
        )

    @graken()
    def _MOhE_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['MOhE_post'] = self.last_node

        self.ast._define(
            ['MOhE_post'],
            []
        )

    @graken()
    def _MOhI_clause_(self):
        with self._group():
            self._MOhI_pre_()
            self._MOhI_post_()
        self.ast['MOhI_clause'] = self.last_node

        self.ast._define(
            ['MOhI_clause'],
            []
        )

    @graken()
    def _MOhI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._MOhI_()
            with self._optional():
                self._spaces_()
        self.ast['MOhI_pre'] = self.last_node

        self.ast._define(
            ['MOhI_pre'],
            []
        )

    @graken()
    def _MOhI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['MOhI_post'] = self.last_node

        self.ast._define(
            ['MOhI_post'],
            []
        )

    @graken()
    def _MOI_clause_(self):
        with self._group():
            self._MOI_pre_()
            self._MOI_post_()
        self.ast['MOI_clause'] = self.last_node

        self.ast._define(
            ['MOI_clause'],
            []
        )

    @graken()
    def _MOI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._MOI_()
            with self._optional():
                self._spaces_()
        self.ast['MOI_pre'] = self.last_node

        self.ast._define(
            ['MOI_pre'],
            []
        )

    @graken()
    def _MOI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['MOI_post'] = self.last_node

        self.ast._define(
            ['MOI_post'],
            []
        )

    @graken()
    def _NA_clause_(self):
        with self._group():
            self._NA_pre_()
            self._NA_post_()
        self.ast['NA_clause'] = self.last_node

        self.ast._define(
            ['NA_clause'],
            []
        )

    @graken()
    def _NA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._NA_()
            with self._optional():
                self._spaces_()
        self.ast['NA_pre'] = self.last_node

        self.ast._define(
            ['NA_pre'],
            []
        )

    @graken()
    def _NA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['NA_post'] = self.last_node

        self.ast._define(
            ['NA_post'],
            []
        )

    @graken()
    def _NAI_clause_(self):
        with self._group():
            self._NAI_pre_()
            self._NAI_post_()
        self.ast['NAI_clause'] = self.last_node

        self.ast._define(
            ['NAI_clause'],
            []
        )

    @graken()
    def _NAI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._NAI_()
            with self._optional():
                self._spaces_()
        self.ast['NAI_pre'] = self.last_node

        self.ast._define(
            ['NAI_pre'],
            []
        )

    @graken()
    def _NAI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['NAI_post'] = self.last_node

        self.ast._define(
            ['NAI_post'],
            []
        )

    @graken()
    def _NAhE_clause_(self):
        with self._group():
            self._NAhE_pre_()
            self._NAhE_post_()
        self.ast['NAhE_clause'] = self.last_node

        self.ast._define(
            ['NAhE_clause'],
            []
        )

    @graken()
    def _NAhE_pre_(self):
        with self._group():
            self._pre_clause_()
            self._NAhE_()
            with self._optional():
                self._spaces_()
        self.ast['NAhE_pre'] = self.last_node

        self.ast._define(
            ['NAhE_pre'],
            []
        )

    @graken()
    def _NAhE_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['NAhE_post'] = self.last_node

        self.ast._define(
            ['NAhE_post'],
            []
        )

    @graken()
    def _NAhU_clause_(self):
        with self._group():
            self._NAhU_pre_()
            self._NAhU_post_()
        self.ast['NAhU_clause'] = self.last_node

        self.ast._define(
            ['NAhU_clause'],
            []
        )

    @graken()
    def _NAhU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._NAhU_()
            with self._optional():
                self._spaces_()
        self.ast['NAhU_pre'] = self.last_node

        self.ast._define(
            ['NAhU_pre'],
            []
        )

    @graken()
    def _NAhU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['NAhU_post'] = self.last_node

        self.ast._define(
            ['NAhU_post'],
            []
        )

    @graken()
    def _NIhE_clause_(self):
        with self._group():
            self._NIhE_pre_()
            self._NIhE_post_()
        self.ast['NIhE_clause'] = self.last_node

        self.ast._define(
            ['NIhE_clause'],
            []
        )

    @graken()
    def _NIhE_pre_(self):
        with self._group():
            self._pre_clause_()
            self._NIhE_()
            with self._optional():
                self._spaces_()
        self.ast['NIhE_pre'] = self.last_node

        self.ast._define(
            ['NIhE_pre'],
            []
        )

    @graken()
    def _NIhE_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['NIhE_post'] = self.last_node

        self.ast._define(
            ['NIhE_post'],
            []
        )

    @graken()
    def _NIhO_clause_(self):
        with self._group():

            def block1():
                self._sentence_sa_()
            self._closure(block1)
            self._NIhO_pre_()
            self._NIhO_post_()
        self.ast['NIhO_clause'] = self.last_node

        self.ast._define(
            ['NIhO_clause'],
            []
        )

    @graken()
    def _NIhO_pre_(self):
        with self._group():
            self._pre_clause_()
            self._NIhO_()
            with self._optional():
                self._spaces_()
        self.ast['NIhO_pre'] = self.last_node

        self.ast._define(
            ['NIhO_pre'],
            []
        )

    @graken()
    def _NIhO_post_(self):
        with self._group():

            def block1():
                self._su_clause_()
            self._closure(block1)
            self._post_clause_()
        self.ast['NIhO_post'] = self.last_node

        self.ast._define(
            ['NIhO_post'],
            []
        )

    @graken()
    def _NOI_clause_(self):
        with self._group():
            self._NOI_pre_()
            self._NOI_post_()
        self.ast['NOI_clause'] = self.last_node

        self.ast._define(
            ['NOI_clause'],
            []
        )

    @graken()
    def _NOI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._NOI_()
            with self._optional():
                self._spaces_()
        self.ast['NOI_pre'] = self.last_node

        self.ast._define(
            ['NOI_pre'],
            []
        )

    @graken()
    def _NOI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['NOI_post'] = self.last_node

        self.ast._define(
            ['NOI_post'],
            []
        )

    @graken()
    def _NU_clause_(self):
        with self._group():
            self._NU_pre_()
            self._NU_post_()
        self.ast['NU_clause'] = self.last_node

        self.ast._define(
            ['NU_clause'],
            []
        )

    @graken()
    def _NU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._NU_()
            with self._optional():
                self._spaces_()
        self.ast['NU_pre'] = self.last_node

        self.ast._define(
            ['NU_pre'],
            []
        )

    @graken()
    def _NU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['NU_post'] = self.last_node

        self.ast._define(
            ['NU_post'],
            []
        )

    @graken()
    def _NUhA_clause_(self):
        with self._group():
            self._NUhA_pre_()
            self._NUhA_post_()
        self.ast['NUhA_clause'] = self.last_node

        self.ast._define(
            ['NUhA_clause'],
            []
        )

    @graken()
    def _NUhA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._NUhA_()
            with self._optional():
                self._spaces_()
        self.ast['NUhA_pre'] = self.last_node

        self.ast._define(
            ['NUhA_pre'],
            []
        )

    @graken()
    def _NUhA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['NUhA_post'] = self.last_node

        self.ast._define(
            ['NUhA_post'],
            []
        )

    @graken()
    def _NUhI_clause_(self):
        with self._group():
            self._NUhI_pre_()
            self._NUhI_post_()
        self.ast['NUhI_clause'] = self.last_node

        self.ast._define(
            ['NUhI_clause'],
            []
        )

    @graken()
    def _NUhI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._NUhI_()
            with self._optional():
                self._spaces_()
        self.ast['NUhI_pre'] = self.last_node

        self.ast._define(
            ['NUhI_pre'],
            []
        )

    @graken()
    def _NUhI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['NUhI_post'] = self.last_node

        self.ast._define(
            ['NUhI_post'],
            []
        )

    @graken()
    def _NUhU_clause_(self):
        with self._group():
            self._NUhU_pre_()
            self._NUhU_post_()
        self.ast['NUhU_clause'] = self.last_node

        self.ast._define(
            ['NUhU_clause'],
            []
        )

    @graken()
    def _NUhU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._NUhU_()
            with self._optional():
                self._spaces_()
        self.ast['NUhU_pre'] = self.last_node

        self.ast._define(
            ['NUhU_pre'],
            []
        )

    @graken()
    def _NUhU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['NUhU_post'] = self.last_node

        self.ast._define(
            ['NUhU_post'],
            []
        )

    @graken()
    def _PA_clause_(self):
        with self._group():
            self._PA_pre_()
            self._PA_post_()
        self.ast['PA_clause'] = self.last_node

        self.ast._define(
            ['PA_clause'],
            []
        )

    @graken()
    def _PA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._PA_()
            with self._optional():
                self._spaces_()
        self.ast['PA_pre'] = self.last_node

        self.ast._define(
            ['PA_pre'],
            []
        )

    @graken()
    def _PA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['PA_post'] = self.last_node

        self.ast._define(
            ['PA_post'],
            []
        )

    @graken()
    def _PEhE_clause_(self):
        with self._group():
            self._PEhE_pre_()
            self._PEhE_post_()
        self.ast['PEhE_clause'] = self.last_node

        self.ast._define(
            ['PEhE_clause'],
            []
        )

    @graken()
    def _PEhE_pre_(self):
        with self._group():
            self._pre_clause_()
            self._PEhE_()
            with self._optional():
                self._spaces_()
        self.ast['PEhE_pre'] = self.last_node

        self.ast._define(
            ['PEhE_pre'],
            []
        )

    @graken()
    def _PEhE_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['PEhE_post'] = self.last_node

        self.ast._define(
            ['PEhE_post'],
            []
        )

    @graken()
    def _PEhO_clause_(self):
        with self._group():
            self._PEhO_pre_()
            self._PEhO_post_()
        self.ast['PEhO_clause'] = self.last_node

        self.ast._define(
            ['PEhO_clause'],
            []
        )

    @graken()
    def _PEhO_pre_(self):
        with self._group():
            self._pre_clause_()
            self._PEhO_()
            with self._optional():
                self._spaces_()
        self.ast['PEhO_pre'] = self.last_node

        self.ast._define(
            ['PEhO_pre'],
            []
        )

    @graken()
    def _PEhO_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['PEhO_post'] = self.last_node

        self.ast._define(
            ['PEhO_post'],
            []
        )

    @graken()
    def _PU_clause_(self):
        with self._group():
            self._PU_pre_()
            self._PU_post_()
        self.ast['PU_clause'] = self.last_node

        self.ast._define(
            ['PU_clause'],
            []
        )

    @graken()
    def _PU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._PU_()
            with self._optional():
                self._spaces_()
        self.ast['PU_pre'] = self.last_node

        self.ast._define(
            ['PU_pre'],
            []
        )

    @graken()
    def _PU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['PU_post'] = self.last_node

        self.ast._define(
            ['PU_post'],
            []
        )

    @graken()
    def _RAhO_clause_(self):
        with self._group():
            self._RAhO_pre_()
            self._RAhO_post_()
        self.ast['RAhO_clause'] = self.last_node

        self.ast._define(
            ['RAhO_clause'],
            []
        )

    @graken()
    def _RAhO_pre_(self):
        with self._group():
            self._pre_clause_()
            self._RAhO_()
            with self._optional():
                self._spaces_()
        self.ast['RAhO_pre'] = self.last_node

        self.ast._define(
            ['RAhO_pre'],
            []
        )

    @graken()
    def _RAhO_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['RAhO_post'] = self.last_node

        self.ast._define(
            ['RAhO_post'],
            []
        )

    @graken()
    def _ROI_clause_(self):
        with self._group():
            self._ROI_pre_()
            self._ROI_post_()
        self.ast['ROI_clause'] = self.last_node

        self.ast._define(
            ['ROI_clause'],
            []
        )

    @graken()
    def _ROI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._ROI_()
            with self._optional():
                self._spaces_()
        self.ast['ROI_pre'] = self.last_node

        self.ast._define(
            ['ROI_pre'],
            []
        )

    @graken()
    def _ROI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['ROI_post'] = self.last_node

        self.ast._define(
            ['ROI_post'],
            []
        )

    @graken()
    def _SA_clause_(self):
        with self._group():
            self._SA_pre_()
            self._SA_post_()
        self.ast['SA_clause'] = self.last_node

        self.ast._define(
            ['SA_clause'],
            []
        )

    @graken()
    def _SA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._SA_()
            with self._optional():
                self._spaces_()
        self.ast['SA_pre'] = self.last_node

        self.ast._define(
            ['SA_pre'],
            []
        )

    @graken()
    def _SA_post_(self):
        with self._group():
            with self._optional():
                self._spaces_()
        self.ast['SA_post'] = self.last_node

        self.ast._define(
            ['SA_post'],
            []
        )

    @graken()
    def _SE_clause_(self):
        with self._group():
            self._SE_pre_()
            self._SE_post_()
        self.ast['SE_clause'] = self.last_node

        self.ast._define(
            ['SE_clause'],
            []
        )

    @graken()
    def _SE_pre_(self):
        with self._group():
            self._pre_clause_()
            self._SE_()
            with self._optional():
                self._spaces_()
        self.ast['SE_pre'] = self.last_node

        self.ast._define(
            ['SE_pre'],
            []
        )

    @graken()
    def _SE_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['SE_post'] = self.last_node

        self.ast._define(
            ['SE_post'],
            []
        )

    @graken()
    def _SEI_clause_(self):
        with self._group():
            self._SEI_pre_()
            self._SEI_post_()
        self.ast['SEI_clause'] = self.last_node

        self.ast._define(
            ['SEI_clause'],
            []
        )

    @graken()
    def _SEI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._SEI_()
            with self._optional():
                self._spaces_()
        self.ast['SEI_pre'] = self.last_node

        self.ast._define(
            ['SEI_pre'],
            []
        )

    @graken()
    def _SEI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['SEI_post'] = self.last_node

        self.ast._define(
            ['SEI_post'],
            []
        )

    @graken()
    def _SEhU_clause_(self):
        with self._group():
            self._SEhU_pre_()
            self._SEhU_post_()
        self.ast['SEhU_clause'] = self.last_node

        self.ast._define(
            ['SEhU_clause'],
            []
        )

    @graken()
    def _SEhU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._SEhU_()
            with self._optional():
                self._spaces_()
        self.ast['SEhU_pre'] = self.last_node

        self.ast._define(
            ['SEhU_pre'],
            []
        )

    @graken()
    def _SEhU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['SEhU_post'] = self.last_node

        self.ast._define(
            ['SEhU_post'],
            []
        )

    @graken()
    def _SI_clause_(self):
        with self._group():
            with self._optional():
                self._spaces_()
            self._SI_()
            with self._optional():
                self._spaces_()
        self.ast['SI_clause'] = self.last_node

        self.ast._define(
            ['SI_clause'],
            []
        )

    @graken()
    def _SOI_clause_(self):
        with self._group():
            self._SOI_pre_()
            self._SOI_post_()
        self.ast['SOI_clause'] = self.last_node

        self.ast._define(
            ['SOI_clause'],
            []
        )

    @graken()
    def _SOI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._SOI_()
            with self._optional():
                self._spaces_()
        self.ast['SOI_pre'] = self.last_node

        self.ast._define(
            ['SOI_pre'],
            []
        )

    @graken()
    def _SOI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['SOI_post'] = self.last_node

        self.ast._define(
            ['SOI_post'],
            []
        )

    @graken()
    def _SU_clause_(self):
        with self._group():
            self._SU_pre_()
            self._SU_post_()
        self.ast['SU_clause'] = self.last_node

        self.ast._define(
            ['SU_clause'],
            []
        )

    @graken()
    def _SU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._SU_()
            with self._optional():
                self._spaces_()
        self.ast['SU_pre'] = self.last_node

        self.ast._define(
            ['SU_pre'],
            []
        )

    @graken()
    def _SU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['SU_post'] = self.last_node

        self.ast._define(
            ['SU_post'],
            []
        )

    @graken()
    def _TAhE_clause_(self):
        with self._group():
            self._TAhE_pre_()
            self._TAhE_post_()
        self.ast['TAhE_clause'] = self.last_node

        self.ast._define(
            ['TAhE_clause'],
            []
        )

    @graken()
    def _TAhE_pre_(self):
        with self._group():
            self._pre_clause_()
            self._TAhE_()
            with self._optional():
                self._spaces_()
        self.ast['TAhE_pre'] = self.last_node

        self.ast._define(
            ['TAhE_pre'],
            []
        )

    @graken()
    def _TAhE_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['TAhE_post'] = self.last_node

        self.ast._define(
            ['TAhE_post'],
            []
        )

    @graken()
    def _TEhU_clause_(self):
        with self._group():
            self._TEhU_pre_()
            self._TEhU_post_()
        self.ast['TEhU_clause'] = self.last_node

        self.ast._define(
            ['TEhU_clause'],
            []
        )

    @graken()
    def _TEhU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._TEhU_()
            with self._optional():
                self._spaces_()
        self.ast['TEhU_pre'] = self.last_node

        self.ast._define(
            ['TEhU_pre'],
            []
        )

    @graken()
    def _TEhU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['TEhU_post'] = self.last_node

        self.ast._define(
            ['TEhU_post'],
            []
        )

    @graken()
    def _TEI_clause_(self):
        with self._group():
            self._TEI_pre_()
            self._TEI_post_()
        self.ast['TEI_clause'] = self.last_node

        self.ast._define(
            ['TEI_clause'],
            []
        )

    @graken()
    def _TEI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._TEI_()
            with self._optional():
                self._spaces_()
        self.ast['TEI_pre'] = self.last_node

        self.ast._define(
            ['TEI_pre'],
            []
        )

    @graken()
    def _TEI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['TEI_post'] = self.last_node

        self.ast._define(
            ['TEI_post'],
            []
        )

    @graken()
    def _TO_clause_(self):
        with self._group():
            self._TO_pre_()
            self._TO_post_()
        self.ast['TO_clause'] = self.last_node

        self.ast._define(
            ['TO_clause'],
            []
        )

    @graken()
    def _TO_pre_(self):
        with self._group():
            self._pre_clause_()
            self._TO_()
            with self._optional():
                self._spaces_()
        self.ast['TO_pre'] = self.last_node

        self.ast._define(
            ['TO_pre'],
            []
        )

    @graken()
    def _TO_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['TO_post'] = self.last_node

        self.ast._define(
            ['TO_post'],
            []
        )

    @graken()
    def _TOI_clause_(self):
        with self._group():
            self._TOI_pre_()
            self._TOI_post_()
        self.ast['TOI_clause'] = self.last_node

        self.ast._define(
            ['TOI_clause'],
            []
        )

    @graken()
    def _TOI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._TOI_()
            with self._optional():
                self._spaces_()
        self.ast['TOI_pre'] = self.last_node

        self.ast._define(
            ['TOI_pre'],
            []
        )

    @graken()
    def _TOI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['TOI_post'] = self.last_node

        self.ast._define(
            ['TOI_post'],
            []
        )

    @graken()
    def _TUhE_clause_(self):
        with self._group():
            self._TUhE_pre_()
            self._TUhE_post_()
        self.ast['TUhE_clause'] = self.last_node

        self.ast._define(
            ['TUhE_clause'],
            []
        )

    @graken()
    def _TUhE_pre_(self):
        with self._group():
            self._pre_clause_()
            self._TUhE_()
            with self._optional():
                self._spaces_()
        self.ast['TUhE_pre'] = self.last_node

        self.ast._define(
            ['TUhE_pre'],
            []
        )

    @graken()
    def _TUhE_post_(self):
        with self._group():

            def block1():
                self._su_clause_()
            self._closure(block1)
            self._post_clause_()
        self.ast['TUhE_post'] = self.last_node

        self.ast._define(
            ['TUhE_post'],
            []
        )

    @graken()
    def _TUhU_clause_(self):
        with self._group():
            self._TUhU_pre_()
            self._TUhU_post_()
        self.ast['TUhU_clause'] = self.last_node

        self.ast._define(
            ['TUhU_clause'],
            []
        )

    @graken()
    def _TUhU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._TUhU_()
            with self._optional():
                self._spaces_()
        self.ast['TUhU_pre'] = self.last_node

        self.ast._define(
            ['TUhU_pre'],
            []
        )

    @graken()
    def _TUhU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['TUhU_post'] = self.last_node

        self.ast._define(
            ['TUhU_post'],
            []
        )

    @graken()
    def _UI_clause_(self):
        with self._group():
            self._UI_pre_()
            self._UI_post_()
        self.ast['UI_clause'] = self.last_node

        self.ast._define(
            ['UI_clause'],
            []
        )

    @graken()
    def _UI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._UI_()
            with self._optional():
                self._spaces_()
        self.ast['UI_pre'] = self.last_node

        self.ast._define(
            ['UI_pre'],
            []
        )

    @graken()
    def _UI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['UI_post'] = self.last_node

        self.ast._define(
            ['UI_post'],
            []
        )

    @graken()
    def _VA_clause_(self):
        with self._group():
            self._VA_pre_()
            self._VA_post_()
        self.ast['VA_clause'] = self.last_node

        self.ast._define(
            ['VA_clause'],
            []
        )

    @graken()
    def _VA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._VA_()
            with self._optional():
                self._spaces_()
        self.ast['VA_pre'] = self.last_node

        self.ast._define(
            ['VA_pre'],
            []
        )

    @graken()
    def _VA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['VA_post'] = self.last_node

        self.ast._define(
            ['VA_post'],
            []
        )

    @graken()
    def _VAU_clause_(self):
        with self._group():
            self._VAU_pre_()
            self._VAU_post_()
        self.ast['VAU_clause'] = self.last_node

        self.ast._define(
            ['VAU_clause'],
            []
        )

    @graken()
    def _VAU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._VAU_()
            with self._optional():
                self._spaces_()
        self.ast['VAU_pre'] = self.last_node

        self.ast._define(
            ['VAU_pre'],
            []
        )

    @graken()
    def _VAU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['VAU_post'] = self.last_node

        self.ast._define(
            ['VAU_post'],
            []
        )

    @graken()
    def _VEI_clause_(self):
        with self._group():
            self._VEI_pre_()
            self._VEI_post_()
        self.ast['VEI_clause'] = self.last_node

        self.ast._define(
            ['VEI_clause'],
            []
        )

    @graken()
    def _VEI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._VEI_()
            with self._optional():
                self._spaces_()
        self.ast['VEI_pre'] = self.last_node

        self.ast._define(
            ['VEI_pre'],
            []
        )

    @graken()
    def _VEI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['VEI_post'] = self.last_node

        self.ast._define(
            ['VEI_post'],
            []
        )

    @graken()
    def _VEhO_clause_(self):
        with self._group():
            self._VEhO_pre_()
            self._VEhO_post_()
        self.ast['VEhO_clause'] = self.last_node

        self.ast._define(
            ['VEhO_clause'],
            []
        )

    @graken()
    def _VEhO_pre_(self):
        with self._group():
            self._pre_clause_()
            self._VEhO_()
            with self._optional():
                self._spaces_()
        self.ast['VEhO_pre'] = self.last_node

        self.ast._define(
            ['VEhO_pre'],
            []
        )

    @graken()
    def _VEhO_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['VEhO_post'] = self.last_node

        self.ast._define(
            ['VEhO_post'],
            []
        )

    @graken()
    def _VUhU_clause_(self):
        with self._group():
            self._VUhU_pre_()
            self._VUhU_post_()
        self.ast['VUhU_clause'] = self.last_node

        self.ast._define(
            ['VUhU_clause'],
            []
        )

    @graken()
    def _VUhU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._VUhU_()
            with self._optional():
                self._spaces_()
        self.ast['VUhU_pre'] = self.last_node

        self.ast._define(
            ['VUhU_pre'],
            []
        )

    @graken()
    def _VUhU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['VUhU_post'] = self.last_node

        self.ast._define(
            ['VUhU_post'],
            []
        )

    @graken()
    def _VEhA_clause_(self):
        with self._group():
            self._VEhA_pre_()
            self._VEhA_post_()
        self.ast['VEhA_clause'] = self.last_node

        self.ast._define(
            ['VEhA_clause'],
            []
        )

    @graken()
    def _VEhA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._VEhA_()
            with self._optional():
                self._spaces_()
        self.ast['VEhA_pre'] = self.last_node

        self.ast._define(
            ['VEhA_pre'],
            []
        )

    @graken()
    def _VEhA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['VEhA_post'] = self.last_node

        self.ast._define(
            ['VEhA_post'],
            []
        )

    @graken()
    def _VIhA_clause_(self):
        with self._group():
            self._VIhA_pre_()
            self._VIhA_post_()
        self.ast['VIhA_clause'] = self.last_node

        self.ast._define(
            ['VIhA_clause'],
            []
        )

    @graken()
    def _VIhA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._VIhA_()
            with self._optional():
                self._spaces_()
        self.ast['VIhA_pre'] = self.last_node

        self.ast._define(
            ['VIhA_pre'],
            []
        )

    @graken()
    def _VIhA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['VIhA_post'] = self.last_node

        self.ast._define(
            ['VIhA_post'],
            []
        )

    @graken()
    def _VUhO_clause_(self):
        with self._group():
            self._VUhO_pre_()
            self._VUhO_post_()
        self.ast['VUhO_clause'] = self.last_node

        self.ast._define(
            ['VUhO_clause'],
            []
        )

    @graken()
    def _VUhO_pre_(self):
        with self._group():
            self._pre_clause_()
            self._VUhO_()
            with self._optional():
                self._spaces_()
        self.ast['VUhO_pre'] = self.last_node

        self.ast._define(
            ['VUhO_pre'],
            []
        )

    @graken()
    def _VUhO_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['VUhO_post'] = self.last_node

        self.ast._define(
            ['VUhO_post'],
            []
        )

    @graken()
    def _XI_clause_(self):
        with self._group():
            self._XI_pre_()
            self._XI_post_()
        self.ast['XI_clause'] = self.last_node

        self.ast._define(
            ['XI_clause'],
            []
        )

    @graken()
    def _XI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._XI_()
            with self._optional():
                self._spaces_()
        self.ast['XI_pre'] = self.last_node

        self.ast._define(
            ['XI_pre'],
            []
        )

    @graken()
    def _XI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['XI_post'] = self.last_node

        self.ast._define(
            ['XI_post'],
            []
        )

    @graken()
    def _ZAhO_clause_(self):
        with self._group():
            self._ZAhO_pre_()
            self._ZAhO_post_()
        self.ast['ZAhO_clause'] = self.last_node

        self.ast._define(
            ['ZAhO_clause'],
            []
        )

    @graken()
    def _ZAhO_pre_(self):
        with self._group():
            self._pre_clause_()
            self._ZAhO_()
            with self._optional():
                self._spaces_()
        self.ast['ZAhO_pre'] = self.last_node

        self.ast._define(
            ['ZAhO_pre'],
            []
        )

    @graken()
    def _ZAhO_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['ZAhO_post'] = self.last_node

        self.ast._define(
            ['ZAhO_post'],
            []
        )

    @graken()
    def _ZEhA_clause_(self):
        with self._group():
            self._ZEhA_pre_()
            self._ZEhA_post_()
        self.ast['ZEhA_clause'] = self.last_node

        self.ast._define(
            ['ZEhA_clause'],
            []
        )

    @graken()
    def _ZEhA_pre_(self):
        with self._group():
            self._pre_clause_()
            self._ZEhA_()
            with self._optional():
                self._spaces_()
        self.ast['ZEhA_pre'] = self.last_node

        self.ast._define(
            ['ZEhA_pre'],
            []
        )

    @graken()
    def _ZEhA_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['ZEhA_post'] = self.last_node

        self.ast._define(
            ['ZEhA_post'],
            []
        )

    @graken()
    def _ZEI_clause_(self):
        with self._group():
            self._ZEI_pre_()
            self._ZEI_post_()
        self.ast['ZEI_clause'] = self.last_node

        self.ast._define(
            ['ZEI_clause'],
            []
        )

    @graken()
    def _ZEI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._ZEI_()
            with self._optional():
                self._spaces_()
        self.ast['ZEI_pre'] = self.last_node

        self.ast._define(
            ['ZEI_pre'],
            []
        )

    @graken()
    def _ZEI_post_(self):
        with self._group():
            with self._optional():
                self._spaces_()
        self.ast['ZEI_post'] = self.last_node

        self.ast._define(
            ['ZEI_post'],
            []
        )

    @graken()
    def _ZI_clause_(self):
        with self._group():
            self._ZI_pre_()
            self._ZI_post_()
        self.ast['ZI_clause'] = self.last_node

        self.ast._define(
            ['ZI_clause'],
            []
        )

    @graken()
    def _ZI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._ZI_()
            with self._optional():
                self._spaces_()
        self.ast['ZI_pre'] = self.last_node

        self.ast._define(
            ['ZI_pre'],
            []
        )

    @graken()
    def _ZI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['ZI_post'] = self.last_node

        self.ast._define(
            ['ZI_post'],
            []
        )

    @graken()
    def _ZIhE_clause_(self):
        with self._group():
            self._ZIhE_pre_()
            self._ZIhE_post_()
        self.ast['ZIhE_clause'] = self.last_node

        self.ast._define(
            ['ZIhE_clause'],
            []
        )

    @graken()
    def _ZIhE_pre_(self):
        with self._group():
            self._pre_clause_()
            self._ZIhE_()
            with self._optional():
                self._spaces_()
        self.ast['ZIhE_pre'] = self.last_node

        self.ast._define(
            ['ZIhE_pre'],
            []
        )

    @graken()
    def _ZIhE_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['ZIhE_post'] = self.last_node

        self.ast._define(
            ['ZIhE_post'],
            []
        )

    @graken()
    def _ZO_clause_(self):
        with self._group():
            self._ZO_pre_()
            self._ZO_post_()
        self.ast['ZO_clause'] = self.last_node

        self.ast._define(
            ['ZO_clause'],
            []
        )

    @graken()
    def _ZO_pre_(self):
        with self._group():
            self._pre_clause_()
            self._ZO_()
            with self._optional():
                self._spaces_()
            self._any_word_()
            with self._optional():
                self._spaces_()
        self.ast['ZO_pre'] = self.last_node

        self.ast._define(
            ['ZO_pre'],
            []
        )

    @graken()
    def _ZO_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['ZO_post'] = self.last_node

        self.ast._define(
            ['ZO_post'],
            []
        )

    @graken()
    def _ZOI_clause_(self):
        with self._group():
            self._ZOI_pre_()
            self._ZOI_post_()
        self.ast['ZOI_clause'] = self.last_node

        self.ast._define(
            ['ZOI_clause'],
            []
        )

    @graken()
    def _ZOI_pre_(self):
        with self._group():
            self._pre_clause_()
            self._ZOI_()
            with self._optional():
                self._spaces_()
            self._zoi_open_()
            with self._optional():
                self._spaces_()

            def block1():
                self._zoi_word_()
            self._closure(block1)
            self._zoi_close_()
            with self._optional():
                self._spaces_()
        self.ast['ZOI_pre'] = self.last_node

        self.ast._define(
            ['ZOI_pre'],
            []
        )

    @graken()
    def _ZOI_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['ZOI_post'] = self.last_node

        self.ast._define(
            ['ZOI_post'],
            []
        )

    @graken()
    def _ZOhU_clause_(self):
        with self._group():
            self._ZOhU_pre_()
            self._ZOhU_post_()
        self.ast['ZOhU_clause'] = self.last_node

        self.ast._define(
            ['ZOhU_clause'],
            []
        )

    @graken()
    def _ZOhU_pre_(self):
        with self._group():
            self._pre_clause_()
            self._ZOhU_()
            with self._optional():
                self._spaces_()
        self.ast['ZOhU_pre'] = self.last_node

        self.ast._define(
            ['ZOhU_pre'],
            []
        )

    @graken()
    def _ZOhU_post_(self):
        with self._group():
            self._post_clause_()
        self.ast['ZOhU_post'] = self.last_node

        self.ast._define(
            ['ZOhU_post'],
            []
        )

    @graken()
    def _morphology_(self):
        with self._group():
            with self._optional():
                self._initial_spaces_()

            def block1():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._CMAVO_()
                        with self._option():
                            self._BRIVLA_()
                        with self._option():
                            self._CMEVLA_()
                        with self._option():
                            self._non_lojban_word_()
                        self._error('no available options')
                with self._optional():
                    self._spaces_()
            self._closure(block1)
        self.ast['morphology'] = self.last_node

        self.ast._define(
            ['morphology'],
            []
        )

    @graken()
    def _CMEVLA_(self):
        with self._group():
            with self._if():
                self._cmevla_()
            self._cmevla_()
        self.ast['CMEVLA'] = self.last_node

        self.ast._define(
            ['CMEVLA'],
            []
        )

    @graken()
    def _CMAVO_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._A_()
                with self._option():
                    self._BAI_()
                with self._option():
                    self._BAhE_()
                with self._option():
                    self._BE_()
                with self._option():
                    self._BEI_()
                with self._option():
                    self._BEhO_()
                with self._option():
                    self._BIhE_()
                with self._option():
                    self._BIhI_()
                with self._option():
                    self._BO_()
                with self._option():
                    self._BOI_()
                with self._option():
                    self._BU_()
                with self._option():
                    self._BY_()
                with self._option():
                    self._CAhA_()
                with self._option():
                    self._CAI_()
                with self._option():
                    self._CEI_()
                with self._option():
                    self._CEhE_()
                with self._option():
                    self._CO_()
                with self._option():
                    self._COI_()
                with self._option():
                    self._CU_()
                with self._option():
                    self._CUhE_()
                with self._option():
                    self._DAhO_()
                with self._option():
                    self._DOI_()
                with self._option():
                    self._DOhU_()
                with self._option():
                    self._FA_()
                with self._option():
                    self._FAhA_()
                with self._option():
                    self._FAhO_()
                with self._option():
                    self._FEhE_()
                with self._option():
                    self._FEhU_()
                with self._option():
                    self._FIhO_()
                with self._option():
                    self._FOI_()
                with self._option():
                    self._FUhA_()
                with self._option():
                    self._FUhE_()
                with self._option():
                    self._FUhO_()
                with self._option():
                    self._GA_()
                with self._option():
                    self._GAhO_()
                with self._option():
                    self._GEhU_()
                with self._option():
                    self._GI_()
                with self._option():
                    self._GIhA_()
                with self._option():
                    self._GOI_()
                with self._option():
                    self._GOhA_()
                with self._option():
                    self._GUhA_()
                with self._option():
                    self._I_()
                with self._option():
                    self._JA_()
                with self._option():
                    self._JAI_()
                with self._option():
                    self._JOhI_()
                with self._option():
                    self._JOI_()
                with self._option():
                    self._KE_()
                with self._option():
                    self._KEhE_()
                with self._option():
                    self._KEI_()
                with self._option():
                    self._KI_()
                with self._option():
                    self._KOhA_()
                with self._option():
                    self._KU_()
                with self._option():
                    self._KUhE_()
                with self._option():
                    self._KUhO_()
                with self._option():
                    self._LA_()
                with self._option():
                    self._LAU_()
                with self._option():
                    self._LAhE_()
                with self._option():
                    self._LE_()
                with self._option():
                    self._LEhU_()
                with self._option():
                    self._LI_()
                with self._option():
                    self._LIhU_()
                with self._option():
                    self._LOhO_()
                with self._option():
                    self._LOhU_()
                with self._option():
                    self._LU_()
                with self._option():
                    self._LUhU_()
                with self._option():
                    self._MAhO_()
                with self._option():
                    self._MAI_()
                with self._option():
                    self._ME_()
                with self._option():
                    self._MEhU_()
                with self._option():
                    self._MOhE_()
                with self._option():
                    self._MOhI_()
                with self._option():
                    self._MOI_()
                with self._option():
                    self._NA_()
                with self._option():
                    self._NAI_()
                with self._option():
                    self._NAhE_()
                with self._option():
                    self._NAhU_()
                with self._option():
                    self._NIhE_()
                with self._option():
                    self._NIhO_()
                with self._option():
                    self._NOI_()
                with self._option():
                    self._NU_()
                with self._option():
                    self._NUhA_()
                with self._option():
                    self._NUhI_()
                with self._option():
                    self._NUhU_()
                with self._option():
                    self._PA_()
                with self._option():
                    self._PEhE_()
                with self._option():
                    self._PEhO_()
                with self._option():
                    self._PU_()
                with self._option():
                    self._RAhO_()
                with self._option():
                    self._ROI_()
                with self._option():
                    self._SA_()
                with self._option():
                    self._SE_()
                with self._option():
                    self._SEI_()
                with self._option():
                    self._SEhU_()
                with self._option():
                    self._SI_()
                with self._option():
                    self._SOI_()
                with self._option():
                    self._SU_()
                with self._option():
                    self._TAhE_()
                with self._option():
                    self._TEhU_()
                with self._option():
                    self._TEI_()
                with self._option():
                    self._TO_()
                with self._option():
                    self._TOI_()
                with self._option():
                    self._TUhE_()
                with self._option():
                    self._TUhU_()
                with self._option():
                    self._UI_()
                with self._option():
                    self._VA_()
                with self._option():
                    self._VAU_()
                with self._option():
                    self._VEI_()
                with self._option():
                    self._VEhO_()
                with self._option():
                    self._VUhU_()
                with self._option():
                    self._VEhA_()
                with self._option():
                    self._VIhA_()
                with self._option():
                    self._VUhO_()
                with self._option():
                    self._XI_()
                with self._option():
                    self._ZAhO_()
                with self._option():
                    self._ZEhA_()
                with self._option():
                    self._ZEI_()
                with self._option():
                    self._ZI_()
                with self._option():
                    self._ZIhE_()
                with self._option():
                    self._ZO_()
                with self._option():
                    self._ZOI_()
                with self._option():
                    self._ZOhU_()
                with self._option():
                    self._cmavo_()
                self._error('no available options')
        self.ast['CMAVO'] = self.last_node

        self.ast._define(
            ['CMAVO'],
            []
        )

    @graken()
    def _vlatai_(self):
        with self._group():
            with self._optional():
                self._vlatai_spaces_()
            with self._group():
                with self._choice():
                    with self._option():
                        self._BU_()
                    with self._option():
                        self._ZEI_()
                    with self._option():
                        self._vlatai_bu_clause_()
                    with self._option():
                        self._vlatai_zei_clause_()
                    with self._option():
                        with self._group():

                            def block1():
                                self._non_bu_zei_cmavo_()
                            self._positive_closure(block1)
                    with self._option():
                        self._BRIVLA_()
                    with self._option():
                        self._CMEVLA_()
                    self._error('no available options')
            with self._optional():
                self._vlatai_spaces_()
        self.ast['vlatai'] = self.last_node

        self.ast._define(
            ['vlatai'],
            []
        )

    @graken()
    def _vlatai_spaces_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():

                        def block1():
                            with self._group():

                                def block2():
                                    self._comma_()
                                self._closure(block2)
                                self._space_char_()
                        self._positive_closure(block1)

                        with self._optional():
                            self._EOF_()
                with self._option():
                    self._EOF_()
                self._error('no available options')
        self.ast['vlatai_spaces'] = self.last_node

        self.ast._define(
            ['vlatai_spaces'],
            []
        )

    @graken()
    def _vlatai_bu_clause_(self):
        with self._group():
            self._vlatai_pre_zei_bu_()

            def block1():
                with self._optional():
                    self._vlatai_bu_tail_()
                self._vlatai_zei_tail_()
            self._closure(block1)
            self._vlatai_bu_tail_()
        self.ast['vlatai_bu_clause'] = self.last_node

        self.ast._define(
            ['vlatai_bu_clause'],
            []
        )

    @graken()
    def _vlatai_zei_clause_(self):
        with self._group():
            self._vlatai_pre_zei_bu_()

            def block1():
                with self._optional():
                    self._vlatai_zei_tail_()
                self._vlatai_bu_tail_()
            self._closure(block1)
            self._vlatai_zei_tail_()
        self.ast['vlatai_zei_clause'] = self.last_node

        self.ast._define(
            ['vlatai_zei_clause'],
            []
        )

    @graken()
    def _vlatai_bu_tail_(self):
        with self._group():

            def block1():
                self._vlatai_BU_clause_()
            self._positive_closure(block1)
        self.ast['vlatai_bu_tail'] = self.last_node

        self.ast._define(
            ['vlatai_bu_tail'],
            []
        )

    @graken()
    def _vlatai_zei_tail_(self):
        with self._group():

            def block1():
                self._vlatai_ZEI_clause_()
                self._vlatai_any_word_()
            self._positive_closure(block1)
        self.ast['vlatai_zei_tail'] = self.last_node

        self.ast._define(
            ['vlatai_zei_tail'],
            []
        )

    @graken()
    def _vlatai_BU_clause_(self):
        with self._group():
            self._BU_()
            with self._optional():
                self._vlatai_spaces_()
        self.ast['vlatai_BU_clause'] = self.last_node

        self.ast._define(
            ['vlatai_BU_clause'],
            []
        )

    @graken()
    def _vlatai_ZEI_clause_(self):
        with self._group():
            self._ZEI_()
            with self._optional():
                self._vlatai_spaces_()
        self.ast['vlatai_ZEI_clause'] = self.last_node

        self.ast._define(
            ['vlatai_ZEI_clause'],
            []
        )

    @graken()
    def _vlatai_pre_zei_bu_(self):
        with self._group():
            with self._ifnot():
                self._BU_()
            with self._ifnot():
                self._ZEI_()
            with self._ifnot():
                self._SI_()
            with self._ifnot():
                self._SA_()
            with self._ifnot():
                self._SU_()
            with self._ifnot():
                self._FAhO_()
            self._vlatai_any_word_()
        self.ast['vlatai_pre_zei_bu'] = self.last_node

        self.ast._define(
            ['vlatai_pre_zei_bu'],
            []
        )

    @graken()
    def _vlatai_any_word_(self):
        with self._group():
            self._vlatai_lojban_word_()
            with self._optional():
                self._vlatai_spaces_()
        self.ast['vlatai_any_word'] = self.last_node

        self.ast._define(
            ['vlatai_any_word'],
            []
        )

    @graken()
    def _vlatai_lojban_word_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._CMEVLA_()
                with self._option():
                    self._cmavo_including_y_()
                with self._option():
                    self._BRIVLA_()
                self._error('no available options')
        self.ast['vlatai_lojban_word'] = self.last_node

        self.ast._define(
            ['vlatai_lojban_word'],
            []
        )

    @graken()
    def _non_bu_zei_cmavo_(self):
        with self._group():
            with self._ifnot():
                self._BU_()
            with self._ifnot():
                self._ZEI_()
            self._cmavo_including_y_()
            with self._optional():
                self._vlatai_spaces_()
        self.ast['non_bu_zei_cmavo'] = self.last_node

        self.ast._define(
            ['non_bu_zei_cmavo'],
            []
        )

    @graken()
    def _cmavo_including_y_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._Y_()
                with self._option():
                    self._CMAVO_()
                self._error('no available options')
        self.ast['cmavo_including_y'] = self.last_node

        self.ast._define(
            ['cmavo_including_y'],
            []
        )

    @graken()
    def _lojban_word_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._CMEVLA_()
                with self._option():
                    self._CMAVO_()
                with self._option():
                    self._BRIVLA_()
                self._error('no available options')
        self.ast['lojban_word'] = self.last_node

        self.ast._define(
            ['lojban_word'],
            []
        )

    @graken()
    def _BRIVLA_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._gismu_2_()
                with self._option():
                    self._fuhivla_()
                with self._option():
                    self._lujvo_()
                self._error('no available options')
        self.ast['BRIVLA'] = self.last_node

        self.ast._define(
            ['BRIVLA'],
            []
        )

    @graken()
    def _gismu_2_(self):
        with self._group():
            with self._if():
                self._gismu_()
            self._gismu_()
        self.ast['gismu_2'] = self.last_node

        self.ast._define(
            ['gismu_2'],
            []
        )

    @graken()
    def _any_word_(self):
        with self._group():
            self._lojban_word_()
            with self._optional():
                self._spaces_()
        self.ast['any_word'] = self.last_node

        self.ast._define(
            ['any_word'],
            []
        )

    @graken()
    def _zoi_open_(self):
        with self._group():
            with self._if():
                self._lojban_word_()
            self._lojban_word_()
        self.ast['zoi_open'] = self.last_node

        self.ast._define(
            ['zoi_open'],
            []
        )

    @graken()
    def _zoi_word_(self):
        with self._group():

            def block1():
                self._non_space_()
            self._positive_closure(block1)

            self._spaces_()
        self.ast['zoi_word'] = self.last_node

        self.ast._define(
            ['zoi_word'],
            []
        )

    @graken()
    def _zoi_close_(self):
        with self._group():
            with self._if():
                self._lojban_word_()
            self._lojban_word_()
        self.ast['zoi_close'] = self.last_node

        self.ast._define(
            ['zoi_close'],
            []
        )

    @graken()
    def _cmevla_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._jbocme_()
                with self._option():
                    self._zifcme_()
                self._error('no available options')
        self.ast['cmevla'] = self.last_node

        self.ast._define(
            ['cmevla'],
            []
        )

    @graken()
    def _zifcme_(self):
        with self._group():
            with self._ifnot():
                self._h_()

            def block1():
                with self._choice():
                    with self._option():
                        self._nucleus_()
                    with self._option():
                        self._glide_()
                    with self._option():
                        self._h_()
                    with self._option():
                        with self._group():
                            self._consonant_()
                            with self._ifnot():
                                self._pause_()
                    with self._option():
                        self._digit_()
                    self._error('no available options')
            self._closure(block1)
            self._consonant_()
            with self._if():
                self._pause_()
        self.ast['zifcme'] = self.last_node

        self.ast._define(
            ['zifcme'],
            []
        )

    @graken()
    def _jbocme_(self):
        with self._group():
            with self._if():
                self._zifcme_()

            def block1():
                with self._choice():
                    with self._option():
                        self._any_syllable_()
                    with self._option():
                        self._digit_()
                    self._error('no available options')
            self._closure(block1)
            with self._if():
                self._pause_()
        self.ast['jbocme'] = self.last_node

        self.ast._define(
            ['jbocme'],
            []
        )

    @graken()
    def _cmavo_(self):
        with self._group():
            with self._ifnot():
                self._cmevla_()
            with self._ifnot():
                self._CVCy_lujvo_()
            self._cmavo_form_()
            with self._if():
                self._post_word_()
        self.ast['cmavo'] = self.last_node

        self.ast._define(
            ['cmavo'],
            []
        )

    @graken()
    def _CVCy_lujvo_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._CVC_rafsi_()
                        self._y_()
                        with self._optional():
                            self._h_()

                        def block1():
                            self._initial_rafsi_()
                        self._closure(block1)
                        self._brivla_core_()
                with self._option():
                    with self._group():
                        self._stressed_CVC_rafsi_()
                        self._y_()
                        self._short_final_rafsi_()
                self._error('no available options')
        self.ast['CVCy_lujvo'] = self.last_node

        self.ast._define(
            ['CVCy_lujvo'],
            []
        )

    @graken()
    def _cmavo_form_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        with self._ifnot():
                            self._h_()
                        with self._ifnot():
                            self._cluster_()
                        self._onset_()

                        def block1():
                            self._nucleus_()
                            self._h_()
                        self._closure(block1)
                        with self._group():
                            with self._choice():
                                with self._option():
                                    with self._group():
                                        with self._ifnot():
                                            self._stressed_()
                                        self._nucleus_()
                                with self._option():
                                    with self._group():
                                        self._nucleus_()
                                        with self._ifnot():
                                            self._cluster_()
                                self._error('no available options')
                with self._option():

                    def block3():
                        self._y_()
                    self._positive_closure(block3)
                with self._option():
                    self._digit_()
                self._error('no available options')
        self.ast['cmavo_form'] = self.last_node

        self.ast._define(
            ['cmavo_form'],
            []
        )

    @graken()
    def _lujvo_(self):
        with self._group():
            with self._ifnot():
                self._gismu_()
            with self._ifnot():
                self._fuhivla_()
            with self._ifnot():
                self._cmavo_()

            def block1():
                self._initial_rafsi_()
            self._closure(block1)
            self._brivla_core_()
        self.ast['lujvo'] = self.last_node

        self.ast._define(
            ['lujvo'],
            []
        )

    @graken()
    def _brivla_core_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._fuhivla_()
                with self._option():
                    self._gismu_()
                with self._option():
                    self._CVV_final_rafsi_()
                with self._option():
                    with self._group():
                        self._stressed_initial_rafsi_()
                        self._short_final_rafsi_()
                self._error('no available options')
        self.ast['brivla_core'] = self.last_node

        self.ast._define(
            ['brivla_core'],
            []
        )

    @graken()
    def _stressed_initial_rafsi_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._stressed_extended_rafsi_()
                with self._option():
                    self._stressed_y_rafsi_()
                with self._option():
                    self._stressed_y_less_rafsi_()
                self._error('no available options')
        self.ast['stressed_initial_rafsi'] = self.last_node

        self.ast._define(
            ['stressed_initial_rafsi'],
            []
        )

    @graken()
    def _initial_rafsi_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._extended_rafsi_()
                with self._option():
                    self._y_rafsi_()
                with self._option():
                    with self._group():
                        with self._ifnot():
                            self._any_extended_rafsi_()
                        self._y_less_rafsi_()
                self._error('no available options')
        self.ast['initial_rafsi'] = self.last_node

        self.ast._define(
            ['initial_rafsi'],
            []
        )

    @graken()
    def _any_extended_rafsi_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._fuhivla_()
                with self._option():
                    self._extended_rafsi_()
                with self._option():
                    self._stressed_extended_rafsi_()
                self._error('no available options')
        self.ast['any_extended_rafsi'] = self.last_node

        self.ast._define(
            ['any_extended_rafsi'],
            []
        )

    @graken()
    def _fuhivla_(self):
        with self._group():
            self._fuhivla_head_()
            self._stressed_syllable_()

            def block1():
                self._consonantal_syllable_()
            self._closure(block1)
            self._final_syllable_()
        self.ast['fuhivla'] = self.last_node

        self.ast._define(
            ['fuhivla'],
            []
        )

    @graken()
    def _stressed_extended_rafsi_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._stressed_brivla_rafsi_()
                with self._option():
                    self._stressed_fuhivla_rafsi_()
                self._error('no available options')
        self.ast['stressed_extended_rafsi'] = self.last_node

        self.ast._define(
            ['stressed_extended_rafsi'],
            []
        )

    @graken()
    def _extended_rafsi_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._brivla_rafsi_()
                with self._option():
                    self._fuhivla_rafsi_()
                self._error('no available options')
        self.ast['extended_rafsi'] = self.last_node

        self.ast._define(
            ['extended_rafsi'],
            []
        )

    @graken()
    def _stressed_brivla_rafsi_(self):
        with self._group():
            with self._if():
                self._unstressed_syllable_()
            self._brivla_head_()
            self._stressed_syllable_()
            self._h_()
            self._y_()
        self.ast['stressed_brivla_rafsi'] = self.last_node

        self.ast._define(
            ['stressed_brivla_rafsi'],
            []
        )

    @graken()
    def _brivla_rafsi_(self):
        with self._group():
            with self._if():
                with self._group():
                    self._syllable_()

                    def block1():
                        self._consonantal_syllable_()
                    self._closure(block1)
                    self._syllable_()
            self._brivla_head_()
            self._h_()
            self._y_()
            with self._optional():
                self._h_()
        self.ast['brivla_rafsi'] = self.last_node

        self.ast._define(
            ['brivla_rafsi'],
            []
        )

    @graken()
    def _stressed_fuhivla_rafsi_(self):
        with self._group():
            self._fuhivla_head_()
            self._stressed_syllable_()
            with self._if():
                self._consonant_()
            self._onset_()
            self._y_()
        self.ast['stressed_fuhivla_rafsi'] = self.last_node

        self.ast._define(
            ['stressed_fuhivla_rafsi'],
            []
        )

    @graken()
    def _fuhivla_rafsi_(self):
        with self._group():
            with self._if():
                self._unstressed_syllable_()
            self._fuhivla_head_()
            with self._if():
                self._consonant_()
            self._onset_()
            self._y_()
            with self._optional():
                self._h_()
        self.ast['fuhivla_rafsi'] = self.last_node

        self.ast._define(
            ['fuhivla_rafsi'],
            []
        )

    @graken()
    def _fuhivla_head_(self):
        with self._group():
            with self._ifnot():
                self._rafsi_string_()
            self._brivla_head_()
        self.ast['fuhivla_head'] = self.last_node

        self.ast._define(
            ['fuhivla_head'],
            []
        )

    @graken()
    def _brivla_head_(self):
        with self._group():
            with self._ifnot():
                self._cmavo_()
            with self._ifnot():
                self._slinkuhi_()
            with self._ifnot():
                self._h_()
            with self._if():
                self._onset_()

            def block1():
                self._unstressed_syllable_()
            self._closure(block1)
        self.ast['brivla_head'] = self.last_node

        self.ast._define(
            ['brivla_head'],
            []
        )

    @graken()
    def _slinkuhi_(self):
        with self._group():
            self._consonant_()
            self._rafsi_string_()
        self.ast['slinkuhi'] = self.last_node

        self.ast._define(
            ['slinkuhi'],
            []
        )

    @graken()
    def _rafsi_string_(self):
        with self._group():

            def block1():
                self._y_less_rafsi_()
            self._closure(block1)
            with self._group():
                with self._choice():
                    with self._option():
                        self._gismu_()
                    with self._option():
                        self._CVV_final_rafsi_()
                    with self._option():
                        with self._group():
                            self._stressed_y_less_rafsi_()
                            self._short_final_rafsi_()
                    with self._option():
                        self._y_rafsi_()
                    with self._option():
                        self._stressed_y_rafsi_()
                    with self._option():
                        with self._group():
                            with self._optional():
                                self._stressed_y_less_rafsi_()
                            self._initial_pair_()
                            self._y_()
                    self._error('no available options')
        self.ast['rafsi_string'] = self.last_node

        self.ast._define(
            ['rafsi_string'],
            []
        )

    @graken()
    def _gismu_(self):
        with self._group():
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._initial_pair_()
                            self._stressed_vowel_()
                    with self._option():
                        with self._group():
                            self._consonant_()
                            self._stressed_vowel_()
                            self._consonant_()
                    self._error('no available options')
            with self._if():
                self._final_syllable_()
            self._consonant_()
            self._vowel_()
            with self._if():
                self._post_word_()
        self.ast['gismu'] = self.last_node

        self.ast._define(
            ['gismu'],
            []
        )

    @graken()
    def _CVV_final_rafsi_(self):
        with self._group():
            self._consonant_()
            self._stressed_vowel_()
            self._h_()
            with self._if():
                self._final_syllable_()
            self._vowel_()
            with self._if():
                self._post_word_()
        self.ast['CVV_final_rafsi'] = self.last_node

        self.ast._define(
            ['CVV_final_rafsi'],
            []
        )

    @graken()
    def _short_final_rafsi_(self):
        with self._group():
            with self._if():
                self._final_syllable_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._consonant_()
                            self._diphthong_()
                    with self._option():
                        with self._group():
                            self._initial_pair_()
                            self._vowel_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['short_final_rafsi'] = self.last_node

        self.ast._define(
            ['short_final_rafsi'],
            []
        )

    @graken()
    def _stressed_y_rafsi_(self):
        with self._group():
            with self._group():
                with self._choice():
                    with self._option():
                        self._stressed_long_rafsi_()
                    with self._option():
                        self._stressed_CVC_rafsi_()
                    self._error('no available options')
            self._y_()
        self.ast['stressed_y_rafsi'] = self.last_node

        self.ast._define(
            ['stressed_y_rafsi'],
            []
        )

    @graken()
    def _stressed_y_less_rafsi_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._stressed_CVC_rafsi_()
                        with self._ifnot():
                            self._y_()
                with self._option():
                    self._stressed_CCV_rafsi_()
                with self._option():
                    self._stressed_CVV_rafsi_()
                self._error('no available options')
        self.ast['stressed_y_less_rafsi'] = self.last_node

        self.ast._define(
            ['stressed_y_less_rafsi'],
            []
        )

    @graken()
    def _stressed_long_rafsi_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._initial_pair_()
                        self._stressed_vowel_()
                        self._consonant_()
                with self._option():
                    with self._group():
                        self._consonant_()
                        self._stressed_vowel_()
                        self._consonant_()
                        self._consonant_()
                self._error('no available options')
        self.ast['stressed_long_rafsi'] = self.last_node

        self.ast._define(
            ['stressed_long_rafsi'],
            []
        )

    @graken()
    def _stressed_CVC_rafsi_(self):
        with self._group():
            self._consonant_()
            self._stressed_vowel_()
            self._consonant_()
        self.ast['stressed_CVC_rafsi'] = self.last_node

        self.ast._define(
            ['stressed_CVC_rafsi'],
            []
        )

    @graken()
    def _stressed_CCV_rafsi_(self):
        with self._group():
            self._initial_pair_()
            self._stressed_vowel_()
        self.ast['stressed_CCV_rafsi'] = self.last_node

        self.ast._define(
            ['stressed_CCV_rafsi'],
            []
        )

    @graken()
    def _stressed_CVV_rafsi_(self):
        with self._group():
            self._consonant_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._unstressed_vowel_()
                            self._h_()
                            self._stressed_vowel_()
                    with self._option():
                        self._stressed_diphthong_()
                    self._error('no available options')
            with self._optional():
                self._r_hyphen_()
        self.ast['stressed_CVV_rafsi'] = self.last_node

        self.ast._define(
            ['stressed_CVV_rafsi'],
            []
        )

    @graken()
    def _y_rafsi_(self):
        with self._group():
            with self._group():
                with self._choice():
                    with self._option():
                        self._long_rafsi_()
                    with self._option():
                        self._CVC_rafsi_()
                    self._error('no available options')
            self._y_()
            with self._optional():
                self._h_()
        self.ast['y_rafsi'] = self.last_node

        self.ast._define(
            ['y_rafsi'],
            []
        )

    @graken()
    def _y_less_rafsi_(self):
        with self._group():
            with self._ifnot():
                self._y_rafsi_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._CVC_rafsi_()
                            with self._ifnot():
                                self._y_()
                    with self._option():
                        self._CCV_rafsi_()
                    with self._option():
                        self._CVV_rafsi_()
                    self._error('no available options')
            with self._ifnot():
                self._any_extended_rafsi_()
        self.ast['y_less_rafsi'] = self.last_node

        self.ast._define(
            ['y_less_rafsi'],
            []
        )

    @graken()
    def _long_rafsi_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._initial_pair_()
                        self._unstressed_vowel_()
                        self._consonant_()
                with self._option():
                    with self._group():
                        self._consonant_()
                        self._unstressed_vowel_()
                        self._consonant_()
                        self._consonant_()
                self._error('no available options')
        self.ast['long_rafsi'] = self.last_node

        self.ast._define(
            ['long_rafsi'],
            []
        )

    @graken()
    def _CVC_rafsi_(self):
        with self._group():
            self._consonant_()
            self._unstressed_vowel_()
            self._consonant_()
        self.ast['CVC_rafsi'] = self.last_node

        self.ast._define(
            ['CVC_rafsi'],
            []
        )

    @graken()
    def _CCV_rafsi_(self):
        with self._group():
            self._initial_pair_()
            self._unstressed_vowel_()
        self.ast['CCV_rafsi'] = self.last_node

        self.ast._define(
            ['CCV_rafsi'],
            []
        )

    @graken()
    def _CVV_rafsi_(self):
        with self._group():
            self._consonant_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._unstressed_vowel_()
                            self._h_()
                            self._unstressed_vowel_()
                    with self._option():
                        self._unstressed_diphthong_()
                    self._error('no available options')
            with self._optional():
                self._r_hyphen_()
        self.ast['CVV_rafsi'] = self.last_node

        self.ast._define(
            ['CVV_rafsi'],
            []
        )

    @graken()
    def _r_hyphen_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._r_()
                        with self._if():
                            self._consonant_()
                with self._option():
                    with self._group():
                        self._n_()
                        with self._if():
                            self._r_()
                self._error('no available options')
        self.ast['r_hyphen'] = self.last_node

        self.ast._define(
            ['r_hyphen'],
            []
        )

    @graken()
    def _final_syllable_(self):
        with self._group():
            self._onset_()
            with self._ifnot():
                self._y_()
            with self._ifnot():
                self._stressed_()
            self._nucleus_()
            with self._ifnot():
                self._cmevla_()
            with self._if():
                self._post_word_()
        self.ast['final_syllable'] = self.last_node

        self.ast._define(
            ['final_syllable'],
            []
        )

    @graken()
    def _stressed_syllable_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        with self._if():
                            self._stressed_()
                        self._syllable_()
                with self._option():
                    with self._group():
                        self._syllable_()
                        with self._if():
                            self._stress_()
                self._error('no available options')
        self.ast['stressed_syllable'] = self.last_node

        self.ast._define(
            ['stressed_syllable'],
            []
        )

    @graken()
    def _stressed_diphthong_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        with self._if():
                            self._stressed_()
                        self._diphthong_()
                with self._option():
                    with self._group():
                        self._diphthong_()
                        with self._if():
                            self._stress_()
                self._error('no available options')
        self.ast['stressed_diphthong'] = self.last_node

        self.ast._define(
            ['stressed_diphthong'],
            []
        )

    @graken()
    def _stressed_vowel_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        with self._if():
                            self._stressed_()
                        self._vowel_()
                with self._option():
                    with self._group():
                        self._vowel_()
                        with self._if():
                            self._stress_()
                self._error('no available options')
        self.ast['stressed_vowel'] = self.last_node

        self.ast._define(
            ['stressed_vowel'],
            []
        )

    @graken()
    def _unstressed_syllable_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        with self._ifnot():
                            self._stressed_()
                        self._syllable_()
                        with self._ifnot():
                            self._stress_()
                with self._option():
                    self._consonantal_syllable_()
                self._error('no available options')
        self.ast['unstressed_syllable'] = self.last_node

        self.ast._define(
            ['unstressed_syllable'],
            []
        )

    @graken()
    def _unstressed_diphthong_(self):
        with self._group():
            with self._ifnot():
                self._stressed_()
            self._diphthong_()
            with self._ifnot():
                self._stress_()
        self.ast['unstressed_diphthong'] = self.last_node

        self.ast._define(
            ['unstressed_diphthong'],
            []
        )

    @graken()
    def _unstressed_vowel_(self):
        with self._group():
            with self._ifnot():
                self._stressed_()
            self._vowel_()
            with self._ifnot():
                self._stress_()
        self.ast['unstressed_vowel'] = self.last_node

        self.ast._define(
            ['unstressed_vowel'],
            []
        )

    @graken()
    def _stress_(self):
        with self._group():

            def block1():
                self._consonant_()
            self._closure(block1)
            with self._optional():
                self._y_()
            self._syllable_()
            self._pause_()
        self.ast['stress'] = self.last_node

        self.ast._define(
            ['stress'],
            []
        )

    @graken()
    def _stressed_(self):
        with self._group():
            self._onset_()

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[AEIOU]')
        self.ast['stressed'] = self.last_node

        self.ast._define(
            ['stressed'],
            []
        )

    @graken()
    def _any_syllable_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._onset_()
                        self._nucleus_()
                        with self._optional():
                            self._coda_()
                with self._option():
                    self._consonantal_syllable_()
                self._error('no available options')
        self.ast['any_syllable'] = self.last_node

        self.ast._define(
            ['any_syllable'],
            []
        )

    @graken()
    def _syllable_(self):
        with self._group():
            self._onset_()
            with self._ifnot():
                self._y_()
            self._nucleus_()
            with self._optional():
                self._coda_()
        self.ast['syllable'] = self.last_node

        self.ast._define(
            ['syllable'],
            []
        )

    @graken()
    def _consonantal_syllable_(self):
        with self._group():
            self._consonant_()
            self._syllabic_()
            with self._if():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._consonantal_syllable_()
                        with self._option():
                            self._onset_()
                        self._error('no available options')
            with self._optional():
                self._consonant_()
                with self._if():
                    self._spaces_()
        self.ast['consonantal_syllable'] = self.last_node

        self.ast._define(
            ['consonantal_syllable'],
            []
        )

    @graken()
    def _coda_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        with self._ifnot():
                            self._any_syllable_()
                        self._consonant_()
                        with self._if():
                            self._any_syllable_()
                with self._option():
                    with self._group():
                        with self._optional():
                            self._syllabic_()
                        with self._optional():
                            self._consonant_()
                        with self._if():
                            self._pause_()
                self._error('no available options')
        self.ast['coda'] = self.last_node

        self.ast._define(
            ['coda'],
            []
        )

    @graken()
    def _onset_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._h_()
                with self._option():
                    with self._group():
                        with self._optional():
                            self._consonant_()
                        self._glide_()
                with self._option():
                    self._initial_()
                self._error('no available options')
        self.ast['onset'] = self.last_node

        self.ast._define(
            ['onset'],
            []
        )

    @graken()
    def _nucleus_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._vowel_()
                with self._option():
                    self._diphthong_()
                with self._option():
                    with self._group():
                        self._y_()
                        with self._ifnot():
                            self._nucleus_()
                self._error('no available options')
        self.ast['nucleus'] = self.last_node

        self.ast._define(
            ['nucleus'],
            []
        )

    @graken()
    def _glide_(self):
        with self._group():
            with self._group():
                with self._choice():
                    with self._option():
                        self._i_()
                    with self._option():
                        self._u_()
                    self._error('no available options')
            with self._if():
                self._nucleus_()
            with self._ifnot():
                self._glide_()
        self.ast['glide'] = self.last_node

        self.ast._define(
            ['glide'],
            []
        )

    @graken()
    def _diphthong_(self):
        with self._group():
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._a_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._a_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._e_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._o_()
                            self._i_()
                    self._error('no available options')
            with self._ifnot():
                self._nucleus_()
            with self._ifnot():
                self._glide_()
        self.ast['diphthong'] = self.last_node

        self.ast._define(
            ['diphthong'],
            []
        )

    @graken()
    def _vowel_(self):
        with self._group():
            with self._group():
                with self._choice():
                    with self._option():
                        self._a_()
                    with self._option():
                        self._e_()
                    with self._option():
                        self._i_()
                    with self._option():
                        self._o_()
                    with self._option():
                        self._u_()
                    self._error('no available options')
            with self._ifnot():
                self._nucleus_()
        self.ast['vowel'] = self.last_node

        self.ast._define(
            ['vowel'],
            []
        )

    @graken()
    def _a_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[aA]')
        self.ast['a'] = self.last_node

        self.ast._define(
            ['a'],
            []
        )

    @graken()
    def _e_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[eE]')
        self.ast['e'] = self.last_node

        self.ast._define(
            ['e'],
            []
        )

    @graken()
    def _i_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[iI]')
        self.ast['i'] = self.last_node

        self.ast._define(
            ['i'],
            []
        )

    @graken()
    def _o_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[oO]')
        self.ast['o'] = self.last_node

        self.ast._define(
            ['o'],
            []
        )

    @graken()
    def _u_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[uU]')
        self.ast['u'] = self.last_node

        self.ast._define(
            ['u'],
            []
        )

    @graken()
    def _y_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[yY]')
        self.ast['y'] = self.last_node

        self.ast._define(
            ['y'],
            []
        )

    @graken()
    def _cluster_(self):
        with self._group():
            self._consonant_()

            def block1():
                self._consonant_()
            self._positive_closure(block1)
        self.ast['cluster'] = self.last_node

        self.ast._define(
            ['cluster'],
            []
        )

    @graken()
    def _initial_pair_(self):
        with self._group():
            with self._if():
                self._initial_()
            self._consonant_()
            self._consonant_()
            with self._ifnot():
                self._consonant_()
        self.ast['initial_pair'] = self.last_node

        self.ast._define(
            ['initial_pair'],
            []
        )

    @graken()
    def _initial_(self):
        with self._group():
            with self._group():
                with self._choice():
                    with self._option():
                        self._affricate_()
                    with self._option():
                        with self._group():
                            with self._optional():
                                self._sibilant_()
                            with self._optional():
                                self._other_()
                            with self._optional():
                                self._liquid_()
                    self._error('no available options')
            with self._ifnot():
                self._consonant_()
            with self._ifnot():
                self._glide_()
        self.ast['initial'] = self.last_node

        self.ast._define(
            ['initial'],
            []
        )

    @graken()
    def _affricate_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._t_()
                        self._c_()
                with self._option():
                    with self._group():
                        self._t_()
                        self._s_()
                with self._option():
                    with self._group():
                        self._d_()
                        self._j_()
                with self._option():
                    with self._group():
                        self._d_()
                        self._z_()
                self._error('no available options')
        self.ast['affricate'] = self.last_node

        self.ast._define(
            ['affricate'],
            []
        )

    @graken()
    def _liquid_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._l_()
                with self._option():
                    self._r_()
                self._error('no available options')
        self.ast['liquid'] = self.last_node

        self.ast._define(
            ['liquid'],
            []
        )

    @graken()
    def _other_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._p_()
                with self._option():
                    with self._group():
                        self._t_()
                        with self._ifnot():
                            self._l_()
                with self._option():
                    self._k_()
                with self._option():
                    self._f_()
                with self._option():
                    self._x_()
                with self._option():
                    self._b_()
                with self._option():
                    with self._group():
                        self._d_()
                        with self._ifnot():
                            self._l_()
                with self._option():
                    self._g_()
                with self._option():
                    self._v_()
                with self._option():
                    self._m_()
                with self._option():
                    with self._group():
                        self._n_()
                        with self._ifnot():
                            self._liquid_()
                self._error('no available options')
        self.ast['other'] = self.last_node

        self.ast._define(
            ['other'],
            []
        )

    @graken()
    def _sibilant_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._c_()
                with self._option():
                    with self._group():
                        self._s_()
                        with self._ifnot():
                            self._x_()
                with self._option():
                    with self._group():
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._j_()
                                with self._option():
                                    self._z_()
                                self._error('no available options')
                        with self._ifnot():
                            self._n_()
                        with self._ifnot():
                            self._liquid_()
                self._error('no available options')
        self.ast['sibilant'] = self.last_node

        self.ast._define(
            ['sibilant'],
            []
        )

    @graken()
    def _consonant_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._voiced_()
                with self._option():
                    self._unvoiced_()
                with self._option():
                    self._syllabic_()
                self._error('no available options')
        self.ast['consonant'] = self.last_node

        self.ast._define(
            ['consonant'],
            []
        )

    @graken()
    def _syllabic_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._l_()
                with self._option():
                    self._m_()
                with self._option():
                    self._n_()
                with self._option():
                    self._r_()
                self._error('no available options')
        self.ast['syllabic'] = self.last_node

        self.ast._define(
            ['syllabic'],
            []
        )

    @graken()
    def _voiced_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._b_()
                with self._option():
                    self._d_()
                with self._option():
                    self._g_()
                with self._option():
                    self._j_()
                with self._option():
                    self._v_()
                with self._option():
                    self._z_()
                self._error('no available options')
        self.ast['voiced'] = self.last_node

        self.ast._define(
            ['voiced'],
            []
        )

    @graken()
    def _unvoiced_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._c_()
                with self._option():
                    self._f_()
                with self._option():
                    self._k_()
                with self._option():
                    self._p_()
                with self._option():
                    self._s_()
                with self._option():
                    self._t_()
                with self._option():
                    self._x_()
                self._error('no available options')
        self.ast['unvoiced'] = self.last_node

        self.ast._define(
            ['unvoiced'],
            []
        )

    @graken()
    def _l_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[lL]')
            with self._ifnot():
                self._h_()
            with self._ifnot():
                self._l_()
        self.ast['l'] = self.last_node

        self.ast._define(
            ['l'],
            []
        )

    @graken()
    def _m_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[mM]')
            with self._ifnot():
                self._h_()
            with self._ifnot():
                self._m_()
            with self._ifnot():
                self._z_()
        self.ast['m'] = self.last_node

        self.ast._define(
            ['m'],
            []
        )

    @graken()
    def _n_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[nN]')
            with self._ifnot():
                self._h_()
            with self._ifnot():
                self._n_()
            with self._ifnot():
                self._affricate_()
        self.ast['n'] = self.last_node

        self.ast._define(
            ['n'],
            []
        )

    @graken()
    def _r_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[rR]')
            with self._ifnot():
                self._h_()
            with self._ifnot():
                self._r_()
        self.ast['r'] = self.last_node

        self.ast._define(
            ['r'],
            []
        )

    @graken()
    def _b_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[bB]')
            with self._ifnot():
                self._h_()
            with self._ifnot():
                self._b_()
            with self._ifnot():
                self._unvoiced_()
        self.ast['b'] = self.last_node

        self.ast._define(
            ['b'],
            []
        )

    @graken()
    def _d_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[dD]')
            with self._ifnot():
                self._h_()
            with self._ifnot():
                self._d_()
            with self._ifnot():
                self._unvoiced_()
        self.ast['d'] = self.last_node

        self.ast._define(
            ['d'],
            []
        )

    @graken()
    def _g_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[gG]')
            with self._ifnot():
                self._h_()
            with self._ifnot():
                self._g_()
            with self._ifnot():
                self._unvoiced_()
        self.ast['g'] = self.last_node

        self.ast._define(
            ['g'],
            []
        )

    @graken()
    def _v_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[vV]')
            with self._ifnot():
                self._h_()
            with self._ifnot():
                self._v_()
            with self._ifnot():
                self._unvoiced_()
        self.ast['v'] = self.last_node

        self.ast._define(
            ['v'],
            []
        )

    @graken()
    def _j_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[jJ]')
            with self._ifnot():
                self._h_()
            with self._ifnot():
                self._j_()
            with self._ifnot():
                self._z_()
            with self._ifnot():
                self._unvoiced_()
        self.ast['j'] = self.last_node

        self.ast._define(
            ['j'],
            []
        )

    @graken()
    def _z_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[zZ]')
            with self._ifnot():
                self._h_()
            with self._ifnot():
                self._z_()
            with self._ifnot():
                self._j_()
            with self._ifnot():
                self._unvoiced_()
        self.ast['z'] = self.last_node

        self.ast._define(
            ['z'],
            []
        )

    @graken()
    def _s_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[sS]')
            with self._ifnot():
                self._h_()
            with self._ifnot():
                self._s_()
            with self._ifnot():
                self._c_()
            with self._ifnot():
                self._voiced_()
        self.ast['s'] = self.last_node

        self.ast._define(
            ['s'],
            []
        )

    @graken()
    def _c_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[cC]')
            with self._ifnot():
                self._h_()
            with self._ifnot():
                self._c_()
            with self._ifnot():
                self._s_()
            with self._ifnot():
                self._x_()
            with self._ifnot():
                self._voiced_()
        self.ast['c'] = self.last_node

        self.ast._define(
            ['c'],
            []
        )

    @graken()
    def _x_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[xX]')
            with self._ifnot():
                self._h_()
            with self._ifnot():
                self._x_()
            with self._ifnot():
                self._c_()
            with self._ifnot():
                self._k_()
            with self._ifnot():
                self._voiced_()
        self.ast['x'] = self.last_node

        self.ast._define(
            ['x'],
            []
        )

    @graken()
    def _k_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[kK]')
            with self._ifnot():
                self._h_()
            with self._ifnot():
                self._k_()
            with self._ifnot():
                self._x_()
            with self._ifnot():
                self._voiced_()
        self.ast['k'] = self.last_node

        self.ast._define(
            ['k'],
            []
        )

    @graken()
    def _f_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[fF]')
            with self._ifnot():
                self._h_()
            with self._ifnot():
                self._f_()
            with self._ifnot():
                self._voiced_()
        self.ast['f'] = self.last_node

        self.ast._define(
            ['f'],
            []
        )

    @graken()
    def _p_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[pP]')
            with self._ifnot():
                self._h_()
            with self._ifnot():
                self._p_()
            with self._ifnot():
                self._voiced_()
        self.ast['p'] = self.last_node

        self.ast._define(
            ['p'],
            []
        )

    @graken()
    def _t_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[tT]')
            with self._ifnot():
                self._h_()
            with self._ifnot():
                self._t_()
            with self._ifnot():
                self._voiced_()
        self.ast['t'] = self.last_node

        self.ast._define(
            ['t'],
            []
        )

    @graken()
    def _h_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r"['h]")
            with self._if():
                self._nucleus_()
        self.ast['h'] = self.last_node

        self.ast._define(
            ['h'],
            []
        )

    @graken()
    def _digit_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            self._pattern(r'[0123456789]')
            with self._ifnot():
                self._h_()
            with self._ifnot():
                self._nucleus_()
        self.ast['digit'] = self.last_node

        self.ast._define(
            ['digit'],
            []
        )

    @graken()
    def _post_word_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._pause_()
                with self._option():
                    with self._group():
                        with self._ifnot():
                            self._nucleus_()
                        self._lojban_word_()
                self._error('no available options')
        self.ast['post_word'] = self.last_node

        self.ast._define(
            ['post_word'],
            []
        )

    @graken()
    def _pause_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():

                        def block1():
                            self._comma_()
                        self._closure(block1)

                        def block2():
                            self._space_char_()
                        self._positive_closure(block2)
                with self._option():
                    self._EOF_()
                self._error('no available options')
        self.ast['pause'] = self.last_node

        self.ast._define(
            ['pause'],
            []
        )

    @graken()
    def _EOF_(self):
        with self._group():

            def block1():
                self._comma_()
            self._closure(block1)
            with self._ifnot():
                self._pattern(r'.')
        self.ast['EOF'] = self.last_node

        self.ast._define(
            ['EOF'],
            []
        )

    @graken()
    def _comma_(self):
        with self._group():
            self._pattern(r'[,]')
        self.ast['comma'] = self.last_node

        self.ast._define(
            ['comma'],
            []
        )

    @graken()
    def _non_lojban_word_(self):
        with self._group():
            with self._ifnot():
                self._lojban_word_()

            def block1():
                self._non_space_()
            self._positive_closure(block1)
        self.ast['non_lojban_word'] = self.last_node

        self.ast._define(
            ['non_lojban_word'],
            []
        )

    @graken()
    def _non_space_(self):
        with self._group():
            with self._ifnot():
                self._space_char_()
            self._pattern(r'.')
        self.ast['non_space'] = self.last_node

        self.ast._define(
            ['non_space'],
            []
        )

    @graken()
    def _space_char_(self):
        with self._group():
            self._pattern(r'[.\t\n\r?! ]')
        self.ast['space_char'] = self.last_node

        self.ast._define(
            ['space_char'],
            []
        )

    @graken()
    def _spaces_(self):
        with self._group():
            with self._ifnot():
                self._Y_()
            self._initial_spaces_()
        self.ast['spaces'] = self.last_node

        self.ast._define(
            ['spaces'],
            []
        )

    @graken()
    def _initial_spaces_(self):
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():

                        def block1():
                            with self._choice():
                                with self._option():
                                    with self._group():

                                        def block2():
                                            self._comma_()
                                        self._closure(block2)
                                        self._space_char_()
                                with self._option():
                                    with self._group():
                                        with self._ifnot():
                                            self._ybu_()
                                        self._Y_()
                                self._error('no available options')
                        self._positive_closure(block1)

                        with self._optional():
                            self._EOF_()
                with self._option():
                    self._EOF_()
                self._error('no available options')
        self.ast['initial_spaces'] = self.last_node

        self.ast._define(
            ['initial_spaces'],
            []
        )

    @graken()
    def _ybu_(self):
        with self._group():
            self._Y_()

            def block1():
                self._space_char_()
            self._closure(block1)
            self._BU_()
        self.ast['ybu'] = self.last_node

        self.ast._define(
            ['ybu'],
            []
        )

    @graken()
    def _A_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        self._a_()
                    with self._option():
                        self._e_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._i_()
                    with self._option():
                        self._o_()
                    with self._option():
                        self._u_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['A'] = self.last_node

        self.ast._define(
            ['A'],
            []
        )

    @graken()
    def _BAI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._d_()
                            self._u_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._i_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._a_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._i_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._u_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._u_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._u_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._i_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._i_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._i_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._i_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._i_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._u_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._i_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._a_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._o_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._a_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._a_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._u_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._a_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._a_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._b_()
                            self._a_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._i_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._e_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._i_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._a_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._u_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._i_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._a_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._a_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._a_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._a_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._e_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._u_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._a_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._b_()
                            self._a_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._a_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._i_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._a_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._o_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._a_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._a_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._i_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._a_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._u_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._i_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._a_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._b_()
                            self._a_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._a_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._a_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._a_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._b_()
                            self._e_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._i_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._a_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._a_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._a_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._i_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._e_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._o_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._i_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._i_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._a_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._u_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._e_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._a_()
                            self._i_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['BAI'] = self.last_node

        self.ast._define(
            ['BAI'],
            []
        )

    @graken()
    def _BAhE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._b_()
                            self._a_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._a_()
                            self._h_()
                            self._e_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['BAhE'] = self.last_node

        self.ast._define(
            ['BAhE'],
            []
        )

    @graken()
    def _BE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._b_()
                self._e_()
            with self._if():
                self._post_word_()
        self.ast['BE'] = self.last_node

        self.ast._define(
            ['BE'],
            []
        )

    @graken()
    def _BEI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._b_()
                self._e_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['BEI'] = self.last_node

        self.ast._define(
            ['BEI'],
            []
        )

    @graken()
    def _BEhO_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._b_()
                self._e_()
                self._h_()
                self._o_()
            with self._if():
                self._post_word_()
        self.ast['BEhO'] = self.last_node

        self.ast._define(
            ['BEhO'],
            []
        )

    @graken()
    def _BIhE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._b_()
                self._i_()
                self._h_()
                self._e_()
            with self._if():
                self._post_word_()
        self.ast['BIhE'] = self.last_node

        self.ast._define(
            ['BIhE'],
            []
        )

    @graken()
    def _BIhI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._m_()
                            self._i_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._b_()
                            self._i_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._b_()
                            self._i_()
                            self._h_()
                            self._i_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['BIhI'] = self.last_node

        self.ast._define(
            ['BIhI'],
            []
        )

    @graken()
    def _BO_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._b_()
                self._o_()
            with self._if():
                self._post_word_()
        self.ast['BO'] = self.last_node

        self.ast._define(
            ['BO'],
            []
        )

    @graken()
    def _BOI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._b_()
                self._o_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['BOI'] = self.last_node

        self.ast._define(
            ['BOI'],
            []
        )

    @graken()
    def _BU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._b_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['BU'] = self.last_node

        self.ast._define(
            ['BU'],
            []
        )

    @graken()
    def _BY_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._ybu_()
                with self._option():
                    with self._group():
                        with self._if():
                            self._cmavo_()
                        with self._group():
                            with self._choice():
                                with self._option():
                                    with self._group():
                                        self._j_()
                                        self._o_()
                                        self._h_()
                                        self._o_()
                                with self._option():
                                    with self._group():
                                        self._r_()
                                        self._u_()
                                        self._h_()
                                        self._o_()
                                with self._option():
                                    with self._group():
                                        self._g_()
                                        self._e_()
                                        self._h_()
                                        self._o_()
                                with self._option():
                                    with self._group():
                                        self._j_()
                                        self._e_()
                                        self._h_()
                                        self._o_()
                                with self._option():
                                    with self._group():
                                        self._l_()
                                        self._o_()
                                        self._h_()
                                        self._a_()
                                with self._option():
                                    with self._group():
                                        self._n_()
                                        self._a_()
                                        self._h_()
                                        self._a_()
                                with self._option():
                                    with self._group():
                                        self._s_()
                                        self._e_()
                                        self._h_()
                                        self._e_()
                                with self._option():
                                    with self._group():
                                        self._t_()
                                        self._o_()
                                        self._h_()
                                        self._a_()
                                with self._option():
                                    with self._group():
                                        self._g_()
                                        self._a_()
                                        self._h_()
                                        self._e_()
                                with self._option():
                                    with self._group():
                                        self._y_()
                                        self._h_()
                                        self._y_()
                                with self._option():
                                    with self._group():
                                        self._b_()
                                        self._y_()
                                with self._option():
                                    with self._group():
                                        self._c_()
                                        self._y_()
                                with self._option():
                                    with self._group():
                                        self._d_()
                                        self._y_()
                                with self._option():
                                    with self._group():
                                        self._f_()
                                        self._y_()
                                with self._option():
                                    with self._group():
                                        self._g_()
                                        self._y_()
                                with self._option():
                                    with self._group():
                                        self._j_()
                                        self._y_()
                                with self._option():
                                    with self._group():
                                        self._k_()
                                        self._y_()
                                with self._option():
                                    with self._group():
                                        self._l_()
                                        self._y_()
                                with self._option():
                                    with self._group():
                                        self._m_()
                                        self._y_()
                                with self._option():
                                    with self._group():
                                        self._n_()
                                        self._y_()
                                with self._option():
                                    with self._group():
                                        self._p_()
                                        self._y_()
                                with self._option():
                                    with self._group():
                                        self._r_()
                                        self._y_()
                                with self._option():
                                    with self._group():
                                        self._s_()
                                        self._y_()
                                with self._option():
                                    with self._group():
                                        self._t_()
                                        self._y_()
                                with self._option():
                                    with self._group():
                                        self._v_()
                                        self._y_()
                                with self._option():
                                    with self._group():
                                        self._x_()
                                        self._y_()
                                with self._option():
                                    with self._group():
                                        self._z_()
                                        self._y_()
                                self._error('no available options')
                        with self._if():
                            self._post_word_()
                self._error('no available options')
        self.ast['BY'] = self.last_node

        self.ast._define(
            ['BY'],
            []
        )

    @graken()
    def _CAhA_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._c_()
                            self._a_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._u_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._u_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._a_()
                            self._h_()
                            self._e_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['CAhA'] = self.last_node

        self.ast._define(
            ['CAhA'],
            []
        )

    @graken()
    def _CAI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._p_()
                            self._e_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._a_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._u_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._a_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._u_()
                            self._h_()
                            self._e_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['CAI'] = self.last_node

        self.ast._define(
            ['CAI'],
            []
        )

    @graken()
    def _CEI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._c_()
                self._e_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['CEI'] = self.last_node

        self.ast._define(
            ['CEI'],
            []
        )

    @graken()
    def _CEhE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._c_()
                self._e_()
                self._h_()
                self._e_()
            with self._if():
                self._post_word_()
        self.ast['CEhE'] = self.last_node

        self.ast._define(
            ['CEhE'],
            []
        )

    @graken()
    def _CO_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._c_()
                self._o_()
            with self._if():
                self._post_word_()
        self.ast['CO'] = self.last_node

        self.ast._define(
            ['CO'],
            []
        )

    @graken()
    def _COI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._j_()
                            self._u_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._o_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._i_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._a_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._u_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._e_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._o_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._e_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._e_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._u_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._e_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._b_()
                            self._e_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._e_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._i_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._i_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._i_()
                            self._h_()
                            self._o_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['COI'] = self.last_node

        self.ast._define(
            ['COI'],
            []
        )

    @graken()
    def _CU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._c_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['CU'] = self.last_node

        self.ast._define(
            ['CU'],
            []
        )

    @graken()
    def _CUhE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._c_()
                            self._u_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._a_()
                            self._u_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['CUhE'] = self.last_node

        self.ast._define(
            ['CUhE'],
            []
        )

    @graken()
    def _DAhO_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._d_()
                self._a_()
                self._h_()
                self._o_()
            with self._if():
                self._post_word_()
        self.ast['DAhO'] = self.last_node

        self.ast._define(
            ['DAhO'],
            []
        )

    @graken()
    def _DOI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._d_()
                self._o_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['DOI'] = self.last_node

        self.ast._define(
            ['DOI'],
            []
        )

    @graken()
    def _DOhU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._d_()
                self._o_()
                self._h_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['DOhU'] = self.last_node

        self.ast._define(
            ['DOhU'],
            []
        )

    @graken()
    def _FA_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._f_()
                            self._a_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._i_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._i_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['FA'] = self.last_node

        self.ast._define(
            ['FA'],
            []
        )

    @graken()
    def _FAhA_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._d_()
                            self._u_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._b_()
                            self._e_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._e_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._u_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._a_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._i_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._i_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._a_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._u_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._i_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._u_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._e_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._e_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._b_()
                            self._u_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._e_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._a_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._e_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._o_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._o_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._e_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._o_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._a_()
                            self._h_()
                            self._a_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['FAhA'] = self.last_node

        self.ast._define(
            ['FAhA'],
            []
        )

    @graken()
    def _FAhO_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._f_()
                self._a_()
                self._h_()
                self._o_()
            with self._if():
                self._post_word_()
        self.ast['FAhO'] = self.last_node

        self.ast._define(
            ['FAhO'],
            []
        )

    @graken()
    def _FEhE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._f_()
                self._e_()
                self._h_()
                self._e_()
            with self._if():
                self._post_word_()
        self.ast['FEhE'] = self.last_node

        self.ast._define(
            ['FEhE'],
            []
        )

    @graken()
    def _FEhU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._f_()
                self._e_()
                self._h_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['FEhU'] = self.last_node

        self.ast._define(
            ['FEhU'],
            []
        )

    @graken()
    def _FIhO_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._f_()
                self._i_()
                self._h_()
                self._o_()
            with self._if():
                self._post_word_()
        self.ast['FIhO'] = self.last_node

        self.ast._define(
            ['FIhO'],
            []
        )

    @graken()
    def _FOI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._f_()
                self._o_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['FOI'] = self.last_node

        self.ast._define(
            ['FOI'],
            []
        )

    @graken()
    def _FUhA_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._f_()
                self._u_()
                self._h_()
                self._a_()
            with self._if():
                self._post_word_()
        self.ast['FUhA'] = self.last_node

        self.ast._define(
            ['FUhA'],
            []
        )

    @graken()
    def _FUhE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._f_()
                self._u_()
                self._h_()
                self._e_()
            with self._if():
                self._post_word_()
        self.ast['FUhE'] = self.last_node

        self.ast._define(
            ['FUhE'],
            []
        )

    @graken()
    def _FUhO_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._f_()
                self._u_()
                self._h_()
                self._o_()
            with self._if():
                self._post_word_()
        self.ast['FUhO'] = self.last_node

        self.ast._define(
            ['FUhO'],
            []
        )

    @graken()
    def _GA_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._g_()
                            self._e_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._u_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['GA'] = self.last_node

        self.ast._define(
            ['GA'],
            []
        )

    @graken()
    def _GAhO_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._k_()
                            self._e_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._a_()
                            self._h_()
                            self._o_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['GAhO'] = self.last_node

        self.ast._define(
            ['GAhO'],
            []
        )

    @graken()
    def _GEhU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._g_()
                self._e_()
                self._h_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['GEhU'] = self.last_node

        self.ast._define(
            ['GEhU'],
            []
        )

    @graken()
    def _GI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._g_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['GI'] = self.last_node

        self.ast._define(
            ['GI'],
            []
        )

    @graken()
    def _GIhA_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._g_()
                            self._i_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._i_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._i_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._i_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._i_()
                            self._h_()
                            self._u_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['GIhA'] = self.last_node

        self.ast._define(
            ['GIhA'],
            []
        )

    @graken()
    def _GOI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._n_()
                            self._o_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._o_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._o_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._o_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._o_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['GOI'] = self.last_node

        self.ast._define(
            ['GOI'],
            []
        )

    @graken()
    def _GOhA_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._m_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._e_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._o_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._o_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._o_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._o_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._o_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._o_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._b_()
                            self._u_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._b_()
                            self._u_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._b_()
                            self._u_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._o_()
                            self._h_()
                            self._e_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['GOhA'] = self.last_node

        self.ast._define(
            ['GOhA'],
            []
        )

    @graken()
    def _GUhA_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._g_()
                            self._u_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._u_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._u_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._u_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._u_()
                            self._h_()
                            self._u_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['GUhA'] = self.last_node

        self.ast._define(
            ['GUhA'],
            []
        )

    @graken()
    def _I_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['I'] = self.last_node

        self.ast._define(
            ['I'],
            []
        )

    @graken()
    def _JA_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._j_()
                            self._e_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._u_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['JA'] = self.last_node

        self.ast._define(
            ['JA'],
            []
        )

    @graken()
    def _JAI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._j_()
                self._a_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['JAI'] = self.last_node

        self.ast._define(
            ['JAI'],
            []
        )

    @graken()
    def _JOhI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._j_()
                self._o_()
                self._h_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['JOhI'] = self.last_node

        self.ast._define(
            ['JOhI'],
            []
        )

    @graken()
    def _JOI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._f_()
                            self._a_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._i_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._o_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._e_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._o_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._u_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._o_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._u_()
                            self._h_()
                            self._e_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['JOI'] = self.last_node

        self.ast._define(
            ['JOI'],
            []
        )

    @graken()
    def _KE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._k_()
                self._e_()
            with self._if():
                self._post_word_()
        self.ast['KE'] = self.last_node

        self.ast._define(
            ['KE'],
            []
        )

    @graken()
    def _KEhE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._k_()
                self._e_()
                self._h_()
                self._e_()
            with self._if():
                self._post_word_()
        self.ast['KEhE'] = self.last_node

        self.ast._define(
            ['KEhE'],
            []
        )

    @graken()
    def _KEI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._k_()
                self._e_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['KEI'] = self.last_node

        self.ast._define(
            ['KEI'],
            []
        )

    @graken()
    def _KI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._k_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['KI'] = self.last_node

        self.ast._define(
            ['KI'],
            []
        )

    @graken()
    def _KOhA_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._d_()
                            self._a_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._a_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._i_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._i_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._e_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._e_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._e_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._o_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._i_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._a_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._i_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._o_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._o_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._o_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._o_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._o_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._o_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._o_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._o_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._o_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._o_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._o_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._o_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._o_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._o_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._o_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._o_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._i_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._e_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._u_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._o_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._e_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._o_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['KOhA'] = self.last_node

        self.ast._define(
            ['KOhA'],
            []
        )

    @graken()
    def _KU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._k_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['KU'] = self.last_node

        self.ast._define(
            ['KU'],
            []
        )

    @graken()
    def _KUhE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._k_()
                self._u_()
                self._h_()
                self._e_()
            with self._if():
                self._post_word_()
        self.ast['KUhE'] = self.last_node

        self.ast._define(
            ['KUhE'],
            []
        )

    @graken()
    def _KUhO_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._k_()
                self._u_()
                self._h_()
                self._o_()
            with self._if():
                self._post_word_()
        self.ast['KUhO'] = self.last_node

        self.ast._define(
            ['KUhO'],
            []
        )

    @graken()
    def _LA_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._l_()
                            self._a_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._a_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._a_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['LA'] = self.last_node

        self.ast._define(
            ['LA'],
            []
        )

    @graken()
    def _LAU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._c_()
                            self._e_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._a_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._a_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._a_()
                            self._u_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['LAU'] = self.last_node

        self.ast._define(
            ['LAU'],
            []
        )

    @graken()
    def _LAhE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._t_()
                            self._u_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._u_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._u_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._a_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._u_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._u_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._u_()
                            self._h_()
                            self._e_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['LAhE'] = self.last_node

        self.ast._define(
            ['LAhE'],
            []
        )

    @graken()
    def _LE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._l_()
                            self._e_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._o_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._e_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._o_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._e_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._o_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._e_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['LE'] = self.last_node

        self.ast._define(
            ['LE'],
            []
        )

    @graken()
    def _LEhU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._l_()
                self._e_()
                self._h_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['LEhU'] = self.last_node

        self.ast._define(
            ['LEhU'],
            []
        )

    @graken()
    def _LI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._m_()
                            self._e_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._i_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['LI'] = self.last_node

        self.ast._define(
            ['LI'],
            []
        )

    @graken()
    def _LIhU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._l_()
                self._i_()
                self._h_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['LIhU'] = self.last_node

        self.ast._define(
            ['LIhU'],
            []
        )

    @graken()
    def _LOhO_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._l_()
                self._o_()
                self._h_()
                self._o_()
            with self._if():
                self._post_word_()
        self.ast['LOhO'] = self.last_node

        self.ast._define(
            ['LOhO'],
            []
        )

    @graken()
    def _LOhU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._l_()
                self._o_()
                self._h_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['LOhU'] = self.last_node

        self.ast._define(
            ['LOhU'],
            []
        )

    @graken()
    def _LU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._l_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['LU'] = self.last_node

        self.ast._define(
            ['LU'],
            []
        )

    @graken()
    def _LUhU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._l_()
                self._u_()
                self._h_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['LUhU'] = self.last_node

        self.ast._define(
            ['LUhU'],
            []
        )

    @graken()
    def _MAhO_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._m_()
                self._a_()
                self._h_()
                self._o_()
            with self._if():
                self._post_word_()
        self.ast['MAhO'] = self.last_node

        self.ast._define(
            ['MAhO'],
            []
        )

    @graken()
    def _MAI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._m_()
                            self._o_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._a_()
                            self._i_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['MAI'] = self.last_node

        self.ast._define(
            ['MAI'],
            []
        )

    @graken()
    def _ME_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._m_()
                self._e_()
            with self._if():
                self._post_word_()
        self.ast['ME'] = self.last_node

        self.ast._define(
            ['ME'],
            []
        )

    @graken()
    def _MEhU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._m_()
                self._e_()
                self._h_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['MEhU'] = self.last_node

        self.ast._define(
            ['MEhU'],
            []
        )

    @graken()
    def _MOhE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._m_()
                self._o_()
                self._h_()
                self._e_()
            with self._if():
                self._post_word_()
        self.ast['MOhE'] = self.last_node

        self.ast._define(
            ['MOhE'],
            []
        )

    @graken()
    def _MOhI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._m_()
                self._o_()
                self._h_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['MOhI'] = self.last_node

        self.ast._define(
            ['MOhI'],
            []
        )

    @graken()
    def _MOI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._m_()
                            self._e_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._o_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._i_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._u_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._a_()
                            self._h_()
                            self._e_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['MOI'] = self.last_node

        self.ast._define(
            ['MOI'],
            []
        )

    @graken()
    def _NA_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._j_()
                            self._a_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._a_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['NA'] = self.last_node

        self.ast._define(
            ['NA'],
            []
        )

    @graken()
    def _NAI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._n_()
                self._a_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['NAI'] = self.last_node

        self.ast._define(
            ['NAI'],
            []
        )

    @graken()
    def _NAhE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._t_()
                            self._o_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._e_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._a_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._o_()
                            self._h_()
                            self._e_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['NAhE'] = self.last_node

        self.ast._define(
            ['NAhE'],
            []
        )

    @graken()
    def _NAhU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._n_()
                self._a_()
                self._h_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['NAhU'] = self.last_node

        self.ast._define(
            ['NAhU'],
            []
        )

    @graken()
    def _NIhE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._n_()
                self._i_()
                self._h_()
                self._e_()
            with self._if():
                self._post_word_()
        self.ast['NIhE'] = self.last_node

        self.ast._define(
            ['NIhE'],
            []
        )

    @graken()
    def _NIhO_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._n_()
                            self._i_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._o_()
                            self._h_()
                            self._i_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['NIhO'] = self.last_node

        self.ast._define(
            ['NIhO'],
            []
        )

    @graken()
    def _NOI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._v_()
                            self._o_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._o_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._o_()
                            self._i_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['NOI'] = self.last_node

        self.ast._define(
            ['NOI'],
            []
        )

    @graken()
    def _NU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._n_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._u_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._i_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._i_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._e_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._u_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._u_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._u_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._u_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._a_()
                            self._h_()
                            self._i_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['NU'] = self.last_node

        self.ast._define(
            ['NU'],
            []
        )

    @graken()
    def _NUhA_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._n_()
                self._u_()
                self._h_()
                self._a_()
            with self._if():
                self._post_word_()
        self.ast['NUhA'] = self.last_node

        self.ast._define(
            ['NUhA'],
            []
        )

    @graken()
    def _NUhI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._n_()
                self._u_()
                self._h_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['NUhI'] = self.last_node

        self.ast._define(
            ['NUhI'],
            []
        )

    @graken()
    def _NUhU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._n_()
                self._u_()
                self._h_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['NUhU'] = self.last_node

        self.ast._define(
            ['NUhU'],
            []
        )

    @graken()
    def _PA_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._d_()
                            self._a_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._e_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._a_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._a_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._e_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._a_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._i_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._i_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._a_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._e_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._i_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._i_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._e_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._a_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._a_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._a_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._o_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._i_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._u_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._u_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._a_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._o_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._o_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._o_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._o_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._o_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._u_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._e_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._a_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._i_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._u_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._x_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._a_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._o_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._x_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._b_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._o_()
                    with self._option():
                        self._digit_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['PA'] = self.last_node

        self.ast._define(
            ['PA'],
            []
        )

    @graken()
    def _PEhE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._p_()
                self._e_()
                self._h_()
                self._e_()
            with self._if():
                self._post_word_()
        self.ast['PEhE'] = self.last_node

        self.ast._define(
            ['PEhE'],
            []
        )

    @graken()
    def _PEhO_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._p_()
                self._e_()
                self._h_()
                self._o_()
            with self._if():
                self._post_word_()
        self.ast['PEhO'] = self.last_node

        self.ast._define(
            ['PEhO'],
            []
        )

    @graken()
    def _PU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._b_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._a_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['PU'] = self.last_node

        self.ast._define(
            ['PU'],
            []
        )

    @graken()
    def _RAhO_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._r_()
                self._a_()
                self._h_()
                self._o_()
            with self._if():
                self._post_word_()
        self.ast['RAhO'] = self.last_node

        self.ast._define(
            ['RAhO'],
            []
        )

    @graken()
    def _ROI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._r_()
                            self._e_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._o_()
                            self._i_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['ROI'] = self.last_node

        self.ast._define(
            ['ROI'],
            []
        )

    @graken()
    def _SA_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._s_()
                self._a_()
            with self._if():
                self._post_word_()
        self.ast['SA'] = self.last_node

        self.ast._define(
            ['SA'],
            []
        )

    @graken()
    def _SE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._s_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._x_()
                            self._e_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['SE'] = self.last_node

        self.ast._define(
            ['SE'],
            []
        )

    @graken()
    def _SEI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._s_()
                            self._e_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._i_()
                            self._h_()
                            self._o_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['SEI'] = self.last_node

        self.ast._define(
            ['SEI'],
            []
        )

    @graken()
    def _SEhU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._s_()
                self._e_()
                self._h_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['SEhU'] = self.last_node

        self.ast._define(
            ['SEhU'],
            []
        )

    @graken()
    def _SI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._s_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['SI'] = self.last_node

        self.ast._define(
            ['SI'],
            []
        )

    @graken()
    def _SOI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._s_()
                self._o_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['SOI'] = self.last_node

        self.ast._define(
            ['SOI'],
            []
        )

    @graken()
    def _SU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._s_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['SU'] = self.last_node

        self.ast._define(
            ['SU'],
            []
        )

    @graken()
    def _TAhE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._r_()
                            self._u_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._a_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._i_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._a_()
                            self._h_()
                            self._o_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['TAhE'] = self.last_node

        self.ast._define(
            ['TAhE'],
            []
        )

    @graken()
    def _TEhU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._t_()
                self._e_()
                self._h_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['TEhU'] = self.last_node

        self.ast._define(
            ['TEhU'],
            []
        )

    @graken()
    def _TEI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._t_()
                self._e_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['TEI'] = self.last_node

        self.ast._define(
            ['TEI'],
            []
        )

    @graken()
    def _TO_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._t_()
                            self._o_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._o_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['TO'] = self.last_node

        self.ast._define(
            ['TO'],
            []
        )

    @graken()
    def _TOI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._t_()
                self._o_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['TOI'] = self.last_node

        self.ast._define(
            ['TOI'],
            []
        )

    @graken()
    def _TUhE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._t_()
                self._u_()
                self._h_()
                self._e_()
            with self._if():
                self._post_word_()
        self.ast['TUhE'] = self.last_node

        self.ast._define(
            ['TUhE'],
            []
        )

    @graken()
    def _TUhU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._t_()
                self._u_()
                self._h_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['TUhU'] = self.last_node

        self.ast._define(
            ['TUhU'],
            []
        )

    @graken()
    def _UI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._i_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._i_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._a_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._u_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._i_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._i_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._a_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._i_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._o_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._o_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._e_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._o_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._u_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._e_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._u_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._a_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._u_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._a_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._i_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._i_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._u_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._u_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._a_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._a_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._a_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._i_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._e_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._o_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._e_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._u_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._o_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._o_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._u_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._e_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._i_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._e_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._u_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._i_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._u_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._b_()
                            self._a_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._a_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._a_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._u_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._i_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._a_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._e_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._a_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._e_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._u_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._u_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._a_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._a_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._i_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._b_()
                            self._a_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._u_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._o_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._o_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._a_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._a_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._u_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._a_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._a_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._e_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._a_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._a_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._e_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._a_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._a_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._a_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._a_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._o_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._b_()
                            self._i_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._i_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._a_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._i_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._u_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._i_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._i_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._o_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._e_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._o_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._o_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._o_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._o_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._o_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._e_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._e_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._u_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._u_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._a_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._a_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._o_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._b_()
                            self._e_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._i_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._e_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._e_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._u_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._k_()
                            self._i_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._x_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._e_()
                            self._h_()
                            self._e_()
                    with self._option():
                        with self._group():
                            self._b_()
                            self._u_()
                            self._h_()
                            self._o_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['UI'] = self.last_node

        self.ast._define(
            ['UI'],
            []
        )

    @graken()
    def _VA_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._v_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._u_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['VA'] = self.last_node

        self.ast._define(
            ['VA'],
            []
        )

    @graken()
    def _VAU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._v_()
                self._a_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['VAU'] = self.last_node

        self.ast._define(
            ['VAU'],
            []
        )

    @graken()
    def _VEI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._v_()
                self._e_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['VEI'] = self.last_node

        self.ast._define(
            ['VEI'],
            []
        )

    @graken()
    def _VEhO_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._v_()
                self._e_()
                self._h_()
                self._o_()
            with self._if():
                self._post_word_()
        self.ast['VEhO'] = self.last_node

        self.ast._define(
            ['VEhO'],
            []
        )

    @graken()
    def _VUhU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._g_()
                            self._e_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._u_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._i_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._e_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._u_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._u_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._j_()
                            self._u_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._g_()
                            self._e_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._a_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._a_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._t_()
                            self._e_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._u_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._a_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._n_()
                            self._e_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._e_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._f_()
                            self._e_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._a_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._e_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._r_()
                            self._i_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._a_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._i_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._s_()
                            self._i_()
                            self._h_()
                            self._i_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['VUhU'] = self.last_node

        self.ast._define(
            ['VUhU'],
            []
        )

    @graken()
    def _VEhA_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._v_()
                            self._e_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._e_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._e_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._e_()
                            self._h_()
                            self._e_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['VEhA'] = self.last_node

        self.ast._define(
            ['VEhA'],
            []
        )

    @graken()
    def _VIhA_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._v_()
                            self._i_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._i_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._i_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._v_()
                            self._i_()
                            self._h_()
                            self._e_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['VIhA'] = self.last_node

        self.ast._define(
            ['VIhA'],
            []
        )

    @graken()
    def _VUhO_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._v_()
                self._u_()
                self._h_()
                self._o_()
            with self._if():
                self._post_word_()
        self.ast['VUhO'] = self.last_node

        self.ast._define(
            ['VUhO'],
            []
        )

    @graken()
    def _XI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._x_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['XI'] = self.last_node

        self.ast._define(
            ['XI'],
            []
        )

    @graken()
    def _Y_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():

                def block1():
                    self._y_()
                self._positive_closure(block1)
            with self._if():
                self._post_word_()
        self.ast['Y'] = self.last_node

        self.ast._define(
            ['Y'],
            []
        )

    @graken()
    def _ZAhO_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._c_()
                            self._o_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._p_()
                            self._u_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._o_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._m_()
                            self._o_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._a_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._c_()
                            self._o_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._e_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._b_()
                            self._a_()
                            self._h_()
                            self._o_()
                    with self._option():
                        with self._group():
                            self._d_()
                            self._i_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._a_()
                            self._h_()
                            self._o_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['ZAhO'] = self.last_node

        self.ast._define(
            ['ZAhO'],
            []
        )

    @graken()
    def _ZEhA_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._z_()
                            self._e_()
                            self._h_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._e_()
                            self._h_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._e_()
                            self._h_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._e_()
                            self._h_()
                            self._e_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['ZEhA'] = self.last_node

        self.ast._define(
            ['ZEhA'],
            []
        )

    @graken()
    def _ZEI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._z_()
                self._e_()
                self._i_()
            with self._if():
                self._post_word_()
        self.ast['ZEI'] = self.last_node

        self.ast._define(
            ['ZEI'],
            []
        )

    @graken()
    def _ZI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._z_()
                            self._u_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._a_()
                    with self._option():
                        with self._group():
                            self._z_()
                            self._i_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['ZI'] = self.last_node

        self.ast._define(
            ['ZI'],
            []
        )

    @graken()
    def _ZIhE_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._z_()
                self._i_()
                self._h_()
                self._e_()
            with self._if():
                self._post_word_()
        self.ast['ZIhE'] = self.last_node

        self.ast._define(
            ['ZIhE'],
            []
        )

    @graken()
    def _ZO_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._z_()
                self._o_()
            with self._if():
                self._post_word_()
        self.ast['ZO'] = self.last_node

        self.ast._define(
            ['ZO'],
            []
        )

    @graken()
    def _ZOI_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._z_()
                            self._o_()
                            self._i_()
                    with self._option():
                        with self._group():
                            self._l_()
                            self._a_()
                            self._h_()
                            self._o_()
                    self._error('no available options')
            with self._if():
                self._post_word_()
        self.ast['ZOI'] = self.last_node

        self.ast._define(
            ['ZOI'],
            []
        )

    @graken()
    def _ZOhU_(self):
        with self._group():
            with self._if():
                self._cmavo_()
            with self._group():
                self._z_()
                self._o_()
                self._h_()
                self._u_()
            with self._if():
                self._post_word_()
        self.ast['ZOhU'] = self.last_node

        self.ast._define(
            ['ZOhU'],
            []
        )


class LojbanSemantics(object):
    def text(self, ast):
        return ast

    def intro_null(self, ast):
        return ast

    def text_part_2(self, ast):
        return ast

    def intro_si_clause(self, ast):
        return ast

    def faho_clause(self, ast):
        return ast

    def text_1(self, ast):
        return ast

    def paragraphs(self, ast):
        return ast

    def paragraph(self, ast):
        return ast

    def statement(self, ast):
        return ast

    def statement_1(self, ast):
        return ast

    def statement_2(self, ast):
        return ast

    def statement_3(self, ast):
        return ast

    def fragment(self, ast):
        return ast

    def prenex(self, ast):
        return ast

    def sentence(self, ast):
        return ast

    def sentence_sa(self, ast):
        return ast

    def sentence_start(self, ast):
        return ast

    def subsentence(self, ast):
        return ast

    def bridi_tail(self, ast):
        return ast

    def bridi_tail_sa(self, ast):
        return ast

    def bridi_tail_start(self, ast):
        return ast

    def bridi_tail_1(self, ast):
        return ast

    def bridi_tail_2(self, ast):
        return ast

    def bridi_tail_3(self, ast):
        return ast

    def gek_sentence(self, ast):
        return ast

    def tail_terms(self, ast):
        return ast

    def terms(self, ast):
        return ast

    def terms_1(self, ast):
        return ast

    def terms_2(self, ast):
        return ast

    def nonabs_terms(self, ast):
        return ast

    def nonabs_terms_1(self, ast):
        return ast

    def nonabs_terms_2(self, ast):
        return ast

    def pehe_sa(self, ast):
        return ast

    def cehe_sa(self, ast):
        return ast

    def term(self, ast):
        return ast

    def term_1(self, ast):
        return ast

    def abs_term(self, ast):
        return ast

    def abs_term_1(self, ast):
        return ast

    def abs_tag_term(self, ast):
        return ast

    def term_sa(self, ast):
        return ast

    def term_start(self, ast):
        return ast

    def termset(self, ast):
        return ast

    def gek_termset(self, ast):
        return ast

    def terms_gik_terms(self, ast):
        return ast

    def nonabs_termset(self, ast):
        return ast

    def nonabs_gek_termset(self, ast):
        return ast

    def nonabs_terms_gik_terms(self, ast):
        return ast

    def sumti(self, ast):
        return ast

    def sumti_1(self, ast):
        return ast

    def sumti_2(self, ast):
        return ast

    def sumti_3(self, ast):
        return ast

    def sumti_4(self, ast):
        return ast

    def sumti_5(self, ast):
        return ast

    def sumti_6(self, ast):
        return ast

    def li_clause(self, ast):
        return ast

    def sumti_tail(self, ast):
        return ast

    def sumti_tail_1(self, ast):
        return ast

    def relative_clauses(self, ast):
        return ast

    def relative_clause(self, ast):
        return ast

    def relative_clause_sa(self, ast):
        return ast

    def relative_clause_1(self, ast):
        return ast

    def relative_clause_start(self, ast):
        return ast

    def selbri(self, ast):
        return ast

    def selbri_1(self, ast):
        return ast

    def selbri_2(self, ast):
        return ast

    def selbri_3(self, ast):
        return ast

    def selbri_4(self, ast):
        return ast

    def selbri_5(self, ast):
        return ast

    def selbri_6(self, ast):
        return ast

    def tanru_unit(self, ast):
        return ast

    def tanru_unit_1(self, ast):
        return ast

    def tanru_unit_2(self, ast):
        return ast

    def linkargs(self, ast):
        return ast

    def linkargs_1(self, ast):
        return ast

    def linkargs_sa(self, ast):
        return ast

    def linkargs_start(self, ast):
        return ast

    def links(self, ast):
        return ast

    def links_1(self, ast):
        return ast

    def links_sa(self, ast):
        return ast

    def links_start(self, ast):
        return ast

    def quantifier(self, ast):
        return ast

    def mex(self, ast):
        return ast

    def mex_0(self, ast):
        return ast

    def mex_sa(self, ast):
        return ast

    def mex_start(self, ast):
        return ast

    def rp_clause(self, ast):
        return ast

    def mex_1(self, ast):
        return ast

    def mex_2(self, ast):
        return ast

    def mex_forethought(self, ast):
        return ast

    def fore_operands(self, ast):
        return ast

    def rp_expression(self, ast):
        return ast

    def rp_expression_tail(self, ast):
        return ast

    def operator(self, ast):
        return ast

    def operator_0(self, ast):
        return ast

    def operator_sa(self, ast):
        return ast

    def operator_start(self, ast):
        return ast

    def operator_1(self, ast):
        return ast

    def operator_2(self, ast):
        return ast

    def mex_operator(self, ast):
        return ast

    def operand(self, ast):
        return ast

    def operand_0(self, ast):
        return ast

    def operand_sa(self, ast):
        return ast

    def operand_start(self, ast):
        return ast

    def operand_1(self, ast):
        return ast

    def operand_2(self, ast):
        return ast

    def operand_3(self, ast):
        return ast

    def number(self, ast):
        return ast

    def lerfu_string(self, ast):
        return ast

    def lerfu_word(self, ast):
        return ast

    def ek(self, ast):
        return ast

    def gihek(self, ast):
        return ast

    def gihek_1(self, ast):
        return ast

    def gihek_sa(self, ast):
        return ast

    def jek(self, ast):
        return ast

    def joik(self, ast):
        return ast

    def interval(self, ast):
        return ast

    def joik_ek(self, ast):
        return ast

    def joik_ek_1(self, ast):
        return ast

    def joik_ek_sa(self, ast):
        return ast

    def joik_jek(self, ast):
        return ast

    def gek(self, ast):
        return ast

    def guhek(self, ast):
        return ast

    def gik(self, ast):
        return ast

    def tag(self, ast):
        return ast

    def stag(self, ast):
        return ast

    def tense_modal(self, ast):
        return ast

    def simple_tense_modal(self, ast):
        return ast

    def time(self, ast):
        return ast

    def time_offset(self, ast):
        return ast

    def space(self, ast):
        return ast

    def space_offset(self, ast):
        return ast

    def space_interval(self, ast):
        return ast

    def space_int_props(self, ast):
        return ast

    def interval_property(self, ast):
        return ast

    def free(self, ast):
        return ast

    def xi_clause(self, ast):
        return ast

    def vocative(self, ast):
        return ast

    def indicators(self, ast):
        return ast

    def indicator(self, ast):
        return ast

    def zei_clause(self, ast):
        return ast

    def zei_clause_no_pre(self, ast):
        return ast

    def bu_clause(self, ast):
        return ast

    def bu_clause_no_pre(self, ast):
        return ast

    def zei_tail(self, ast):
        return ast

    def bu_tail(self, ast):
        return ast

    def pre_zei_bu(self, ast):
        return ast

    def dot_star(self, ast):
        return ast

    def post_clause(self, ast):
        return ast

    def pre_clause(self, ast):
        return ast

    def any_word_SA_handling(self, ast):
        return ast

    def known_cmavo_SA(self, ast):
        return ast

    def su_clause(self, ast):
        return ast

    def si_clause(self, ast):
        return ast

    def erasable_clause(self, ast):
        return ast

    def sa_word(self, ast):
        return ast

    def si_word(self, ast):
        return ast

    def su_word(self, ast):
        return ast

    def BEhO_elidible(self, ast):
        return ast

    def BOI_elidible(self, ast):
        return ast

    def CU_elidible(self, ast):
        return ast

    def DOhU_elidible(self, ast):
        return ast

    def FEhU_elidible(self, ast):
        return ast

    def GEhU_elidible(self, ast):
        return ast

    def KEI_elidible(self, ast):
        return ast

    def KEhE_elidible(self, ast):
        return ast

    def KU_elidible(self, ast):
        return ast

    def KUhE_elidible(self, ast):
        return ast

    def KUhO_elidible(self, ast):
        return ast

    def LIhU_elidible(self, ast):
        return ast

    def LOhO_elidible(self, ast):
        return ast

    def LUhU_elidible(self, ast):
        return ast

    def MEhU_elidible(self, ast):
        return ast

    def NUhU_elidible(self, ast):
        return ast

    def SEhU_elidible(self, ast):
        return ast

    def TEhU_elidible(self, ast):
        return ast

    def TOI_elidible(self, ast):
        return ast

    def TUhU_elidible(self, ast):
        return ast

    def VAU_elidible(self, ast):
        return ast

    def VEhO_elidible(self, ast):
        return ast

    def BRIVLA_clause(self, ast):
        return ast

    def BRIVLA_pre(self, ast):
        return ast

    def BRIVLA_post(self, ast):
        return ast

    def CMEVLA_clause(self, ast):
        return ast

    def CMEVLA_pre(self, ast):
        return ast

    def CMEVLA_post(self, ast):
        return ast

    def CMAVO_clause(self, ast):
        return ast

    def CMAVO_pre(self, ast):
        return ast

    def CMAVO_post(self, ast):
        return ast

    def A_clause(self, ast):
        return ast

    def A_pre(self, ast):
        return ast

    def A_post(self, ast):
        return ast

    def BAI_clause(self, ast):
        return ast

    def BAI_pre(self, ast):
        return ast

    def BAI_post(self, ast):
        return ast

    def BAhE_clause(self, ast):
        return ast

    def BAhE_pre(self, ast):
        return ast

    def BAhE_post(self, ast):
        return ast

    def BE_clause(self, ast):
        return ast

    def BE_pre(self, ast):
        return ast

    def BE_post(self, ast):
        return ast

    def BEI_clause(self, ast):
        return ast

    def BEI_pre(self, ast):
        return ast

    def BEI_post(self, ast):
        return ast

    def BEhO_clause(self, ast):
        return ast

    def BEhO_pre(self, ast):
        return ast

    def BEhO_post(self, ast):
        return ast

    def BIhE_clause(self, ast):
        return ast

    def BIhE_pre(self, ast):
        return ast

    def BIhE_post(self, ast):
        return ast

    def BIhI_clause(self, ast):
        return ast

    def BIhI_pre(self, ast):
        return ast

    def BIhI_post(self, ast):
        return ast

    def BO_clause(self, ast):
        return ast

    def BO_pre(self, ast):
        return ast

    def BO_post(self, ast):
        return ast

    def BOI_clause(self, ast):
        return ast

    def BOI_pre(self, ast):
        return ast

    def BOI_post(self, ast):
        return ast

    def BU_clause(self, ast):
        return ast

    def BU_pre(self, ast):
        return ast

    def BU_post(self, ast):
        return ast

    def BY_clause(self, ast):
        return ast

    def BY_pre(self, ast):
        return ast

    def BY_post(self, ast):
        return ast

    def CAhA_clause(self, ast):
        return ast

    def CAhA_pre(self, ast):
        return ast

    def CAhA_post(self, ast):
        return ast

    def CAI_clause(self, ast):
        return ast

    def CAI_pre(self, ast):
        return ast

    def CAI_post(self, ast):
        return ast

    def CEI_clause(self, ast):
        return ast

    def CEI_pre(self, ast):
        return ast

    def CEI_post(self, ast):
        return ast

    def CEhE_clause(self, ast):
        return ast

    def CEhE_pre(self, ast):
        return ast

    def CEhE_post(self, ast):
        return ast

    def CO_clause(self, ast):
        return ast

    def CO_pre(self, ast):
        return ast

    def CO_post(self, ast):
        return ast

    def COI_clause(self, ast):
        return ast

    def COI_pre(self, ast):
        return ast

    def COI_post(self, ast):
        return ast

    def CU_clause(self, ast):
        return ast

    def CU_pre(self, ast):
        return ast

    def CU_post(self, ast):
        return ast

    def CUhE_clause(self, ast):
        return ast

    def CUhE_pre(self, ast):
        return ast

    def CUhE_post(self, ast):
        return ast

    def DAhO_clause(self, ast):
        return ast

    def DAhO_pre(self, ast):
        return ast

    def DAhO_post(self, ast):
        return ast

    def DOI_clause(self, ast):
        return ast

    def DOI_pre(self, ast):
        return ast

    def DOI_post(self, ast):
        return ast

    def DOhU_clause(self, ast):
        return ast

    def DOhU_pre(self, ast):
        return ast

    def DOhU_post(self, ast):
        return ast

    def FA_clause(self, ast):
        return ast

    def FA_pre(self, ast):
        return ast

    def FA_post(self, ast):
        return ast

    def FAhA_clause(self, ast):
        return ast

    def FAhA_pre(self, ast):
        return ast

    def FAhA_post(self, ast):
        return ast

    def FAhO_clause(self, ast):
        return ast

    def FEhE_clause(self, ast):
        return ast

    def FEhE_pre(self, ast):
        return ast

    def FEhE_post(self, ast):
        return ast

    def FEhU_clause(self, ast):
        return ast

    def FEhU_pre(self, ast):
        return ast

    def FEhU_post(self, ast):
        return ast

    def FIhO_clause(self, ast):
        return ast

    def FIhO_pre(self, ast):
        return ast

    def FIhO_post(self, ast):
        return ast

    def FOI_clause(self, ast):
        return ast

    def FOI_pre(self, ast):
        return ast

    def FOI_post(self, ast):
        return ast

    def FUhA_clause(self, ast):
        return ast

    def FUhA_pre(self, ast):
        return ast

    def FUhA_post(self, ast):
        return ast

    def FUhE_clause(self, ast):
        return ast

    def FUhE_pre(self, ast):
        return ast

    def FUhE_post(self, ast):
        return ast

    def FUhO_clause(self, ast):
        return ast

    def FUhO_pre(self, ast):
        return ast

    def FUhO_post(self, ast):
        return ast

    def GA_clause(self, ast):
        return ast

    def GA_pre(self, ast):
        return ast

    def GA_post(self, ast):
        return ast

    def GAhO_clause(self, ast):
        return ast

    def GAhO_pre(self, ast):
        return ast

    def GAhO_post(self, ast):
        return ast

    def GEhU_clause(self, ast):
        return ast

    def GEhU_pre(self, ast):
        return ast

    def GEhU_post(self, ast):
        return ast

    def GI_clause(self, ast):
        return ast

    def GI_pre(self, ast):
        return ast

    def GI_post(self, ast):
        return ast

    def GIhA_clause(self, ast):
        return ast

    def GIhA_pre(self, ast):
        return ast

    def GIhA_post(self, ast):
        return ast

    def GOI_clause(self, ast):
        return ast

    def GOI_pre(self, ast):
        return ast

    def GOI_post(self, ast):
        return ast

    def GOhA_clause(self, ast):
        return ast

    def GOhA_pre(self, ast):
        return ast

    def GOhA_post(self, ast):
        return ast

    def GUhA_clause(self, ast):
        return ast

    def GUhA_pre(self, ast):
        return ast

    def GUhA_post(self, ast):
        return ast

    def I_clause(self, ast):
        return ast

    def I_pre(self, ast):
        return ast

    def I_post(self, ast):
        return ast

    def JA_clause(self, ast):
        return ast

    def JA_pre(self, ast):
        return ast

    def JA_post(self, ast):
        return ast

    def JAI_clause(self, ast):
        return ast

    def JAI_pre(self, ast):
        return ast

    def JAI_post(self, ast):
        return ast

    def JOhI_clause(self, ast):
        return ast

    def JOhI_pre(self, ast):
        return ast

    def JOhI_post(self, ast):
        return ast

    def JOI_clause(self, ast):
        return ast

    def JOI_pre(self, ast):
        return ast

    def JOI_post(self, ast):
        return ast

    def KE_clause(self, ast):
        return ast

    def KE_pre(self, ast):
        return ast

    def KE_post(self, ast):
        return ast

    def KEhE_clause(self, ast):
        return ast

    def KEhE_pre(self, ast):
        return ast

    def KEhE_post(self, ast):
        return ast

    def KEI_clause(self, ast):
        return ast

    def KEI_pre(self, ast):
        return ast

    def KEI_post(self, ast):
        return ast

    def KI_clause(self, ast):
        return ast

    def KI_pre(self, ast):
        return ast

    def KI_post(self, ast):
        return ast

    def KOhA_clause(self, ast):
        return ast

    def KOhA_pre(self, ast):
        return ast

    def KOhA_post(self, ast):
        return ast

    def KU_clause(self, ast):
        return ast

    def KU_pre(self, ast):
        return ast

    def KU_post(self, ast):
        return ast

    def KUhE_clause(self, ast):
        return ast

    def KUhE_pre(self, ast):
        return ast

    def KUhE_post(self, ast):
        return ast

    def KUhO_clause(self, ast):
        return ast

    def KUhO_pre(self, ast):
        return ast

    def KUhO_post(self, ast):
        return ast

    def LA_clause(self, ast):
        return ast

    def LA_pre(self, ast):
        return ast

    def LA_post(self, ast):
        return ast

    def LAU_clause(self, ast):
        return ast

    def LAU_pre(self, ast):
        return ast

    def LAU_post(self, ast):
        return ast

    def LAhE_clause(self, ast):
        return ast

    def LAhE_pre(self, ast):
        return ast

    def LAhE_post(self, ast):
        return ast

    def LE_clause(self, ast):
        return ast

    def LE_pre(self, ast):
        return ast

    def LE_post(self, ast):
        return ast

    def LEhU_clause(self, ast):
        return ast

    def LEhU_pre(self, ast):
        return ast

    def LEhU_post(self, ast):
        return ast

    def LI_clause(self, ast):
        return ast

    def LI_pre(self, ast):
        return ast

    def LI_post(self, ast):
        return ast

    def LIhU_clause(self, ast):
        return ast

    def LIhU_pre(self, ast):
        return ast

    def LIhU_post(self, ast):
        return ast

    def LOhO_clause(self, ast):
        return ast

    def LOhO_pre(self, ast):
        return ast

    def LOhO_post(self, ast):
        return ast

    def LOhU_clause(self, ast):
        return ast

    def LOhU_pre(self, ast):
        return ast

    def LOhU_post(self, ast):
        return ast

    def LU_clause(self, ast):
        return ast

    def LU_pre(self, ast):
        return ast

    def LU_post(self, ast):
        return ast

    def LUhU_clause(self, ast):
        return ast

    def LUhU_pre(self, ast):
        return ast

    def LUhU_post(self, ast):
        return ast

    def MAhO_clause(self, ast):
        return ast

    def MAhO_pre(self, ast):
        return ast

    def MAhO_post(self, ast):
        return ast

    def MAI_clause(self, ast):
        return ast

    def MAI_pre(self, ast):
        return ast

    def MAI_post(self, ast):
        return ast

    def ME_clause(self, ast):
        return ast

    def ME_pre(self, ast):
        return ast

    def ME_post(self, ast):
        return ast

    def MEhU_clause(self, ast):
        return ast

    def MEhU_pre(self, ast):
        return ast

    def MEhU_post(self, ast):
        return ast

    def MOhE_clause(self, ast):
        return ast

    def MOhE_pre(self, ast):
        return ast

    def MOhE_post(self, ast):
        return ast

    def MOhI_clause(self, ast):
        return ast

    def MOhI_pre(self, ast):
        return ast

    def MOhI_post(self, ast):
        return ast

    def MOI_clause(self, ast):
        return ast

    def MOI_pre(self, ast):
        return ast

    def MOI_post(self, ast):
        return ast

    def NA_clause(self, ast):
        return ast

    def NA_pre(self, ast):
        return ast

    def NA_post(self, ast):
        return ast

    def NAI_clause(self, ast):
        return ast

    def NAI_pre(self, ast):
        return ast

    def NAI_post(self, ast):
        return ast

    def NAhE_clause(self, ast):
        return ast

    def NAhE_pre(self, ast):
        return ast

    def NAhE_post(self, ast):
        return ast

    def NAhU_clause(self, ast):
        return ast

    def NAhU_pre(self, ast):
        return ast

    def NAhU_post(self, ast):
        return ast

    def NIhE_clause(self, ast):
        return ast

    def NIhE_pre(self, ast):
        return ast

    def NIhE_post(self, ast):
        return ast

    def NIhO_clause(self, ast):
        return ast

    def NIhO_pre(self, ast):
        return ast

    def NIhO_post(self, ast):
        return ast

    def NOI_clause(self, ast):
        return ast

    def NOI_pre(self, ast):
        return ast

    def NOI_post(self, ast):
        return ast

    def NU_clause(self, ast):
        return ast

    def NU_pre(self, ast):
        return ast

    def NU_post(self, ast):
        return ast

    def NUhA_clause(self, ast):
        return ast

    def NUhA_pre(self, ast):
        return ast

    def NUhA_post(self, ast):
        return ast

    def NUhI_clause(self, ast):
        return ast

    def NUhI_pre(self, ast):
        return ast

    def NUhI_post(self, ast):
        return ast

    def NUhU_clause(self, ast):
        return ast

    def NUhU_pre(self, ast):
        return ast

    def NUhU_post(self, ast):
        return ast

    def PA_clause(self, ast):
        return ast

    def PA_pre(self, ast):
        return ast

    def PA_post(self, ast):
        return ast

    def PEhE_clause(self, ast):
        return ast

    def PEhE_pre(self, ast):
        return ast

    def PEhE_post(self, ast):
        return ast

    def PEhO_clause(self, ast):
        return ast

    def PEhO_pre(self, ast):
        return ast

    def PEhO_post(self, ast):
        return ast

    def PU_clause(self, ast):
        return ast

    def PU_pre(self, ast):
        return ast

    def PU_post(self, ast):
        return ast

    def RAhO_clause(self, ast):
        return ast

    def RAhO_pre(self, ast):
        return ast

    def RAhO_post(self, ast):
        return ast

    def ROI_clause(self, ast):
        return ast

    def ROI_pre(self, ast):
        return ast

    def ROI_post(self, ast):
        return ast

    def SA_clause(self, ast):
        return ast

    def SA_pre(self, ast):
        return ast

    def SA_post(self, ast):
        return ast

    def SE_clause(self, ast):
        return ast

    def SE_pre(self, ast):
        return ast

    def SE_post(self, ast):
        return ast

    def SEI_clause(self, ast):
        return ast

    def SEI_pre(self, ast):
        return ast

    def SEI_post(self, ast):
        return ast

    def SEhU_clause(self, ast):
        return ast

    def SEhU_pre(self, ast):
        return ast

    def SEhU_post(self, ast):
        return ast

    def SI_clause(self, ast):
        return ast

    def SOI_clause(self, ast):
        return ast

    def SOI_pre(self, ast):
        return ast

    def SOI_post(self, ast):
        return ast

    def SU_clause(self, ast):
        return ast

    def SU_pre(self, ast):
        return ast

    def SU_post(self, ast):
        return ast

    def TAhE_clause(self, ast):
        return ast

    def TAhE_pre(self, ast):
        return ast

    def TAhE_post(self, ast):
        return ast

    def TEhU_clause(self, ast):
        return ast

    def TEhU_pre(self, ast):
        return ast

    def TEhU_post(self, ast):
        return ast

    def TEI_clause(self, ast):
        return ast

    def TEI_pre(self, ast):
        return ast

    def TEI_post(self, ast):
        return ast

    def TO_clause(self, ast):
        return ast

    def TO_pre(self, ast):
        return ast

    def TO_post(self, ast):
        return ast

    def TOI_clause(self, ast):
        return ast

    def TOI_pre(self, ast):
        return ast

    def TOI_post(self, ast):
        return ast

    def TUhE_clause(self, ast):
        return ast

    def TUhE_pre(self, ast):
        return ast

    def TUhE_post(self, ast):
        return ast

    def TUhU_clause(self, ast):
        return ast

    def TUhU_pre(self, ast):
        return ast

    def TUhU_post(self, ast):
        return ast

    def UI_clause(self, ast):
        return ast

    def UI_pre(self, ast):
        return ast

    def UI_post(self, ast):
        return ast

    def VA_clause(self, ast):
        return ast

    def VA_pre(self, ast):
        return ast

    def VA_post(self, ast):
        return ast

    def VAU_clause(self, ast):
        return ast

    def VAU_pre(self, ast):
        return ast

    def VAU_post(self, ast):
        return ast

    def VEI_clause(self, ast):
        return ast

    def VEI_pre(self, ast):
        return ast

    def VEI_post(self, ast):
        return ast

    def VEhO_clause(self, ast):
        return ast

    def VEhO_pre(self, ast):
        return ast

    def VEhO_post(self, ast):
        return ast

    def VUhU_clause(self, ast):
        return ast

    def VUhU_pre(self, ast):
        return ast

    def VUhU_post(self, ast):
        return ast

    def VEhA_clause(self, ast):
        return ast

    def VEhA_pre(self, ast):
        return ast

    def VEhA_post(self, ast):
        return ast

    def VIhA_clause(self, ast):
        return ast

    def VIhA_pre(self, ast):
        return ast

    def VIhA_post(self, ast):
        return ast

    def VUhO_clause(self, ast):
        return ast

    def VUhO_pre(self, ast):
        return ast

    def VUhO_post(self, ast):
        return ast

    def XI_clause(self, ast):
        return ast

    def XI_pre(self, ast):
        return ast

    def XI_post(self, ast):
        return ast

    def ZAhO_clause(self, ast):
        return ast

    def ZAhO_pre(self, ast):
        return ast

    def ZAhO_post(self, ast):
        return ast

    def ZEhA_clause(self, ast):
        return ast

    def ZEhA_pre(self, ast):
        return ast

    def ZEhA_post(self, ast):
        return ast

    def ZEI_clause(self, ast):
        return ast

    def ZEI_pre(self, ast):
        return ast

    def ZEI_post(self, ast):
        return ast

    def ZI_clause(self, ast):
        return ast

    def ZI_pre(self, ast):
        return ast

    def ZI_post(self, ast):
        return ast

    def ZIhE_clause(self, ast):
        return ast

    def ZIhE_pre(self, ast):
        return ast

    def ZIhE_post(self, ast):
        return ast

    def ZO_clause(self, ast):
        return ast

    def ZO_pre(self, ast):
        return ast

    def ZO_post(self, ast):
        return ast

    def ZOI_clause(self, ast):
        return ast

    def ZOI_pre(self, ast):
        return ast

    def ZOI_post(self, ast):
        return ast

    def ZOhU_clause(self, ast):
        return ast

    def ZOhU_pre(self, ast):
        return ast

    def ZOhU_post(self, ast):
        return ast

    def morphology(self, ast):
        return ast

    def CMEVLA(self, ast):
        return ast

    def CMAVO(self, ast):
        return ast

    def vlatai(self, ast):
        return ast

    def vlatai_spaces(self, ast):
        return ast

    def vlatai_bu_clause(self, ast):
        return ast

    def vlatai_zei_clause(self, ast):
        return ast

    def vlatai_bu_tail(self, ast):
        return ast

    def vlatai_zei_tail(self, ast):
        return ast

    def vlatai_BU_clause(self, ast):
        return ast

    def vlatai_ZEI_clause(self, ast):
        return ast

    def vlatai_pre_zei_bu(self, ast):
        return ast

    def vlatai_any_word(self, ast):
        return ast

    def vlatai_lojban_word(self, ast):
        return ast

    def non_bu_zei_cmavo(self, ast):
        return ast

    def cmavo_including_y(self, ast):
        return ast

    def lojban_word(self, ast):
        return ast

    def BRIVLA(self, ast):
        return ast

    def gismu_2(self, ast):
        return ast

    def any_word(self, ast):
        return ast

    def zoi_open(self, ast):
        return ast

    def zoi_word(self, ast):
        return ast

    def zoi_close(self, ast):
        return ast

    def cmevla(self, ast):
        return ast

    def zifcme(self, ast):
        return ast

    def jbocme(self, ast):
        return ast

    def cmavo(self, ast):
        return ast

    def CVCy_lujvo(self, ast):
        return ast

    def cmavo_form(self, ast):
        return ast

    def lujvo(self, ast):
        return ast

    def brivla_core(self, ast):
        return ast

    def stressed_initial_rafsi(self, ast):
        return ast

    def initial_rafsi(self, ast):
        return ast

    def any_extended_rafsi(self, ast):
        return ast

    def fuhivla(self, ast):
        return ast

    def stressed_extended_rafsi(self, ast):
        return ast

    def extended_rafsi(self, ast):
        return ast

    def stressed_brivla_rafsi(self, ast):
        return ast

    def brivla_rafsi(self, ast):
        return ast

    def stressed_fuhivla_rafsi(self, ast):
        return ast

    def fuhivla_rafsi(self, ast):
        return ast

    def fuhivla_head(self, ast):
        return ast

    def brivla_head(self, ast):
        return ast

    def slinkuhi(self, ast):
        return ast

    def rafsi_string(self, ast):
        return ast

    def gismu(self, ast):
        return ast

    def CVV_final_rafsi(self, ast):
        return ast

    def short_final_rafsi(self, ast):
        return ast

    def stressed_y_rafsi(self, ast):
        return ast

    def stressed_y_less_rafsi(self, ast):
        return ast

    def stressed_long_rafsi(self, ast):
        return ast

    def stressed_CVC_rafsi(self, ast):
        return ast

    def stressed_CCV_rafsi(self, ast):
        return ast

    def stressed_CVV_rafsi(self, ast):
        return ast

    def y_rafsi(self, ast):
        return ast

    def y_less_rafsi(self, ast):
        return ast

    def long_rafsi(self, ast):
        return ast

    def CVC_rafsi(self, ast):
        return ast

    def CCV_rafsi(self, ast):
        return ast

    def CVV_rafsi(self, ast):
        return ast

    def r_hyphen(self, ast):
        return ast

    def final_syllable(self, ast):
        return ast

    def stressed_syllable(self, ast):
        return ast

    def stressed_diphthong(self, ast):
        return ast

    def stressed_vowel(self, ast):
        return ast

    def unstressed_syllable(self, ast):
        return ast

    def unstressed_diphthong(self, ast):
        return ast

    def unstressed_vowel(self, ast):
        return ast

    def stress(self, ast):
        return ast

    def stressed(self, ast):
        return ast

    def any_syllable(self, ast):
        return ast

    def syllable(self, ast):
        return ast

    def consonantal_syllable(self, ast):
        return ast

    def coda(self, ast):
        return ast

    def onset(self, ast):
        return ast

    def nucleus(self, ast):
        return ast

    def glide(self, ast):
        return ast

    def diphthong(self, ast):
        return ast

    def vowel(self, ast):
        return ast

    def a(self, ast):
        return ast

    def e(self, ast):
        return ast

    def i(self, ast):
        return ast

    def o(self, ast):
        return ast

    def u(self, ast):
        return ast

    def y(self, ast):
        return ast

    def cluster(self, ast):
        return ast

    def initial_pair(self, ast):
        return ast

    def initial(self, ast):
        return ast

    def affricate(self, ast):
        return ast

    def liquid(self, ast):
        return ast

    def other(self, ast):
        return ast

    def sibilant(self, ast):
        return ast

    def consonant(self, ast):
        return ast

    def syllabic(self, ast):
        return ast

    def voiced(self, ast):
        return ast

    def unvoiced(self, ast):
        return ast

    def l(self, ast):
        return ast

    def m(self, ast):
        return ast

    def n(self, ast):
        return ast

    def r(self, ast):
        return ast

    def b(self, ast):
        return ast

    def d(self, ast):
        return ast

    def g(self, ast):
        return ast

    def v(self, ast):
        return ast

    def j(self, ast):
        return ast

    def z(self, ast):
        return ast

    def s(self, ast):
        return ast

    def c(self, ast):
        return ast

    def x(self, ast):
        return ast

    def k(self, ast):
        return ast

    def f(self, ast):
        return ast

    def p(self, ast):
        return ast

    def t(self, ast):
        return ast

    def h(self, ast):
        return ast

    def digit(self, ast):
        return ast

    def post_word(self, ast):
        return ast

    def pause(self, ast):
        return ast

    def EOF(self, ast):
        return ast

    def comma(self, ast):
        return ast

    def non_lojban_word(self, ast):
        return ast

    def non_space(self, ast):
        return ast

    def space_char(self, ast):
        return ast

    def spaces(self, ast):
        return ast

    def initial_spaces(self, ast):
        return ast

    def ybu(self, ast):
        return ast

    def A(self, ast):
        return ast

    def BAI(self, ast):
        return ast

    def BAhE(self, ast):
        return ast

    def BE(self, ast):
        return ast

    def BEI(self, ast):
        return ast

    def BEhO(self, ast):
        return ast

    def BIhE(self, ast):
        return ast

    def BIhI(self, ast):
        return ast

    def BO(self, ast):
        return ast

    def BOI(self, ast):
        return ast

    def BU(self, ast):
        return ast

    def BY(self, ast):
        return ast

    def CAhA(self, ast):
        return ast

    def CAI(self, ast):
        return ast

    def CEI(self, ast):
        return ast

    def CEhE(self, ast):
        return ast

    def CO(self, ast):
        return ast

    def COI(self, ast):
        return ast

    def CU(self, ast):
        return ast

    def CUhE(self, ast):
        return ast

    def DAhO(self, ast):
        return ast

    def DOI(self, ast):
        return ast

    def DOhU(self, ast):
        return ast

    def FA(self, ast):
        return ast

    def FAhA(self, ast):
        return ast

    def FAhO(self, ast):
        return ast

    def FEhE(self, ast):
        return ast

    def FEhU(self, ast):
        return ast

    def FIhO(self, ast):
        return ast

    def FOI(self, ast):
        return ast

    def FUhA(self, ast):
        return ast

    def FUhE(self, ast):
        return ast

    def FUhO(self, ast):
        return ast

    def GA(self, ast):
        return ast

    def GAhO(self, ast):
        return ast

    def GEhU(self, ast):
        return ast

    def GI(self, ast):
        return ast

    def GIhA(self, ast):
        return ast

    def GOI(self, ast):
        return ast

    def GOhA(self, ast):
        return ast

    def GUhA(self, ast):
        return ast

    def I(self, ast):
        return ast

    def JA(self, ast):
        return ast

    def JAI(self, ast):
        return ast

    def JOhI(self, ast):
        return ast

    def JOI(self, ast):
        return ast

    def KE(self, ast):
        return ast

    def KEhE(self, ast):
        return ast

    def KEI(self, ast):
        return ast

    def KI(self, ast):
        return ast

    def KOhA(self, ast):
        return ast

    def KU(self, ast):
        return ast

    def KUhE(self, ast):
        return ast

    def KUhO(self, ast):
        return ast

    def LA(self, ast):
        return ast

    def LAU(self, ast):
        return ast

    def LAhE(self, ast):
        return ast

    def LE(self, ast):
        return ast

    def LEhU(self, ast):
        return ast

    def LI(self, ast):
        return ast

    def LIhU(self, ast):
        return ast

    def LOhO(self, ast):
        return ast

    def LOhU(self, ast):
        return ast

    def LU(self, ast):
        return ast

    def LUhU(self, ast):
        return ast

    def MAhO(self, ast):
        return ast

    def MAI(self, ast):
        return ast

    def ME(self, ast):
        return ast

    def MEhU(self, ast):
        return ast

    def MOhE(self, ast):
        return ast

    def MOhI(self, ast):
        return ast

    def MOI(self, ast):
        return ast

    def NA(self, ast):
        return ast

    def NAI(self, ast):
        return ast

    def NAhE(self, ast):
        return ast

    def NAhU(self, ast):
        return ast

    def NIhE(self, ast):
        return ast

    def NIhO(self, ast):
        return ast

    def NOI(self, ast):
        return ast

    def NU(self, ast):
        return ast

    def NUhA(self, ast):
        return ast

    def NUhI(self, ast):
        return ast

    def NUhU(self, ast):
        return ast

    def PA(self, ast):
        return ast

    def PEhE(self, ast):
        return ast

    def PEhO(self, ast):
        return ast

    def PU(self, ast):
        return ast

    def RAhO(self, ast):
        return ast

    def ROI(self, ast):
        return ast

    def SA(self, ast):
        return ast

    def SE(self, ast):
        return ast

    def SEI(self, ast):
        return ast

    def SEhU(self, ast):
        return ast

    def SI(self, ast):
        return ast

    def SOI(self, ast):
        return ast

    def SU(self, ast):
        return ast

    def TAhE(self, ast):
        return ast

    def TEhU(self, ast):
        return ast

    def TEI(self, ast):
        return ast

    def TO(self, ast):
        return ast

    def TOI(self, ast):
        return ast

    def TUhE(self, ast):
        return ast

    def TUhU(self, ast):
        return ast

    def UI(self, ast):
        return ast

    def VA(self, ast):
        return ast

    def VAU(self, ast):
        return ast

    def VEI(self, ast):
        return ast

    def VEhO(self, ast):
        return ast

    def VUhU(self, ast):
        return ast

    def VEhA(self, ast):
        return ast

    def VIhA(self, ast):
        return ast

    def VUhO(self, ast):
        return ast

    def XI(self, ast):
        return ast

    def Y(self, ast):
        return ast

    def ZAhO(self, ast):
        return ast

    def ZEhA(self, ast):
        return ast

    def ZEI(self, ast):
        return ast

    def ZI(self, ast):
        return ast

    def ZIhE(self, ast):
        return ast

    def ZO(self, ast):
        return ast

    def ZOI(self, ast):
        return ast

    def ZOhU(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = LojbanParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in LojbanParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for Lojban.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(args.file, args.startrule, trace=args.trace, whitespace=args.whitespace)
